// Code generated by vyacc -o vsql/y.v vsql/y.y. DO NOT EDIT.

// line vsql/y.y:2

module vsql

import math

pub const token_a = 57346
pub const token_absolute = 57347
pub const token_action = 57348
pub const token_ada = 57349
pub const token_add = 57350
pub const token_admin = 57351
pub const token_after = 57352
pub const token_always = 57353
pub const token_asc = 57354
pub const token_assertion = 57355
pub const token_assignment = 57356
pub const token_attribute = 57357
pub const token_attributes = 57358
pub const token_before = 57359
pub const token_bernoulli = 57360
pub const token_breadth = 57361
pub const token_c = 57362
pub const token_cascade = 57363
pub const token_catalog = 57364
pub const token_catalog_name = 57365
pub const token_chain = 57366
pub const token_chaining = 57367
pub const token_character_set_catalog = 57368
pub const token_character_set_name = 57369
pub const token_character_set_schema = 57370
pub const token_characteristics = 57371
pub const token_characters = 57372
pub const token_class_origin = 57373
pub const token_cobol = 57374
pub const token_collation = 57375
pub const token_collation_catalog = 57376
pub const token_collation_name = 57377
pub const token_collation_schema = 57378
pub const token_columns = 57379
pub const token_column_name = 57380
pub const token_command_function = 57381
pub const token_command_function_code = 57382
pub const token_committed = 57383
pub const token_conditional = 57384
pub const token_condition_number = 57385
pub const token_connection = 57386
pub const token_connection_name = 57387
pub const token_constraint_catalog = 57388
pub const token_constraint_name = 57389
pub const token_constraint_schema = 57390
pub const token_constraints = 57391
pub const token_constructor = 57392
pub const token_continue = 57393
pub const token_cursor_name = 57394
pub const token_data = 57395
pub const token_datetime_interval_code = 57396
pub const token_datetime_interval_precision = 57397
pub const token_defaults = 57398
pub const token_deferrable = 57399
pub const token_deferred = 57400
pub const token_defined = 57401
pub const token_definer = 57402
pub const token_degree = 57403
pub const token_depth = 57404
pub const token_derived = 57405
pub const token_desc = 57406
pub const token_describe_catalog = 57407
pub const token_describe_name = 57408
pub const token_describe_procedure_specific_catalog = 57409
pub const token_describe_procedure_specific_name = 57410
pub const token_describe_procedure_specific_schema = 57411
pub const token_describe_schema = 57412
pub const token_descriptor = 57413
pub const token_diagnostics = 57414
pub const token_dispatch = 57415
pub const token_domain = 57416
pub const token_dynamic_function = 57417
pub const token_dynamic_function_code = 57418
pub const token_encoding = 57419
pub const token_enforced = 57420
pub const token_error = 57421
pub const token_exclude = 57422
pub const token_excluding = 57423
pub const token_expression = 57424
pub const token_final = 57425
pub const token_finish = 57426
pub const token_finish_catalog = 57427
pub const token_finish_name = 57428
pub const token_finish_procedure_specific_catalog = 57429
pub const token_finish_procedure_specific_name = 57430
pub const token_finish_procedure_specific_schema = 57431
pub const token_finish_schema = 57432
pub const token_first = 57433
pub const token_flag = 57434
pub const token_following = 57435
pub const token_format = 57436
pub const token_fortran = 57437
pub const token_found = 57438
pub const token_fulfill = 57439
pub const token_fulfill_catalog = 57440
pub const token_fulfill_name = 57441
pub const token_fulfill_procedure_specific_catalog = 57442
pub const token_fulfill_procedure_specific_name = 57443
pub const token_fulfill_procedure_specific_schema = 57444
pub const token_fulfill_schema = 57445
pub const token_g = 57446
pub const token_general = 57447
pub const token_generated = 57448
pub const token_go = 57449
pub const token_goto = 57450
pub const token_granted = 57451
pub const token_has_pass_through_columns = 57452
pub const token_has_pass_thru_cols = 57453
pub const token_hierarchy = 57454
pub const token_ignore = 57455
pub const token_immediate = 57456
pub const token_immediately = 57457
pub const token_implementation = 57458
pub const token_including = 57459
pub const token_increment = 57460
pub const token_initially = 57461
pub const token_input = 57462
pub const token_instance = 57463
pub const token_instantiable = 57464
pub const token_instead = 57465
pub const token_invoker = 57466
pub const token_isolation = 57467
pub const token_is_prunable = 57468
pub const token_json = 57469
pub const token_k = 57470
pub const token_keep = 57471
pub const token_key = 57472
pub const token_keys = 57473
pub const token_key_member = 57474
pub const token_key_type = 57475
pub const token_last = 57476
pub const token_length = 57477
pub const token_level = 57478
pub const token_locator = 57479
pub const token_m = 57480
pub const token_map = 57481
pub const token_matched = 57482
pub const token_maxvalue = 57483
pub const token_message_length = 57484
pub const token_message_octet_length = 57485
pub const token_message_text = 57486
pub const token_minvalue = 57487
pub const token_more = 57488
pub const token_mumps = 57489
pub const token_name = 57490
pub const token_names = 57491
pub const token_nested = 57492
pub const token_nesting = 57493
pub const token_next = 57494
pub const token_nfc = 57495
pub const token_nfd = 57496
pub const token_nfkc = 57497
pub const token_nfkd = 57498
pub const token_normalized = 57499
pub const token_nullable = 57500
pub const token_nulls = 57501
pub const token_number = 57502
pub const token_object = 57503
pub const token_octets = 57504
pub const token_option = 57505
pub const token_options = 57506
pub const token_ordering = 57507
pub const token_ordinality = 57508
pub const token_others = 57509
pub const token_output = 57510
pub const token_overflow = 57511
pub const token_overriding = 57512
pub const token_p = 57513
pub const token_pad = 57514
pub const token_parameter_mode = 57515
pub const token_parameter_name = 57516
pub const token_parameter_ordinal_position = 57517
pub const token_parameter_specific_catalog = 57518
pub const token_parameter_specific_name = 57519
pub const token_parameter_specific_schema = 57520
pub const token_partial = 57521
pub const token_pascal = 57522
pub const token_pass = 57523
pub const token_passing = 57524
pub const token_past = 57525
pub const token_path = 57526
pub const token_placing = 57527
pub const token_plan = 57528
pub const token_pli = 57529
pub const token_preceding = 57530
pub const token_preserve = 57531
pub const token_prior = 57532
pub const token_private = 57533
pub const token_private_parameters = 57534
pub const token_private_params_s = 57535
pub const token_privileges = 57536
pub const token_prune = 57537
pub const token_public = 57538
pub const token_quotes = 57539
pub const token_read = 57540
pub const token_relative = 57541
pub const token_repeatable = 57542
pub const token_respect = 57543
pub const token_restart = 57544
pub const token_restrict = 57545
pub const token_returned_cardinality = 57546
pub const token_returned_length = 57547
pub const token_returned_octet_length = 57548
pub const token_returned_sqlstate = 57549
pub const token_returning = 57550
pub const token_returns_only_pass_through = 57551
pub const token_ret_only_pass_thru = 57552
pub const token_role = 57553
pub const token_routine = 57554
pub const token_routine_catalog = 57555
pub const token_routine_name = 57556
pub const token_routine_schema = 57557
pub const token_row_count = 57558
pub const token_scalar = 57559
pub const token_scale = 57560
pub const token_schema = 57561
pub const token_schema_name = 57562
pub const token_scope_catalog = 57563
pub const token_scope_name = 57564
pub const token_scope_schema = 57565
pub const token_section = 57566
pub const token_security = 57567
pub const token_self = 57568
pub const token_sequence = 57569
pub const token_serializable = 57570
pub const token_server_name = 57571
pub const token_session = 57572
pub const token_sets = 57573
pub const token_simple = 57574
pub const token_size = 57575
pub const token_source = 57576
pub const token_space = 57577
pub const token_specific_name = 57578
pub const token_start_catalog = 57579
pub const token_start_name = 57580
pub const token_start_procedure_specific_catalog = 57581
pub const token_start_procedure_specific_name = 57582
pub const token_start_procedure_specific_schema = 57583
pub const token_start_schema = 57584
pub const token_state = 57585
pub const token_statement = 57586
pub const token_string = 57587
pub const token_structure = 57588
pub const token_style = 57589
pub const token_subclass_origin = 57590
pub const token_t = 57591
pub const token_table_name = 57592
pub const token_table_semantics = 57593
pub const token_temporary = 57594
pub const token_through = 57595
pub const token_ties = 57596
pub const token_top_level_count = 57597
pub const token_transaction = 57598
pub const token_transaction_active = 57599
pub const token_transactions_committed = 57600
pub const token_transactions_rolled_back = 57601
pub const token_transform = 57602
pub const token_transforms = 57603
pub const token_trigger_catalog = 57604
pub const token_trigger_name = 57605
pub const token_trigger_schema = 57606
pub const token_type = 57607
pub const token_unbounded = 57608
pub const token_uncommitted = 57609
pub const token_unconditional = 57610
pub const token_under = 57611
pub const token_unnamed = 57612
pub const token_usage = 57613
pub const token_user_defined_type_catalog = 57614
pub const token_user_defined_type_code = 57615
pub const token_user_defined_type_name = 57616
pub const token_user_defined_type_schema = 57617
pub const token_utf16 = 57618
pub const token_utf32 = 57619
pub const token_utf8 = 57620
pub const token_view = 57621
pub const token_work = 57622
pub const token_wrapper = 57623
pub const token_write = 57624
pub const token_zone = 57625
pub const token_abs = 57626
pub const token_acos = 57627
pub const token_all = 57628
pub const token_allocate = 57629
pub const token_alter = 57630
pub const token_and = 57631
pub const token_any = 57632
pub const token_are = 57633
pub const token_array = 57634
pub const token_array_agg = 57635
pub const token_array_max_cardinality = 57636
pub const token_as = 57637
pub const token_asensitive = 57638
pub const token_asin = 57639
pub const token_asymmetric = 57640
pub const token_at = 57641
pub const token_atan = 57642
pub const token_atomic = 57643
pub const token_authorization = 57644
pub const token_avg = 57645
pub const token_begin = 57646
pub const token_begin_frame = 57647
pub const token_begin_partition = 57648
pub const token_between = 57649
pub const token_bigint = 57650
pub const token_binary = 57651
pub const token_blob = 57652
pub const token_boolean = 57653
pub const token_both = 57654
pub const token_by = 57655
pub const token_call = 57656
pub const token_called = 57657
pub const token_cardinality = 57658
pub const token_cascaded = 57659
pub const token_case = 57660
pub const token_cast = 57661
pub const token_ceil = 57662
pub const token_ceiling = 57663
pub const token_char = 57664
pub const token_char_length = 57665
pub const token_character = 57666
pub const token_character_length = 57667
pub const token_check = 57668
pub const token_classifier = 57669
pub const token_clob = 57670
pub const token_close = 57671
pub const token_coalesce = 57672
pub const token_collate = 57673
pub const token_collect = 57674
pub const token_column = 57675
pub const token_commit = 57676
pub const token_condition = 57677
pub const token_connect = 57678
pub const token_constraint = 57679
pub const token_contains = 57680
pub const token_convert = 57681
pub const token_copy = 57682
pub const token_corr = 57683
pub const token_corresponding = 57684
pub const token_cos = 57685
pub const token_cosh = 57686
pub const token_count = 57687
pub const token_covar_pop = 57688
pub const token_covar_samp = 57689
pub const token_create = 57690
pub const token_cross = 57691
pub const token_cube = 57692
pub const token_cume_dist = 57693
pub const token_current = 57694
pub const token_current_catalog = 57695
pub const token_current_date = 57696
pub const token_current_default_transform_group = 57697
pub const token_current_path = 57698
pub const token_current_role = 57699
pub const token_current_row = 57700
pub const token_current_schema = 57701
pub const token_current_time = 57702
pub const token_current_timestamp = 57703
pub const token_current_transform_group_for_type = 57704
pub const token_current_user = 57705
pub const token_cursor = 57706
pub const token_cycle = 57707
pub const token_date = 57708
pub const token_day = 57709
pub const token_deallocate = 57710
pub const token_dec = 57711
pub const token_decimal = 57712
pub const token_decfloat = 57713
pub const token_declare = 57714
pub const token_default = 57715
pub const token_define = 57716
pub const token_delete = 57717
pub const token_dense_rank = 57718
pub const token_deref = 57719
pub const token_describe = 57720
pub const token_deterministic = 57721
pub const token_disconnect = 57722
pub const token_distinct = 57723
pub const token_double = 57724
pub const token_drop = 57725
pub const token_dynamic = 57726
pub const token_each = 57727
pub const token_element = 57728
pub const token_else = 57729
pub const token_empty = 57730
pub const token_end = 57731
pub const token_end_frame = 57732
pub const token_end_partition = 57733
pub const token_equals = 57734
pub const token_escape = 57735
pub const token_every = 57736
pub const token_except = 57737
pub const token_exec = 57738
pub const token_execute = 57739
pub const token_exists = 57740
pub const token_exp = 57741
pub const token_external = 57742
pub const token_extract = 57743
pub const token_false = 57744
pub const token_fetch = 57745
pub const token_filter = 57746
pub const token_first_value = 57747
pub const token_float = 57748
pub const token_floor = 57749
pub const token_for = 57750
pub const token_foreign = 57751
pub const token_frame_row = 57752
pub const token_free = 57753
pub const token_from = 57754
pub const token_full = 57755
pub const token_function = 57756
pub const token_fusion = 57757
pub const token_get = 57758
pub const token_global = 57759
pub const token_grant = 57760
pub const token_group = 57761
pub const token_grouping = 57762
pub const token_groups = 57763
pub const token_having = 57764
pub const token_hold = 57765
pub const token_hour = 57766
pub const token_identity = 57767
pub const token_in = 57768
pub const token_indicator = 57769
pub const token_initial = 57770
pub const token_inner = 57771
pub const token_inout = 57772
pub const token_insensitive = 57773
pub const token_insert = 57774
pub const token_int = 57775
pub const token_integer = 57776
pub const token_intersect = 57777
pub const token_intersection = 57778
pub const token_interval = 57779
pub const token_into = 57780
pub const token_is = 57781
pub const token_join = 57782
pub const token_json_array = 57783
pub const token_json_arrayagg = 57784
pub const token_json_exists = 57785
pub const token_json_object = 57786
pub const token_json_objectagg = 57787
pub const token_json_query = 57788
pub const token_json_table = 57789
pub const token_json_table_primitive = 57790
pub const token_json_value = 57791
pub const token_lag = 57792
pub const token_language = 57793
pub const token_large = 57794
pub const token_last_value = 57795
pub const token_lateral = 57796
pub const token_lead = 57797
pub const token_leading = 57798
pub const token_left = 57799
pub const token_like = 57800
pub const token_like_regex = 57801
pub const token_listagg = 57802
pub const token_ln = 57803
pub const token_local = 57804
pub const token_localtime = 57805
pub const token_localtimestamp = 57806
pub const token_log = 57807
pub const token_log10 = 57808
pub const token_lower = 57809
pub const token_match = 57810
pub const token_match_number = 57811
pub const token_match_recognize = 57812
pub const token_matches = 57813
pub const token_max = 57814
pub const token_member = 57815
pub const token_merge = 57816
pub const token_method = 57817
pub const token_min = 57818
pub const token_minute = 57819
pub const token_mod = 57820
pub const token_modifies = 57821
pub const token_module = 57822
pub const token_month = 57823
pub const token_multiset = 57824
pub const token_national = 57825
pub const token_natural = 57826
pub const token_nchar = 57827
pub const token_nclob = 57828
pub const token_new = 57829
pub const token_no = 57830
pub const token_none = 57831
pub const token_normalize = 57832
pub const token_not = 57833
pub const token_nth_value = 57834
pub const token_ntile = 57835
pub const token_null = 57836
pub const token_nullif = 57837
pub const token_numeric = 57838
pub const token_octet_length = 57839
pub const token_occurrences_regex = 57840
pub const token_of = 57841
pub const token_offset = 57842
pub const token_old = 57843
pub const token_omit = 57844
pub const token_on = 57845
pub const token_one = 57846
pub const token_only = 57847
pub const token_open = 57848
pub const token_or = 57849
pub const token_order = 57850
pub const token_out = 57851
pub const token_outer = 57852
pub const token_over = 57853
pub const token_overlaps = 57854
pub const token_overlay = 57855
pub const token_parameter = 57856
pub const token_partition = 57857
pub const token_pattern = 57858
pub const token_per = 57859
pub const token_percent = 57860
pub const token_percent_rank = 57861
pub const token_percentile_cont = 57862
pub const token_percentile_disc = 57863
pub const token_period = 57864
pub const token_portion = 57865
pub const token_position = 57866
pub const token_position_regex = 57867
pub const token_power = 57868
pub const token_precedes = 57869
pub const token_precision = 57870
pub const token_prepare = 57871
pub const token_primary = 57872
pub const token_procedure = 57873
pub const token_ptf = 57874
pub const token_range = 57875
pub const token_rank = 57876
pub const token_reads = 57877
pub const token_real = 57878
pub const token_recursive = 57879
pub const token_ref = 57880
pub const token_references = 57881
pub const token_referencing = 57882
pub const token_regr_avgx = 57883
pub const token_regr_avgy = 57884
pub const token_regr_count = 57885
pub const token_regr_intercept = 57886
pub const token_regr_r2 = 57887
pub const token_regr_slope = 57888
pub const token_regr_sxx = 57889
pub const token_regr_sxy = 57890
pub const token_regr_syy = 57891
pub const token_release = 57892
pub const token_result = 57893
pub const token_return = 57894
pub const token_returns = 57895
pub const token_revoke = 57896
pub const token_right = 57897
pub const token_rollback = 57898
pub const token_rollup = 57899
pub const token_row = 57900
pub const token_row_number = 57901
pub const token_rows = 57902
pub const token_running = 57903
pub const token_savepoint = 57904
pub const token_scope = 57905
pub const token_scroll = 57906
pub const token_search = 57907
pub const token_second = 57908
pub const token_seek = 57909
pub const token_select = 57910
pub const token_sensitive = 57911
pub const token_session_user = 57912
pub const token_set = 57913
pub const token_show = 57914
pub const token_similar = 57915
pub const token_sin = 57916
pub const token_sinh = 57917
pub const token_skip = 57918
pub const token_smallint = 57919
pub const token_some = 57920
pub const token_specific = 57921
pub const token_specifictype = 57922
pub const token_sql = 57923
pub const token_sqlexception = 57924
pub const token_sqlstate = 57925
pub const token_sqlwarning = 57926
pub const token_sqrt = 57927
pub const token_start = 57928
pub const token_static = 57929
pub const token_stddev_pop = 57930
pub const token_stddev_samp = 57931
pub const token_submultiset = 57932
pub const token_subset = 57933
pub const token_substring = 57934
pub const token_substring_regex = 57935
pub const token_succeeds = 57936
pub const token_sum = 57937
pub const token_symmetric = 57938
pub const token_system = 57939
pub const token_system_time = 57940
pub const token_system_user = 57941
pub const token_table = 57942
pub const token_tablesample = 57943
pub const token_tan = 57944
pub const token_tanh = 57945
pub const token_then = 57946
pub const token_time = 57947
pub const token_timestamp = 57948
pub const token_timezone_hour = 57949
pub const token_timezone_minute = 57950
pub const token_to = 57951
pub const token_trailing = 57952
pub const token_translate = 57953
pub const token_translate_regex = 57954
pub const token_translation = 57955
pub const token_treat = 57956
pub const token_trigger = 57957
pub const token_trim = 57958
pub const token_trim_array = 57959
pub const token_true = 57960
pub const token_truncate = 57961
pub const token_uescape = 57962
pub const token_union = 57963
pub const token_unique = 57964
pub const token_unknown = 57965
pub const token_unnest = 57966
pub const token_update = 57967
pub const token_upper = 57968
pub const token_user = 57969
pub const token_using = 57970
pub const token_value = 57971
pub const token_values = 57972
pub const token_value_of = 57973
pub const token_var_pop = 57974
pub const token_var_samp = 57975
pub const token_varbinary = 57976
pub const token_varchar = 57977
pub const token_varying = 57978
pub const token_versioning = 57979
pub const token_when = 57980
pub const token_whenever = 57981
pub const token_where = 57982
pub const token_width_bucket = 57983
pub const token_window = 57984
pub const token_with = 57985
pub const token_within = 57986
pub const token_without = 57987
pub const token_year = 57988
pub const token_operator_equals = 57989
pub const token_operator_left_paren = 57990
pub const token_operator_right_paren = 57991
pub const token_operator_asterisk = 57992
pub const token_operator_comma = 57993
pub const token_operator_plus = 57994
pub const token_operator_minus = 57995
pub const token_operator_period = 57996
pub const token_operator_solidus = 57997
pub const token_operator_colon = 57998
pub const token_operator_less_than = 57999
pub const token_operator_greater_than = 58000
pub const token_operator_double_pipe = 58001
pub const token_operator_not_equals = 58002
pub const token_operator_greater_equals = 58003
pub const token_operator_less_equals = 58004
pub const token_operator_semicolon = 58005
pub const token_operator_period_asterisk = 58006
pub const token_operator_left_paren_asterisk = 58007
pub const token_literal_identifier = 58008
pub const token_literal_string = 58009
pub const token_literal_number = 58010
pub const token_e = 58011
pub const token_is_true = 58012
pub const token_is_false = 58013
pub const token_is_unknown = 58014
pub const token_is_not_true = 58015
pub const token_is_not_false = 58016
pub const token_is_not_unknown = 58017

const yy_toknames = [
	'\$end',
	'error',
	'\$unk',
	'A',
	'ABSOLUTE',
	'ACTION',
	'ADA',
	'ADD',
	'ADMIN',
	'AFTER',
	'ALWAYS',
	'ASC',
	'ASSERTION',
	'ASSIGNMENT',
	'ATTRIBUTE',
	'ATTRIBUTES',
	'BEFORE',
	'BERNOULLI',
	'BREADTH',
	'C',
	'CASCADE',
	'CATALOG',
	'CATALOG_NAME',
	'CHAIN',
	'CHAINING',
	'CHARACTER_SET_CATALOG',
	'CHARACTER_SET_NAME',
	'CHARACTER_SET_SCHEMA',
	'CHARACTERISTICS',
	'CHARACTERS',
	'CLASS_ORIGIN',
	'COBOL',
	'COLLATION',
	'COLLATION_CATALOG',
	'COLLATION_NAME',
	'COLLATION_SCHEMA',
	'COLUMNS',
	'COLUMN_NAME',
	'COMMAND_FUNCTION',
	'COMMAND_FUNCTION_CODE',
	'COMMITTED',
	'CONDITIONAL',
	'CONDITION_NUMBER',
	'CONNECTION',
	'CONNECTION_NAME',
	'CONSTRAINT_CATALOG',
	'CONSTRAINT_NAME',
	'CONSTRAINT_SCHEMA',
	'CONSTRAINTS',
	'CONSTRUCTOR',
	'CONTINUE',
	'CURSOR_NAME',
	'DATA',
	'DATETIME_INTERVAL_CODE',
	'DATETIME_INTERVAL_PRECISION',
	'DEFAULTS',
	'DEFERRABLE',
	'DEFERRED',
	'DEFINED',
	'DEFINER',
	'DEGREE',
	'DEPTH',
	'DERIVED',
	'DESC',
	'DESCRIBE_CATALOG',
	'DESCRIBE_NAME',
	'DESCRIBE_PROCEDURE_SPECIFIC_CATALOG',
	'DESCRIBE_PROCEDURE_SPECIFIC_NAME',
	'DESCRIBE_PROCEDURE_SPECIFIC_SCHEMA',
	'DESCRIBE_SCHEMA',
	'DESCRIPTOR',
	'DIAGNOSTICS',
	'DISPATCH',
	'DOMAIN',
	'DYNAMIC_FUNCTION',
	'DYNAMIC_FUNCTION_CODE',
	'ENCODING',
	'ENFORCED',
	'ERROR',
	'EXCLUDE',
	'EXCLUDING',
	'EXPRESSION',
	'FINAL',
	'FINISH',
	'FINISH_CATALOG',
	'FINISH_NAME',
	'FINISH_PROCEDURE_SPECIFIC_CATALOG',
	'FINISH_PROCEDURE_SPECIFIC_NAME',
	'FINISH_PROCEDURE_SPECIFIC_SCHEMA',
	'FINISH_SCHEMA',
	'FIRST',
	'FLAG',
	'FOLLOWING',
	'FORMAT',
	'FORTRAN',
	'FOUND',
	'FULFILL',
	'FULFILL_CATALOG',
	'FULFILL_NAME',
	'FULFILL_PROCEDURE_SPECIFIC_CATALOG',
	'FULFILL_PROCEDURE_SPECIFIC_NAME',
	'FULFILL_PROCEDURE_SPECIFIC_SCHEMA',
	'FULFILL_SCHEMA',
	'G',
	'GENERAL',
	'GENERATED',
	'GO',
	'GOTO',
	'GRANTED',
	'HAS_PASS_THROUGH_COLUMNS',
	'HAS_PASS_THRU_COLS',
	'HIERARCHY',
	'IGNORE',
	'IMMEDIATE',
	'IMMEDIATELY',
	'IMPLEMENTATION',
	'INCLUDING',
	'INCREMENT',
	'INITIALLY',
	'INPUT',
	'INSTANCE',
	'INSTANTIABLE',
	'INSTEAD',
	'INVOKER',
	'ISOLATION',
	'IS_PRUNABLE',
	'JSON',
	'K',
	'KEEP',
	'KEY',
	'KEYS',
	'KEY_MEMBER',
	'KEY_TYPE',
	'LAST',
	'LENGTH',
	'LEVEL',
	'LOCATOR',
	'M',
	'MAP',
	'MATCHED',
	'MAXVALUE',
	'MESSAGE_LENGTH',
	'MESSAGE_OCTET_LENGTH',
	'MESSAGE_TEXT',
	'MINVALUE',
	'MORE',
	'MUMPS',
	'NAME',
	'NAMES',
	'NESTED',
	'NESTING',
	'NEXT',
	'NFC',
	'NFD',
	'NFKC',
	'NFKD',
	'NORMALIZED',
	'NULLABLE',
	'NULLS',
	'NUMBER',
	'OBJECT',
	'OCTETS',
	'OPTION',
	'OPTIONS',
	'ORDERING',
	'ORDINALITY',
	'OTHERS',
	'OUTPUT',
	'OVERFLOW',
	'OVERRIDING',
	'P',
	'PAD',
	'PARAMETER_MODE',
	'PARAMETER_NAME',
	'PARAMETER_ORDINAL_POSITION',
	'PARAMETER_SPECIFIC_CATALOG',
	'PARAMETER_SPECIFIC_NAME',
	'PARAMETER_SPECIFIC_SCHEMA',
	'PARTIAL',
	'PASCAL',
	'PASS',
	'PASSING',
	'PAST',
	'PATH',
	'PLACING',
	'PLAN',
	'PLI',
	'PRECEDING',
	'PRESERVE',
	'PRIOR',
	'PRIVATE',
	'PRIVATE_PARAMETERS',
	'PRIVATE_PARAMS_S',
	'PRIVILEGES',
	'PRUNE',
	'PUBLIC',
	'QUOTES',
	'READ',
	'RELATIVE',
	'REPEATABLE',
	'RESPECT',
	'RESTART',
	'RESTRICT',
	'RETURNED_CARDINALITY',
	'RETURNED_LENGTH',
	'RETURNED_OCTET_LENGTH',
	'RETURNED_SQLSTATE',
	'RETURNING',
	'RETURNS_ONLY_PASS_THROUGH',
	'RET_ONLY_PASS_THRU',
	'ROLE',
	'ROUTINE',
	'ROUTINE_CATALOG',
	'ROUTINE_NAME',
	'ROUTINE_SCHEMA',
	'ROW_COUNT',
	'SCALAR',
	'SCALE',
	'SCHEMA',
	'SCHEMA_NAME',
	'SCOPE_CATALOG',
	'SCOPE_NAME',
	'SCOPE_SCHEMA',
	'SECTION',
	'SECURITY',
	'SELF',
	'SEQUENCE',
	'SERIALIZABLE',
	'SERVER_NAME',
	'SESSION',
	'SETS',
	'SIMPLE',
	'SIZE',
	'SOURCE',
	'SPACE',
	'SPECIFIC_NAME',
	'START_CATALOG',
	'START_NAME',
	'START_PROCEDURE_SPECIFIC_CATALOG',
	'START_PROCEDURE_SPECIFIC_NAME',
	'START_PROCEDURE_SPECIFIC_SCHEMA',
	'START_SCHEMA',
	'STATE',
	'STATEMENT',
	'STRING',
	'STRUCTURE',
	'STYLE',
	'SUBCLASS_ORIGIN',
	'T',
	'TABLE_NAME',
	'TABLE_SEMANTICS',
	'TEMPORARY',
	'THROUGH',
	'TIES',
	'TOP_LEVEL_COUNT',
	'TRANSACTION',
	'TRANSACTION_ACTIVE',
	'TRANSACTIONS_COMMITTED',
	'TRANSACTIONS_ROLLED_BACK',
	'TRANSFORM',
	'TRANSFORMS',
	'TRIGGER_CATALOG',
	'TRIGGER_NAME',
	'TRIGGER_SCHEMA',
	'TYPE',
	'UNBOUNDED',
	'UNCOMMITTED',
	'UNCONDITIONAL',
	'UNDER',
	'UNNAMED',
	'USAGE',
	'USER_DEFINED_TYPE_CATALOG',
	'USER_DEFINED_TYPE_CODE',
	'USER_DEFINED_TYPE_NAME',
	'USER_DEFINED_TYPE_SCHEMA',
	'UTF16',
	'UTF32',
	'UTF8',
	'VIEW',
	'WORK',
	'WRAPPER',
	'WRITE',
	'ZONE',
	'ABS',
	'ACOS',
	'ALL',
	'ALLOCATE',
	'ALTER',
	'AND',
	'ANY',
	'ARE',
	'ARRAY',
	'ARRAY_AGG',
	'ARRAY_MAX_CARDINALITY',
	'AS',
	'ASENSITIVE',
	'ASIN',
	'ASYMMETRIC',
	'AT',
	'ATAN',
	'ATOMIC',
	'AUTHORIZATION',
	'AVG',
	'BEGIN',
	'BEGIN_FRAME',
	'BEGIN_PARTITION',
	'BETWEEN',
	'BIGINT',
	'BINARY',
	'BLOB',
	'BOOLEAN',
	'BOTH',
	'BY',
	'CALL',
	'CALLED',
	'CARDINALITY',
	'CASCADED',
	'CASE',
	'CAST',
	'CEIL',
	'CEILING',
	'CHAR',
	'CHAR_LENGTH',
	'CHARACTER',
	'CHARACTER_LENGTH',
	'CHECK',
	'CLASSIFIER',
	'CLOB',
	'CLOSE',
	'COALESCE',
	'COLLATE',
	'COLLECT',
	'COLUMN',
	'COMMIT',
	'CONDITION',
	'CONNECT',
	'CONSTRAINT',
	'CONTAINS',
	'CONVERT',
	'COPY',
	'CORR',
	'CORRESPONDING',
	'COS',
	'COSH',
	'COUNT',
	'COVAR_POP',
	'COVAR_SAMP',
	'CREATE',
	'CROSS',
	'CUBE',
	'CUME_DIST',
	'CURRENT',
	'CURRENT_CATALOG',
	'CURRENT_DATE',
	'CURRENT_DEFAULT_TRANSFORM_GROUP',
	'CURRENT_PATH',
	'CURRENT_ROLE',
	'CURRENT_ROW',
	'CURRENT_SCHEMA',
	'CURRENT_TIME',
	'CURRENT_TIMESTAMP',
	'CURRENT_TRANSFORM_GROUP_FOR_TYPE',
	'CURRENT_USER',
	'CURSOR',
	'CYCLE',
	'DATE',
	'DAY',
	'DEALLOCATE',
	'DEC',
	'DECIMAL',
	'DECFLOAT',
	'DECLARE',
	'DEFAULT',
	'DEFINE',
	'DELETE',
	'DENSE_RANK',
	'DEREF',
	'DESCRIBE',
	'DETERMINISTIC',
	'DISCONNECT',
	'DISTINCT',
	'DOUBLE',
	'DROP',
	'DYNAMIC',
	'EACH',
	'ELEMENT',
	'ELSE',
	'EMPTY',
	'END',
	'END_FRAME',
	'END_PARTITION',
	'EQUALS',
	'ESCAPE',
	'EVERY',
	'EXCEPT',
	'EXEC',
	'EXECUTE',
	'EXISTS',
	'EXP',
	'EXTERNAL',
	'EXTRACT',
	'FALSE',
	'FETCH',
	'FILTER',
	'FIRST_VALUE',
	'FLOAT',
	'FLOOR',
	'FOR',
	'FOREIGN',
	'FRAME_ROW',
	'FREE',
	'FROM',
	'FULL',
	'FUNCTION',
	'FUSION',
	'GET',
	'GLOBAL',
	'GRANT',
	'GROUP',
	'GROUPING',
	'GROUPS',
	'HAVING',
	'HOLD',
	'HOUR',
	'IDENTITY',
	'IN',
	'INDICATOR',
	'INITIAL',
	'INNER',
	'INOUT',
	'INSENSITIVE',
	'INSERT',
	'INT',
	'INTEGER',
	'INTERSECT',
	'INTERSECTION',
	'INTERVAL',
	'INTO',
	'IS',
	'JOIN',
	'JSON_ARRAY',
	'JSON_ARRAYAGG',
	'JSON_EXISTS',
	'JSON_OBJECT',
	'JSON_OBJECTAGG',
	'JSON_QUERY',
	'JSON_TABLE',
	'JSON_TABLE_PRIMITIVE',
	'JSON_VALUE',
	'LAG',
	'LANGUAGE',
	'LARGE',
	'LAST_VALUE',
	'LATERAL',
	'LEAD',
	'LEADING',
	'LEFT',
	'LIKE',
	'LIKE_REGEX',
	'LISTAGG',
	'LN',
	'LOCAL',
	'LOCALTIME',
	'LOCALTIMESTAMP',
	'LOG',
	'LOG10',
	'LOWER',
	'MATCH',
	'MATCH_NUMBER',
	'MATCH_RECOGNIZE',
	'MATCHES',
	'MAX',
	'MEMBER',
	'MERGE',
	'METHOD',
	'MIN',
	'MINUTE',
	'MOD',
	'MODIFIES',
	'MODULE',
	'MONTH',
	'MULTISET',
	'NATIONAL',
	'NATURAL',
	'NCHAR',
	'NCLOB',
	'NEW',
	'NO',
	'NONE',
	'NORMALIZE',
	'NOT',
	'NTH_VALUE',
	'NTILE',
	'NULL',
	'NULLIF',
	'NUMERIC',
	'OCTET_LENGTH',
	'OCCURRENCES_REGEX',
	'OF',
	'OFFSET',
	'OLD',
	'OMIT',
	'ON',
	'ONE',
	'ONLY',
	'OPEN',
	'OR',
	'ORDER',
	'OUT',
	'OUTER',
	'OVER',
	'OVERLAPS',
	'OVERLAY',
	'PARAMETER',
	'PARTITION',
	'PATTERN',
	'PER',
	'PERCENT',
	'PERCENT_RANK',
	'PERCENTILE_CONT',
	'PERCENTILE_DISC',
	'PERIOD',
	'PORTION',
	'POSITION',
	'POSITION_REGEX',
	'POWER',
	'PRECEDES',
	'PRECISION',
	'PREPARE',
	'PRIMARY',
	'PROCEDURE',
	'PTF',
	'RANGE',
	'RANK',
	'READS',
	'REAL',
	'RECURSIVE',
	'REF',
	'REFERENCES',
	'REFERENCING',
	'REGR_AVGX',
	'REGR_AVGY',
	'REGR_COUNT',
	'REGR_INTERCEPT',
	'REGR_R2',
	'REGR_SLOPE',
	'REGR_SXX',
	'REGR_SXY',
	'REGR_SYY',
	'RELEASE',
	'RESULT',
	'RETURN',
	'RETURNS',
	'REVOKE',
	'RIGHT',
	'ROLLBACK',
	'ROLLUP',
	'ROW',
	'ROW_NUMBER',
	'ROWS',
	'RUNNING',
	'SAVEPOINT',
	'SCOPE',
	'SCROLL',
	'SEARCH',
	'SECOND',
	'SEEK',
	'SELECT',
	'SENSITIVE',
	'SESSION_USER',
	'SET',
	'SHOW',
	'SIMILAR',
	'SIN',
	'SINH',
	'SKIP',
	'SMALLINT',
	'SOME',
	'SPECIFIC',
	'SPECIFICTYPE',
	'SQL',
	'SQLEXCEPTION',
	'SQLSTATE',
	'SQLWARNING',
	'SQRT',
	'START',
	'STATIC',
	'STDDEV_POP',
	'STDDEV_SAMP',
	'SUBMULTISET',
	'SUBSET',
	'SUBSTRING',
	'SUBSTRING_REGEX',
	'SUCCEEDS',
	'SUM',
	'SYMMETRIC',
	'SYSTEM',
	'SYSTEM_TIME',
	'SYSTEM_USER',
	'TABLE',
	'TABLESAMPLE',
	'TAN',
	'TANH',
	'THEN',
	'TIME',
	'TIMESTAMP',
	'TIMEZONE_HOUR',
	'TIMEZONE_MINUTE',
	'TO',
	'TRAILING',
	'TRANSLATE',
	'TRANSLATE_REGEX',
	'TRANSLATION',
	'TREAT',
	'TRIGGER',
	'TRIM',
	'TRIM_ARRAY',
	'TRUE',
	'TRUNCATE',
	'UESCAPE',
	'UNION',
	'UNIQUE',
	'UNKNOWN',
	'UNNEST',
	'UPDATE',
	'UPPER',
	'USER',
	'USING',
	'VALUE',
	'VALUES',
	'VALUE_OF',
	'VAR_POP',
	'VAR_SAMP',
	'VARBINARY',
	'VARCHAR',
	'VARYING',
	'VERSIONING',
	'WHEN',
	'WHENEVER',
	'WHERE',
	'WIDTH_BUCKET',
	'WINDOW',
	'WITH',
	'WITHIN',
	'WITHOUT',
	'YEAR',
	'OPERATOR_EQUALS',
	'OPERATOR_LEFT_PAREN',
	'OPERATOR_RIGHT_PAREN',
	'OPERATOR_ASTERISK',
	'OPERATOR_COMMA',
	'OPERATOR_PLUS',
	'OPERATOR_MINUS',
	'OPERATOR_PERIOD',
	'OPERATOR_SOLIDUS',
	'OPERATOR_COLON',
	'OPERATOR_LESS_THAN',
	'OPERATOR_GREATER_THAN',
	'OPERATOR_DOUBLE_PIPE',
	'OPERATOR_NOT_EQUALS',
	'OPERATOR_GREATER_EQUALS',
	'OPERATOR_LESS_EQUALS',
	'OPERATOR_SEMICOLON',
	'OPERATOR_PERIOD_ASTERISK',
	'OPERATOR_LEFT_PAREN_ASTERISK',
	'LITERAL_IDENTIFIER',
	'LITERAL_STRING',
	'LITERAL_NUMBER',
	'E',
	'IS_TRUE',
	'IS_FALSE',
	'IS_UNKNOWN',
	'IS_NOT_TRUE',
	'IS_NOT_FALSE',
	'IS_NOT_UNKNOWN',
]

const yy_statenames = [
	'A',
	'ABSOLUTE',
	'ACTION',
	'ADA',
	'ADD',
	'ADMIN',
	'AFTER',
	'ALWAYS',
	'ASC',
	'ASSERTION',
	'ASSIGNMENT',
	'ATTRIBUTE',
	'ATTRIBUTES',
	'BEFORE',
	'BERNOULLI',
	'BREADTH',
	'C',
	'CASCADE',
	'CATALOG',
	'CATALOG_NAME',
	'CHAIN',
	'CHAINING',
	'CHARACTER_SET_CATALOG',
	'CHARACTER_SET_NAME',
	'CHARACTER_SET_SCHEMA',
	'CHARACTERISTICS',
	'CHARACTERS',
	'CLASS_ORIGIN',
	'COBOL',
	'COLLATION',
	'COLLATION_CATALOG',
	'COLLATION_NAME',
	'COLLATION_SCHEMA',
	'COLUMNS',
	'COLUMN_NAME',
	'COMMAND_FUNCTION',
	'COMMAND_FUNCTION_CODE',
	'COMMITTED',
	'CONDITIONAL',
	'CONDITION_NUMBER',
	'CONNECTION',
	'CONNECTION_NAME',
	'CONSTRAINT_CATALOG',
	'CONSTRAINT_NAME',
	'CONSTRAINT_SCHEMA',
	'CONSTRAINTS',
	'CONSTRUCTOR',
	'CONTINUE',
	'CURSOR_NAME',
	'DATA',
	'DATETIME_INTERVAL_CODE',
	'DATETIME_INTERVAL_PRECISION',
	'DEFAULTS',
	'DEFERRABLE',
	'DEFERRED',
	'DEFINED',
	'DEFINER',
	'DEGREE',
	'DEPTH',
	'DERIVED',
	'DESC',
	'DESCRIBE_CATALOG',
	'DESCRIBE_NAME',
	'DESCRIBE_PROCEDURE_SPECIFIC_CATALOG',
	'DESCRIBE_PROCEDURE_SPECIFIC_NAME',
	'DESCRIBE_PROCEDURE_SPECIFIC_SCHEMA',
	'DESCRIBE_SCHEMA',
	'DESCRIPTOR',
	'DIAGNOSTICS',
	'DISPATCH',
	'DOMAIN',
	'DYNAMIC_FUNCTION',
	'DYNAMIC_FUNCTION_CODE',
	'ENCODING',
	'ENFORCED',
	'ERROR',
	'EXCLUDE',
	'EXCLUDING',
	'EXPRESSION',
	'FINAL',
	'FINISH',
	'FINISH_CATALOG',
	'FINISH_NAME',
	'FINISH_PROCEDURE_SPECIFIC_CATALOG',
	'FINISH_PROCEDURE_SPECIFIC_NAME',
	'FINISH_PROCEDURE_SPECIFIC_SCHEMA',
	'FINISH_SCHEMA',
	'FIRST',
	'FLAG',
	'FOLLOWING',
	'FORMAT',
	'FORTRAN',
	'FOUND',
	'FULFILL',
	'FULFILL_CATALOG',
	'FULFILL_NAME',
	'FULFILL_PROCEDURE_SPECIFIC_CATALOG',
	'FULFILL_PROCEDURE_SPECIFIC_NAME',
	'FULFILL_PROCEDURE_SPECIFIC_SCHEMA',
	'FULFILL_SCHEMA',
	'G',
	'GENERAL',
	'GENERATED',
	'GO',
	'GOTO',
	'GRANTED',
	'HAS_PASS_THROUGH_COLUMNS',
	'HAS_PASS_THRU_COLS',
	'HIERARCHY',
	'IGNORE',
	'IMMEDIATE',
	'IMMEDIATELY',
	'IMPLEMENTATION',
	'INCLUDING',
	'INCREMENT',
	'INITIALLY',
	'INPUT',
	'INSTANCE',
	'INSTANTIABLE',
	'INSTEAD',
	'INVOKER',
	'ISOLATION',
	'IS_PRUNABLE',
	'JSON',
	'K',
	'KEEP',
	'KEY',
	'KEYS',
	'KEY_MEMBER',
	'KEY_TYPE',
	'LAST',
	'LENGTH',
	'LEVEL',
	'LOCATOR',
	'M',
	'MAP',
	'MATCHED',
	'MAXVALUE',
	'MESSAGE_LENGTH',
	'MESSAGE_OCTET_LENGTH',
	'MESSAGE_TEXT',
	'MINVALUE',
	'MORE',
	'MUMPS',
	'NAME',
	'NAMES',
	'NESTED',
	'NESTING',
	'NEXT',
	'NFC',
	'NFD',
	'NFKC',
	'NFKD',
	'NORMALIZED',
	'NULLABLE',
	'NULLS',
	'NUMBER',
	'OBJECT',
	'OCTETS',
	'OPTION',
	'OPTIONS',
	'ORDERING',
	'ORDINALITY',
	'OTHERS',
	'OUTPUT',
	'OVERFLOW',
	'OVERRIDING',
	'P',
	'PAD',
	'PARAMETER_MODE',
	'PARAMETER_NAME',
	'PARAMETER_ORDINAL_POSITION',
	'PARAMETER_SPECIFIC_CATALOG',
	'PARAMETER_SPECIFIC_NAME',
	'PARAMETER_SPECIFIC_SCHEMA',
	'PARTIAL',
	'PASCAL',
	'PASS',
	'PASSING',
	'PAST',
	'PATH',
	'PLACING',
	'PLAN',
	'PLI',
	'PRECEDING',
	'PRESERVE',
	'PRIOR',
	'PRIVATE',
	'PRIVATE_PARAMETERS',
	'PRIVATE_PARAMS_S',
	'PRIVILEGES',
	'PRUNE',
	'PUBLIC',
	'QUOTES',
	'READ',
	'RELATIVE',
	'REPEATABLE',
	'RESPECT',
	'RESTART',
	'RESTRICT',
	'RETURNED_CARDINALITY',
	'RETURNED_LENGTH',
	'RETURNED_OCTET_LENGTH',
	'RETURNED_SQLSTATE',
	'RETURNING',
	'RETURNS_ONLY_PASS_THROUGH',
	'RET_ONLY_PASS_THRU',
	'ROLE',
	'ROUTINE',
	'ROUTINE_CATALOG',
	'ROUTINE_NAME',
	'ROUTINE_SCHEMA',
	'ROW_COUNT',
	'SCALAR',
	'SCALE',
	'SCHEMA',
	'SCHEMA_NAME',
	'SCOPE_CATALOG',
	'SCOPE_NAME',
	'SCOPE_SCHEMA',
	'SECTION',
	'SECURITY',
	'SELF',
	'SEQUENCE',
	'SERIALIZABLE',
	'SERVER_NAME',
	'SESSION',
	'SETS',
	'SIMPLE',
	'SIZE',
	'SOURCE',
	'SPACE',
	'SPECIFIC_NAME',
	'START_CATALOG',
	'START_NAME',
	'START_PROCEDURE_SPECIFIC_CATALOG',
	'START_PROCEDURE_SPECIFIC_NAME',
	'START_PROCEDURE_SPECIFIC_SCHEMA',
	'START_SCHEMA',
	'STATE',
	'STATEMENT',
	'STRING',
	'STRUCTURE',
	'STYLE',
	'SUBCLASS_ORIGIN',
	'T',
	'TABLE_NAME',
	'TABLE_SEMANTICS',
	'TEMPORARY',
	'THROUGH',
	'TIES',
	'TOP_LEVEL_COUNT',
	'TRANSACTION',
	'TRANSACTION_ACTIVE',
	'TRANSACTIONS_COMMITTED',
	'TRANSACTIONS_ROLLED_BACK',
	'TRANSFORM',
	'TRANSFORMS',
	'TRIGGER_CATALOG',
	'TRIGGER_NAME',
	'TRIGGER_SCHEMA',
	'TYPE',
	'UNBOUNDED',
	'UNCOMMITTED',
	'UNCONDITIONAL',
	'UNDER',
	'UNNAMED',
	'USAGE',
	'USER_DEFINED_TYPE_CATALOG',
	'USER_DEFINED_TYPE_CODE',
	'USER_DEFINED_TYPE_NAME',
	'USER_DEFINED_TYPE_SCHEMA',
	'UTF16',
	'UTF32',
	'UTF8',
	'VIEW',
	'WORK',
	'WRAPPER',
	'WRITE',
	'ZONE',
	'ABS',
	'ACOS',
	'ALL',
	'ALLOCATE',
	'ALTER',
	'AND',
	'ANY',
	'ARE',
	'ARRAY',
	'ARRAY_AGG',
	'ARRAY_MAX_CARDINALITY',
	'AS',
	'ASENSITIVE',
	'ASIN',
	'ASYMMETRIC',
	'AT',
	'ATAN',
	'ATOMIC',
	'AUTHORIZATION',
	'AVG',
	'BEGIN',
	'BEGIN_FRAME',
	'BEGIN_PARTITION',
	'BETWEEN',
	'BIGINT',
	'BINARY',
	'BLOB',
	'BOOLEAN',
	'BOTH',
	'BY',
	'CALL',
	'CALLED',
	'CARDINALITY',
	'CASCADED',
	'CASE',
	'CAST',
	'CEIL',
	'CEILING',
	'CHAR',
	'CHAR_LENGTH',
	'CHARACTER',
	'CHARACTER_LENGTH',
	'CHECK',
	'CLASSIFIER',
	'CLOB',
	'CLOSE',
	'COALESCE',
	'COLLATE',
	'COLLECT',
	'COLUMN',
	'COMMIT',
	'CONDITION',
	'CONNECT',
	'CONSTRAINT',
	'CONTAINS',
	'CONVERT',
	'COPY',
	'CORR',
	'CORRESPONDING',
	'COS',
	'COSH',
	'COUNT',
	'COVAR_POP',
	'COVAR_SAMP',
	'CREATE',
	'CROSS',
	'CUBE',
	'CUME_DIST',
	'CURRENT',
	'CURRENT_CATALOG',
	'CURRENT_DATE',
	'CURRENT_DEFAULT_TRANSFORM_GROUP',
	'CURRENT_PATH',
	'CURRENT_ROLE',
	'CURRENT_ROW',
	'CURRENT_SCHEMA',
	'CURRENT_TIME',
	'CURRENT_TIMESTAMP',
	'CURRENT_TRANSFORM_GROUP_FOR_TYPE',
	'CURRENT_USER',
	'CURSOR',
	'CYCLE',
	'DATE',
	'DAY',
	'DEALLOCATE',
	'DEC',
	'DECIMAL',
	'DECFLOAT',
	'DECLARE',
	'DEFAULT',
	'DEFINE',
	'DELETE',
	'DENSE_RANK',
	'DEREF',
	'DESCRIBE',
	'DETERMINISTIC',
	'DISCONNECT',
	'DISTINCT',
	'DOUBLE',
	'DROP',
	'DYNAMIC',
	'EACH',
	'ELEMENT',
	'ELSE',
	'EMPTY',
	'END',
	'END_FRAME',
	'END_PARTITION',
	'EQUALS',
	'ESCAPE',
	'EVERY',
	'EXCEPT',
	'EXEC',
	'EXECUTE',
	'EXISTS',
	'EXP',
	'EXTERNAL',
	'EXTRACT',
	'FALSE',
	'FETCH',
	'FILTER',
	'FIRST_VALUE',
	'FLOAT',
	'FLOOR',
	'FOR',
	'FOREIGN',
	'FRAME_ROW',
	'FREE',
	'FROM',
	'FULL',
	'FUNCTION',
	'FUSION',
	'GET',
	'GLOBAL',
	'GRANT',
	'GROUP',
	'GROUPING',
	'GROUPS',
	'HAVING',
	'HOLD',
	'HOUR',
	'IDENTITY',
	'IN',
	'INDICATOR',
	'INITIAL',
	'INNER',
	'INOUT',
	'INSENSITIVE',
	'INSERT',
	'INT',
	'INTEGER',
	'INTERSECT',
	'INTERSECTION',
	'INTERVAL',
	'INTO',
	'IS',
	'JOIN',
	'JSON_ARRAY',
	'JSON_ARRAYAGG',
	'JSON_EXISTS',
	'JSON_OBJECT',
	'JSON_OBJECTAGG',
	'JSON_QUERY',
	'JSON_TABLE',
	'JSON_TABLE_PRIMITIVE',
	'JSON_VALUE',
	'LAG',
	'LANGUAGE',
	'LARGE',
	'LAST_VALUE',
	'LATERAL',
	'LEAD',
	'LEADING',
	'LEFT',
	'LIKE',
	'LIKE_REGEX',
	'LISTAGG',
	'LN',
	'LOCAL',
	'LOCALTIME',
	'LOCALTIMESTAMP',
	'LOG',
	'LOG10',
	'LOWER',
	'MATCH',
	'MATCH_NUMBER',
	'MATCH_RECOGNIZE',
	'MATCHES',
	'MAX',
	'MEMBER',
	'MERGE',
	'METHOD',
	'MIN',
	'MINUTE',
	'MOD',
	'MODIFIES',
	'MODULE',
	'MONTH',
	'MULTISET',
	'NATIONAL',
	'NATURAL',
	'NCHAR',
	'NCLOB',
	'NEW',
	'NO',
	'NONE',
	'NORMALIZE',
	'NOT',
	'NTH_VALUE',
	'NTILE',
	'NULL',
	'NULLIF',
	'NUMERIC',
	'OCTET_LENGTH',
	'OCCURRENCES_REGEX',
	'OF',
	'OFFSET',
	'OLD',
	'OMIT',
	'ON',
	'ONE',
	'ONLY',
	'OPEN',
	'OR',
	'ORDER',
	'OUT',
	'OUTER',
	'OVER',
	'OVERLAPS',
	'OVERLAY',
	'PARAMETER',
	'PARTITION',
	'PATTERN',
	'PER',
	'PERCENT',
	'PERCENT_RANK',
	'PERCENTILE_CONT',
	'PERCENTILE_DISC',
	'PERIOD',
	'PORTION',
	'POSITION',
	'POSITION_REGEX',
	'POWER',
	'PRECEDES',
	'PRECISION',
	'PREPARE',
	'PRIMARY',
	'PROCEDURE',
	'PTF',
	'RANGE',
	'RANK',
	'READS',
	'REAL',
	'RECURSIVE',
	'REF',
	'REFERENCES',
	'REFERENCING',
	'REGR_AVGX',
	'REGR_AVGY',
	'REGR_COUNT',
	'REGR_INTERCEPT',
	'REGR_R2',
	'REGR_SLOPE',
	'REGR_SXX',
	'REGR_SXY',
	'REGR_SYY',
	'RELEASE',
	'RESULT',
	'RETURN',
	'RETURNS',
	'REVOKE',
	'RIGHT',
	'ROLLBACK',
	'ROLLUP',
	'ROW',
	'ROW_NUMBER',
	'ROWS',
	'RUNNING',
	'SAVEPOINT',
	'SCOPE',
	'SCROLL',
	'SEARCH',
	'SECOND',
	'SEEK',
	'SELECT',
	'SENSITIVE',
	'SESSION_USER',
	'SET',
	'SHOW',
	'SIMILAR',
	'SIN',
	'SINH',
	'SKIP',
	'SMALLINT',
	'SOME',
	'SPECIFIC',
	'SPECIFICTYPE',
	'SQL',
	'SQLEXCEPTION',
	'SQLSTATE',
	'SQLWARNING',
	'SQRT',
	'START',
	'STATIC',
	'STDDEV_POP',
	'STDDEV_SAMP',
	'SUBMULTISET',
	'SUBSET',
	'SUBSTRING',
	'SUBSTRING_REGEX',
	'SUCCEEDS',
	'SUM',
	'SYMMETRIC',
	'SYSTEM',
	'SYSTEM_TIME',
	'SYSTEM_USER',
	'TABLE',
	'TABLESAMPLE',
	'TAN',
	'TANH',
	'THEN',
	'TIME',
	'TIMESTAMP',
	'TIMEZONE_HOUR',
	'TIMEZONE_MINUTE',
	'TO',
	'TRAILING',
	'TRANSLATE',
	'TRANSLATE_REGEX',
	'TRANSLATION',
	'TREAT',
	'TRIGGER',
	'TRIM',
	'TRIM_ARRAY',
	'TRUE',
	'TRUNCATE',
	'UESCAPE',
	'UNION',
	'UNIQUE',
	'UNKNOWN',
	'UNNEST',
	'UPDATE',
	'UPPER',
	'USER',
	'USING',
	'VALUE',
	'VALUES',
	'VALUE_OF',
	'VAR_POP',
	'VAR_SAMP',
	'VARBINARY',
	'VARCHAR',
	'VARYING',
	'VERSIONING',
	'WHEN',
	'WHENEVER',
	'WHERE',
	'WIDTH_BUCKET',
	'WINDOW',
	'WITH',
	'WITHIN',
	'WITHOUT',
	'YEAR',
	'OPERATOR_EQUALS',
	'OPERATOR_LEFT_PAREN',
	'OPERATOR_RIGHT_PAREN',
	'OPERATOR_ASTERISK',
	'OPERATOR_COMMA',
	'OPERATOR_PLUS',
	'OPERATOR_MINUS',
	'OPERATOR_PERIOD',
	'OPERATOR_SOLIDUS',
	'OPERATOR_COLON',
	'OPERATOR_LESS_THAN',
	'OPERATOR_GREATER_THAN',
	'OPERATOR_DOUBLE_PIPE',
	'OPERATOR_NOT_EQUALS',
	'OPERATOR_GREATER_EQUALS',
	'OPERATOR_LESS_EQUALS',
	'OPERATOR_SEMICOLON',
	'OPERATOR_PERIOD_ASTERISK',
	'OPERATOR_LEFT_PAREN_ASTERISK',
	'LITERAL_IDENTIFIER',
	'LITERAL_STRING',
	'LITERAL_NUMBER',
	'E',
	'IS_TRUE',
	'IS_FALSE',
	'IS_UNKNOWN',
	'IS_NOT_TRUE',
	'IS_NOT_FALSE',
	'IS_NOT_UNKNOWN',
]

const yy_eof_code = 1
const yy_err_code = 2
const yy_initial_stack_size = 16

// line vsql/y.y:3007

// line yacctab:1
const yy_exca = [
	-1,
	1,
	1,
	-1,
	-2,
	0,
	-1,
	55,
	654,
	478,
	-2,
	485,
	-1,
	373,
	307,
	771,
	439,
	771,
	458,
	771,
	491,
	771,
	573,
	771,
	647,
	771,
	657,
	771,
	658,
	771,
	660,
	771,
	661,
	771,
	662,
	771,
	-2,
	549,
	-1,
	380,
	648,
	485,
	664,
	725,
	-2,
	697,
	-1,
	396,
	650,
	562,
	652,
	562,
	653,
	562,
	655,
	562,
	659,
	614,
	-2,
	2,
	-1,
	403,
	307,
	772,
	439,
	772,
	458,
	772,
	491,
	772,
	573,
	772,
	647,
	772,
	657,
	772,
	658,
	772,
	660,
	772,
	661,
	772,
	662,
	772,
	-2,
	670,
	-1,
	406,
	650,
	675,
	652,
	675,
	653,
	675,
	655,
	675,
	659,
	675,
	-2,
	672,
	-1,
	502,
	669,
	456,
	-2,
	447,
	-1,
	534,
	1,
	754,
	403,
	754,
	500,
	754,
	508,
	754,
	649,
	754,
	651,
	754,
	-2,
	771,
	-1,
	541,
	648,
	485,
	-2,
	697,
	-1,
	567,
	654,
	479,
	-2,
	478,
	-1,
	821,
	649,
	632,
	-2,
	636,
	-1,
	1060,
	1,
	762,
	651,
	762,
	-2,
	771,
]

const yy_private = 57344

const yy_last = 12889

const yy_act = [
	602,
	1087,
	1118,
	1062,
	1058,
	399,
	1093,
	1039,
	1065,
	435,
	1027,
	1076,
	840,
	983,
	777,
	991,
	778,
	837,
	739,
	817,
	854,
	843,
	950,
	886,
	780,
	499,
	799,
	938,
	373,
	696,
	909,
	735,
	510,
	56,
	713,
	684,
	711,
	820,
	729,
	569,
	699,
	790,
	709,
	53,
	638,
	494,
	668,
	433,
	540,
	521,
	523,
	495,
	748,
	675,
	532,
	673,
	763,
	671,
	523,
	662,
	611,
	586,
	419,
	420,
	522,
	463,
	603,
	604,
	605,
	606,
	607,
	608,
	419,
	420,
	53,
	53,
	534,
	644,
	521,
	522,
	762,
	920,
	403,
	596,
	368,
	392,
	517,
	546,
	521,
	594,
	596,
	547,
	522,
	521,
	517,
	377,
	580,
	551,
	762,
	1109,
	539,
	419,
	420,
	419,
	420,
	845,
	762,
	371,
	580,
	587,
	944,
	581,
	1028,
	1053,
	1029,
	762,
	580,
	465,
	1024,
	1022,
	762,
	465,
	645,
	1028,
	875,
	1029,
	737,
	864,
	679,
	46,
	465,
	465,
	1015,
	609,
	908,
	509,
	795,
	1074,
	1073,
	361,
	358,
	970,
	384,
	387,
	961,
	792,
	379,
	363,
	360,
	719,
	398,
	381,
	385,
	367,
	545,
	957,
	492,
	956,
	844,
	881,
	1035,
	40,
	561,
	354,
	700,
	374,
	701,
	881,
	990,
	59,
	879,
	507,
	720,
	587,
	357,
	946,
	722,
	357,
	879,
	797,
	1064,
	911,
	796,
	549,
	1020,
	989,
	800,
	883,
	49,
	916,
	1009,
	47,
	737,
	719,
	929,
	883,
	48,
	760,
	357,
	962,
	391,
	389,
	868,
	966,
	746,
	353,
	869,
	34,
	878,
	637,
	467,
	865,
	559,
	535,
	548,
	973,
	720,
	915,
	999,
	905,
	722,
	38,
	51,
	590,
	1101,
	1100,
	347,
	346,
	634,
	345,
	364,
	1088,
	726,
	1041,
	975,
	564,
	350,
	50,
	631,
	971,
	850,
	592,
	678,
	25,
	630,
	629,
	464,
	787,
	14,
	633,
	628,
	762,
	632,
	51,
	544,
	627,
	39,
	431,
	430,
	429,
	428,
	635,
	427,
	1043,
	885,
	745,
	969,
	968,
	744,
	742,
	740,
	356,
	738,
	579,
	356,
	1057,
	531,
	732,
	490,
	355,
	1122,
	1059,
	836,
	536,
	533,
	884,
	542,
	747,
	366,
	524,
	525,
	538,
	851,
	884,
	703,
	702,
	793,
	524,
	525,
	560,
	45,
	43,
	516,
	42,
	41,
	15,
	352,
	518,
	37,
	582,
	516,
	375,
	372,
	370,
	369,
	518,
	577,
	365,
	44,
	985,
	984,
	982,
	734,
	882,
	880,
	1040,
	743,
	741,
	596,
	965,
	468,
	496,
	806,
	1054,
	493,
	436,
	419,
	420,
	522,
	434,
	526,
	405,
	432,
	636,
	419,
	420,
	522,
	736,
	526,
	402,
	580,
	512,
	521,
	601,
	762,
	395,
	426,
	425,
	424,
	512,
	521,
	423,
	422,
	1089,
	388,
	383,
	819,
	816,
	1085,
	972,
	1006,
	457,
	456,
	455,
	421,
	400,
	393,
	386,
	996,
	771,
	446,
	994,
	589,
	765,
	443,
	53,
	571,
	442,
	53,
	571,
	571,
	433,
	566,
	578,
	572,
	573,
	723,
	572,
	572,
	1004,
	406,
	406,
	808,
	575,
	576,
	441,
	418,
	417,
	416,
	415,
	967,
	794,
	414,
	591,
	727,
	413,
	412,
	645,
	411,
	598,
	410,
	409,
	408,
	407,
	397,
	378,
	870,
	647,
	648,
	35,
	646,
	650,
	649,
	351,
	433,
	1066,
	554,
	554,
	963,
	964,
	723,
	46,
	554,
	960,
	36,
	612,
	613,
	614,
	615,
	616,
	617,
	618,
	619,
	620,
	621,
	622,
	959,
	955,
	954,
	33,
	623,
	624,
	625,
	626,
	953,
	952,
	951,
	440,
	958,
	1002,
	803,
	652,
	439,
	653,
	654,
	655,
	656,
	657,
	827,
	471,
	438,
	54,
	570,
	58,
	52,
	57,
	674,
	658,
	659,
	660,
	661,
	672,
	670,
	515,
	514,
	513,
	832,
	831,
	17,
	511,
	503,
	663,
	664,
	47,
	502,
	506,
	505,
	552,
	552,
	665,
	504,
	466,
	642,
	552,
	643,
	639,
	557,
	558,
	63,
	721,
	362,
	359,
	62,
	61,
	60,
	595,
	641,
	588,
	563,
	640,
	584,
	519,
	593,
	9,
	6,
	5,
	4,
	3,
	677,
	349,
	562,
	433,
	666,
	348,
	682,
	7,
	16,
	687,
	686,
	941,
	685,
	683,
	10,
	1014,
	842,
	681,
	680,
	543,
	556,
	676,
	433,
	550,
	550,
	721,
	568,
	8,
	555,
	574,
	24,
	707,
	23,
	13,
	689,
	22,
	591,
	21,
	20,
	12,
	19,
	433,
	18,
	11,
	749,
	1036,
	860,
	32,
	980,
	730,
	433,
	728,
	31,
	433,
	597,
	599,
	871,
	376,
	866,
	978,
	976,
	610,
	718,
	717,
	716,
	433,
	715,
	724,
	712,
	53,
	710,
	708,
	28,
	731,
	859,
	858,
	1019,
	1018,
	598,
	714,
	949,
	598,
	698,
	856,
	855,
	853,
	706,
	705,
	27,
	30,
	725,
	29,
	565,
	26,
	520,
	433,
	433,
	508,
	498,
	469,
	470,
	371,
	782,
	781,
	437,
	781,
	849,
	697,
	667,
	695,
	401,
	394,
	554,
	783,
	2,
	802,
	433,
	1,
	396,
	651,
	0,
	0,
	0,
	598,
	598,
	0,
	433,
	433,
	433,
	761,
	0,
	0,
	382,
	0,
	0,
	0,
	0,
	0,
	0,
	540,
	433,
	0,
	433,
	0,
	0,
	0,
	0,
	0,
	491,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	784,
	786,
	0,
	0,
	0,
	0,
	688,
	534,
	610,
	0,
	598,
	798,
	0,
	846,
	0,
	801,
	804,
	785,
	785,
	691,
	0,
	825,
	694,
	552,
	0,
	848,
	826,
	828,
	829,
	704,
	0,
	539,
	847,
	835,
	733,
	754,
	751,
	839,
	563,
	433,
	838,
	758,
	752,
	753,
	750,
	852,
	406,
	756,
	757,
	863,
	562,
	877,
	873,
	862,
	0,
	812,
	834,
	0,
	0,
	0,
	0,
	779,
	779,
	779,
	779,
	731,
	805,
	598,
	876,
	874,
	0,
	0,
	589,
	0,
	589,
	589,
	589,
	589,
	589,
	0,
	589,
	589,
	589,
	589,
	589,
	0,
	0,
	0,
	571,
	406,
	433,
	0,
	0,
	0,
	0,
	891,
	572,
	0,
	0,
	0,
	0,
	896,
	889,
	0,
	830,
	802,
	833,
	0,
	554,
	0,
	554,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	598,
	0,
	867,
	0,
	872,
	890,
	0,
	0,
	892,
	893,
	894,
	895,
	913,
	0,
	897,
	898,
	899,
	900,
	901,
	907,
	0,
	902,
	924,
	903,
	904,
	0,
	535,
	0,
	0,
	841,
	433,
	0,
	433,
	433,
	0,
	943,
	0,
	906,
	930,
	932,
	912,
	927,
	939,
	798,
	0,
	974,
	0,
	914,
	936,
	0,
	857,
	917,
	918,
	919,
	785,
	921,
	922,
	923,
	598,
	0,
	0,
	0,
	945,
	0,
	749,
	948,
	940,
	0,
	931,
	0,
	933,
	992,
	986,
	0,
	0,
	0,
	0,
	935,
	406,
	0,
	0,
	0,
	988,
	937,
	0,
	0,
	841,
	0,
	0,
	53,
	433,
	0,
	942,
	698,
	947,
	993,
	0,
	406,
	433,
	588,
	0,
	588,
	588,
	588,
	588,
	588,
	0,
	588,
	588,
	588,
	588,
	588,
	0,
	0,
	0,
	433,
	406,
	433,
	598,
	541,
	0,
	433,
	1003,
	1000,
	1001,
	406,
	0,
	0,
	406,
	0,
	1008,
	0,
	0,
	1010,
	554,
	554,
	0,
	55,
	1013,
	0,
	406,
	1021,
	1023,
	1025,
	0,
	554,
	977,
	979,
	1026,
	1030,
	1032,
	1033,
	610,
	1017,
	934,
	998,
	1034,
	981,
	801,
	1031,
	0,
	0,
	0,
	0,
	0,
	0,
	380,
	0,
	55,
	55,
	406,
	406,
	785,
	0,
	749,
	1011,
	0,
	1012,
	992,
	0,
	1037,
	838,
	0,
	0,
	433,
	589,
	0,
	589,
	0,
	688,
	406,
	406,
	1042,
	1045,
	1038,
	841,
	0,
	589,
	1044,
	53,
	1063,
	406,
	406,
	406,
	591,
	0,
	0,
	1068,
	0,
	1070,
	0,
	0,
	598,
	1055,
	406,
	406,
	1069,
	406,
	1071,
	0,
	0,
	553,
	553,
	0,
	0,
	1072,
	433,
	553,
	1060,
	1078,
	1079,
	781,
	986,
	600,
	1083,
	1046,
	1081,
	1047,
	1082,
	1075,
	0,
	0,
	1049,
	1050,
	0,
	1051,
	0,
	1052,
	433,
	1048,
	0,
	1092,
	1056,
	0,
	598,
	0,
	0,
	0,
	0,
	0,
	0,
	1095,
	0,
	1097,
	0,
	0,
	785,
	0,
	0,
	1090,
	0,
	0,
	0,
	0,
	406,
	1063,
	589,
	1080,
	0,
	1111,
	0,
	1016,
	0,
	0,
	1084,
	0,
	0,
	0,
	1104,
	0,
	1106,
	857,
	0,
	1120,
	1116,
	1121,
	0,
	1117,
	433,
	0,
	0,
	1125,
	0,
	1060,
	1123,
	1113,
	1094,
	0,
	1091,
	0,
	1096,
	0,
	1098,
	1099,
	0,
	433,
	1102,
	1103,
	1125,
	1105,
	1107,
	1131,
	0,
	0,
	0,
	406,
	1108,
	0,
	1110,
	0,
	588,
	0,
	588,
	1112,
	1130,
	0,
	1114,
	0,
	1115,
	0,
	406,
	1067,
	588,
	1067,
	0,
	1067,
	779,
	0,
	0,
	0,
	779,
	0,
	1077,
	1077,
	1077,
	0,
	0,
	0,
	1124,
	1126,
	0,
	1127,
	1128,
	1129,
	0,
	1061,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	1124,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	406,
	0,
	406,
	406,
	0,
	1067,
	0,
	1067,
	841,
	764,
	766,
	767,
	768,
	769,
	770,
	772,
	773,
	774,
	775,
	776,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	610,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	588,
	0,
	0,
	1119,
	693,
	1119,
	0,
	0,
	600,
	600,
	0,
	0,
	600,
	600,
	553,
	759,
	0,
	0,
	0,
	1061,
	0,
	0,
	406,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	406,
	0,
	600,
	600,
	600,
	600,
	600,
	600,
	600,
	600,
	600,
	600,
	600,
	0,
	0,
	0,
	0,
	406,
	0,
	406,
	0,
	0,
	0,
	406,
	759,
	0,
	0,
	567,
	55,
	55,
	567,
	55,
	55,
	55,
	0,
	0,
	0,
	0,
	791,
	0,
	585,
	0,
	0,
	0,
	759,
	759,
	759,
	759,
	759,
	759,
	759,
	759,
	0,
	0,
	0,
	0,
	0,
	0,
	809,
	810,
	811,
	0,
	813,
	814,
	815,
	821,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	406,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	406,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	406,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	553,
	0,
	553,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	406,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	406,
	0,
	0,
	0,
	0,
	0,
	759,
	0,
	759,
	0,
	0,
	669,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	791,
	0,
	910,
	406,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	759,
	759,
	0,
	0,
	0,
	0,
	585,
	690,
	692,
	406,
	0,
	0,
	995,
	0,
	925,
	928,
	0,
	997,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	380,
	0,
	1007,
	55,
	0,
	585,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	755,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	600,
	0,
	0,
	553,
	553,
	600,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	553,
	0,
	0,
	759,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	759,
	0,
	0,
	0,
	600,
	0,
	910,
	0,
	0,
	0,
	759,
	0,
	0,
	759,
	1005,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	925,
	0,
	0,
	925,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	585,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	585,
	0,
	0,
	0,
	0,
	0,
	1086,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	690,
	0,
	0,
	0,
	0,
	0,
	759,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	925,
	888,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	55,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	600,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	585,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	987,
	55,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	888,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	585,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	585,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	585,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	55,
	0,
	0,
	585,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	987,
	64,
	65,
	66,
	67,
	68,
	69,
	70,
	71,
	72,
	73,
	74,
	75,
	76,
	77,
	78,
	79,
	80,
	81,
	82,
	83,
	84,
	85,
	86,
	87,
	88,
	89,
	90,
	91,
	92,
	93,
	94,
	95,
	96,
	97,
	98,
	99,
	100,
	101,
	102,
	103,
	104,
	105,
	106,
	107,
	108,
	109,
	110,
	111,
	112,
	113,
	114,
	115,
	116,
	117,
	118,
	119,
	120,
	121,
	122,
	123,
	124,
	125,
	126,
	127,
	128,
	129,
	130,
	131,
	132,
	133,
	134,
	135,
	136,
	137,
	138,
	139,
	140,
	141,
	142,
	143,
	144,
	145,
	146,
	147,
	148,
	149,
	150,
	151,
	152,
	153,
	154,
	155,
	156,
	157,
	158,
	159,
	160,
	161,
	162,
	163,
	164,
	165,
	166,
	167,
	168,
	169,
	170,
	171,
	172,
	173,
	174,
	175,
	176,
	177,
	178,
	179,
	180,
	181,
	182,
	183,
	184,
	185,
	186,
	187,
	188,
	189,
	190,
	191,
	192,
	193,
	194,
	195,
	196,
	197,
	198,
	199,
	200,
	201,
	202,
	203,
	204,
	205,
	206,
	207,
	208,
	209,
	210,
	211,
	404,
	213,
	214,
	215,
	216,
	217,
	218,
	219,
	220,
	221,
	222,
	223,
	224,
	225,
	226,
	227,
	228,
	229,
	230,
	231,
	232,
	233,
	234,
	235,
	236,
	237,
	238,
	239,
	240,
	241,
	242,
	243,
	244,
	245,
	246,
	247,
	248,
	249,
	250,
	251,
	252,
	253,
	254,
	255,
	256,
	257,
	258,
	259,
	260,
	261,
	262,
	263,
	264,
	265,
	266,
	267,
	268,
	269,
	270,
	271,
	272,
	273,
	274,
	275,
	276,
	277,
	278,
	279,
	280,
	281,
	282,
	283,
	284,
	285,
	286,
	287,
	288,
	289,
	290,
	291,
	292,
	293,
	294,
	295,
	296,
	297,
	298,
	299,
	300,
	301,
	302,
	303,
	304,
	305,
	306,
	307,
	308,
	309,
	310,
	311,
	312,
	313,
	314,
	315,
	316,
	317,
	318,
	319,
	320,
	321,
	322,
	323,
	324,
	325,
	326,
	327,
	328,
	329,
	330,
	331,
	332,
	333,
	334,
	335,
	336,
	337,
	338,
	339,
	340,
	341,
	342,
	343,
	444,
	484,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	483,
	0,
	0,
	485,
	0,
	0,
	527,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	472,
	453,
	454,
	0,
	474,
	0,
	475,
	0,
	0,
	0,
	0,
	501,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	478,
	481,
	497,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	494,
	458,
	0,
	0,
	0,
	0,
	495,
	459,
	460,
	0,
	0,
	0,
	0,
	523,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	449,
	0,
	0,
	517,
	0,
	0,
	0,
	0,
	452,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	448,
	0,
	461,
	462,
	0,
	447,
	488,
	0,
	0,
	0,
	0,
	528,
	0,
	0,
	0,
	529,
	0,
	445,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	390,
	0,
	0,
	0,
	500,
	0,
	476,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	473,
	0,
	450,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	46,
	0,
	0,
	0,
	0,
	0,
	477,
	480,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	451,
	0,
	0,
	0,
	0,
	0,
	0,
	486,
	0,
	0,
	530,
	0,
	0,
	0,
	0,
	0,
	0,
	479,
	482,
	0,
	524,
	525,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	489,
	0,
	516,
	0,
	0,
	0,
	0,
	518,
	0,
	0,
	487,
	0,
	0,
	0,
	47,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	465,
	0,
	0,
	0,
	419,
	420,
	522,
	0,
	526,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	344,
	512,
	521,
	64,
	65,
	66,
	67,
	68,
	69,
	70,
	71,
	72,
	73,
	74,
	75,
	76,
	77,
	78,
	79,
	80,
	81,
	82,
	83,
	84,
	85,
	86,
	87,
	88,
	89,
	90,
	91,
	92,
	93,
	94,
	95,
	96,
	97,
	98,
	99,
	100,
	101,
	102,
	103,
	104,
	105,
	106,
	107,
	108,
	109,
	110,
	111,
	112,
	113,
	114,
	115,
	116,
	117,
	118,
	119,
	120,
	121,
	122,
	123,
	124,
	125,
	126,
	127,
	128,
	129,
	130,
	131,
	132,
	133,
	134,
	135,
	136,
	137,
	138,
	139,
	140,
	141,
	142,
	143,
	144,
	145,
	146,
	147,
	148,
	149,
	150,
	151,
	152,
	153,
	154,
	155,
	156,
	157,
	158,
	159,
	160,
	161,
	162,
	163,
	164,
	165,
	166,
	167,
	168,
	169,
	170,
	171,
	172,
	173,
	174,
	175,
	176,
	177,
	178,
	179,
	180,
	181,
	182,
	183,
	184,
	185,
	186,
	187,
	188,
	189,
	190,
	191,
	192,
	193,
	194,
	195,
	196,
	197,
	198,
	199,
	200,
	201,
	202,
	203,
	204,
	205,
	206,
	207,
	208,
	209,
	210,
	211,
	404,
	213,
	214,
	215,
	216,
	217,
	218,
	219,
	220,
	221,
	222,
	223,
	224,
	225,
	226,
	227,
	228,
	229,
	230,
	231,
	232,
	233,
	234,
	235,
	236,
	237,
	238,
	239,
	240,
	241,
	242,
	243,
	244,
	245,
	246,
	247,
	248,
	249,
	250,
	251,
	252,
	253,
	254,
	255,
	256,
	257,
	258,
	259,
	260,
	261,
	262,
	263,
	264,
	265,
	266,
	267,
	268,
	269,
	270,
	271,
	272,
	273,
	274,
	275,
	276,
	277,
	278,
	279,
	280,
	281,
	282,
	283,
	284,
	285,
	286,
	287,
	288,
	289,
	290,
	291,
	292,
	293,
	294,
	295,
	296,
	297,
	298,
	299,
	300,
	301,
	302,
	303,
	304,
	305,
	306,
	307,
	308,
	309,
	310,
	311,
	312,
	313,
	314,
	315,
	316,
	317,
	318,
	319,
	320,
	321,
	322,
	323,
	324,
	325,
	326,
	327,
	328,
	329,
	330,
	331,
	332,
	333,
	334,
	335,
	336,
	337,
	338,
	339,
	340,
	341,
	342,
	343,
	444,
	484,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	483,
	0,
	0,
	485,
	0,
	0,
	527,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	472,
	453,
	454,
	0,
	474,
	0,
	475,
	0,
	0,
	0,
	0,
	501,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	478,
	481,
	497,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	494,
	458,
	0,
	0,
	0,
	0,
	495,
	459,
	460,
	0,
	0,
	0,
	0,
	523,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	449,
	0,
	0,
	517,
	0,
	0,
	0,
	0,
	452,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	448,
	0,
	461,
	462,
	0,
	447,
	488,
	0,
	0,
	0,
	0,
	528,
	0,
	0,
	0,
	529,
	0,
	445,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	390,
	0,
	0,
	807,
	500,
	0,
	476,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	473,
	0,
	450,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	477,
	480,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	451,
	0,
	0,
	0,
	0,
	0,
	0,
	486,
	0,
	0,
	530,
	0,
	0,
	0,
	0,
	0,
	0,
	479,
	482,
	0,
	524,
	525,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	489,
	0,
	516,
	0,
	0,
	0,
	0,
	518,
	0,
	0,
	487,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	465,
	0,
	0,
	0,
	419,
	420,
	522,
	0,
	526,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	344,
	512,
	521,
	64,
	65,
	66,
	67,
	68,
	69,
	70,
	71,
	72,
	73,
	74,
	75,
	76,
	77,
	78,
	79,
	80,
	81,
	82,
	83,
	84,
	85,
	86,
	87,
	88,
	89,
	90,
	91,
	92,
	93,
	94,
	95,
	96,
	97,
	98,
	99,
	100,
	101,
	102,
	103,
	104,
	105,
	106,
	107,
	108,
	109,
	110,
	111,
	112,
	113,
	114,
	115,
	116,
	117,
	118,
	119,
	120,
	121,
	122,
	123,
	124,
	125,
	126,
	127,
	128,
	129,
	130,
	131,
	132,
	133,
	134,
	135,
	136,
	137,
	138,
	139,
	140,
	141,
	142,
	143,
	144,
	145,
	146,
	147,
	148,
	149,
	150,
	151,
	152,
	153,
	154,
	155,
	156,
	157,
	158,
	159,
	160,
	161,
	162,
	163,
	164,
	165,
	166,
	167,
	168,
	169,
	170,
	171,
	172,
	173,
	174,
	175,
	176,
	177,
	178,
	179,
	180,
	181,
	182,
	183,
	184,
	185,
	186,
	187,
	188,
	189,
	190,
	191,
	192,
	193,
	194,
	195,
	196,
	197,
	198,
	199,
	200,
	201,
	202,
	203,
	204,
	205,
	206,
	207,
	208,
	209,
	210,
	211,
	404,
	213,
	214,
	215,
	216,
	217,
	218,
	219,
	220,
	221,
	222,
	223,
	224,
	225,
	226,
	227,
	228,
	229,
	230,
	231,
	232,
	233,
	234,
	235,
	236,
	237,
	238,
	239,
	240,
	241,
	242,
	243,
	244,
	245,
	246,
	247,
	248,
	249,
	250,
	251,
	252,
	253,
	254,
	255,
	256,
	257,
	258,
	259,
	260,
	261,
	262,
	263,
	264,
	265,
	266,
	267,
	268,
	269,
	270,
	271,
	272,
	273,
	274,
	275,
	276,
	277,
	278,
	279,
	280,
	281,
	282,
	283,
	284,
	285,
	286,
	287,
	288,
	289,
	290,
	291,
	292,
	293,
	294,
	295,
	296,
	297,
	298,
	299,
	300,
	301,
	302,
	303,
	304,
	305,
	306,
	307,
	308,
	309,
	310,
	311,
	312,
	313,
	314,
	315,
	316,
	317,
	318,
	319,
	320,
	321,
	322,
	323,
	324,
	325,
	326,
	327,
	328,
	329,
	330,
	331,
	332,
	333,
	334,
	335,
	336,
	337,
	338,
	339,
	340,
	341,
	342,
	343,
	444,
	484,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	483,
	0,
	0,
	485,
	0,
	0,
	527,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	472,
	453,
	454,
	0,
	474,
	0,
	475,
	0,
	0,
	0,
	0,
	501,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	478,
	481,
	497,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	494,
	458,
	0,
	0,
	0,
	0,
	495,
	459,
	460,
	0,
	0,
	0,
	0,
	523,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	449,
	0,
	0,
	517,
	0,
	0,
	0,
	0,
	452,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	448,
	0,
	461,
	462,
	0,
	447,
	488,
	0,
	0,
	0,
	0,
	528,
	0,
	0,
	0,
	529,
	0,
	445,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	390,
	0,
	0,
	0,
	500,
	0,
	476,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	473,
	0,
	450,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	477,
	480,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	451,
	0,
	0,
	0,
	0,
	0,
	0,
	486,
	0,
	0,
	530,
	0,
	0,
	0,
	0,
	0,
	0,
	479,
	482,
	0,
	524,
	525,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	489,
	0,
	516,
	0,
	0,
	0,
	0,
	518,
	0,
	0,
	487,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	465,
	762,
	0,
	0,
	419,
	420,
	522,
	0,
	526,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	344,
	512,
	521,
	64,
	65,
	66,
	67,
	68,
	69,
	70,
	71,
	72,
	73,
	74,
	75,
	76,
	77,
	78,
	79,
	80,
	81,
	82,
	83,
	84,
	85,
	86,
	87,
	88,
	89,
	90,
	91,
	92,
	93,
	94,
	95,
	96,
	97,
	98,
	99,
	100,
	101,
	102,
	103,
	104,
	105,
	106,
	107,
	108,
	109,
	110,
	111,
	112,
	113,
	114,
	115,
	116,
	117,
	118,
	119,
	120,
	121,
	122,
	123,
	124,
	125,
	126,
	127,
	128,
	129,
	130,
	131,
	132,
	133,
	134,
	135,
	136,
	137,
	138,
	139,
	140,
	141,
	142,
	143,
	144,
	145,
	146,
	147,
	148,
	149,
	150,
	151,
	152,
	153,
	154,
	155,
	156,
	157,
	158,
	159,
	160,
	161,
	162,
	163,
	164,
	165,
	166,
	167,
	168,
	169,
	170,
	171,
	172,
	173,
	174,
	175,
	176,
	177,
	178,
	179,
	180,
	181,
	182,
	183,
	184,
	185,
	186,
	187,
	188,
	189,
	190,
	191,
	192,
	193,
	194,
	195,
	196,
	197,
	198,
	199,
	200,
	201,
	202,
	203,
	204,
	205,
	206,
	207,
	208,
	209,
	210,
	211,
	404,
	213,
	214,
	215,
	216,
	217,
	218,
	219,
	220,
	221,
	222,
	223,
	224,
	225,
	226,
	227,
	228,
	229,
	230,
	231,
	232,
	233,
	234,
	235,
	236,
	237,
	238,
	239,
	240,
	241,
	242,
	243,
	244,
	245,
	246,
	247,
	248,
	249,
	250,
	251,
	252,
	253,
	254,
	255,
	256,
	257,
	258,
	259,
	260,
	261,
	262,
	263,
	264,
	265,
	266,
	267,
	268,
	269,
	270,
	271,
	272,
	273,
	274,
	275,
	276,
	277,
	278,
	279,
	280,
	281,
	282,
	283,
	284,
	285,
	286,
	287,
	288,
	289,
	290,
	291,
	292,
	293,
	294,
	295,
	296,
	297,
	298,
	299,
	300,
	301,
	302,
	303,
	304,
	305,
	306,
	307,
	308,
	309,
	310,
	311,
	312,
	313,
	314,
	315,
	316,
	317,
	318,
	319,
	320,
	321,
	322,
	323,
	324,
	325,
	326,
	327,
	328,
	329,
	330,
	331,
	332,
	333,
	334,
	335,
	336,
	337,
	338,
	339,
	340,
	341,
	342,
	343,
	444,
	484,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	483,
	0,
	0,
	485,
	0,
	0,
	527,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	472,
	453,
	454,
	0,
	474,
	0,
	475,
	0,
	0,
	0,
	0,
	501,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	478,
	481,
	497,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	494,
	458,
	0,
	0,
	0,
	0,
	495,
	459,
	460,
	0,
	0,
	0,
	0,
	523,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	449,
	0,
	0,
	517,
	0,
	0,
	0,
	0,
	452,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	448,
	0,
	461,
	462,
	0,
	447,
	488,
	0,
	0,
	0,
	0,
	528,
	0,
	0,
	0,
	529,
	0,
	445,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	390,
	0,
	0,
	0,
	500,
	0,
	476,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	473,
	0,
	450,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	537,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	477,
	480,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	451,
	0,
	0,
	0,
	0,
	0,
	0,
	486,
	0,
	0,
	530,
	0,
	0,
	0,
	0,
	0,
	0,
	479,
	482,
	0,
	524,
	525,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	489,
	0,
	516,
	0,
	0,
	0,
	0,
	518,
	0,
	0,
	487,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	465,
	0,
	0,
	0,
	419,
	420,
	522,
	0,
	526,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	344,
	512,
	521,
	64,
	65,
	66,
	67,
	68,
	69,
	70,
	71,
	72,
	73,
	74,
	75,
	76,
	77,
	78,
	79,
	80,
	81,
	82,
	83,
	84,
	85,
	86,
	87,
	88,
	89,
	90,
	91,
	92,
	93,
	94,
	95,
	96,
	97,
	98,
	99,
	100,
	101,
	102,
	103,
	104,
	105,
	106,
	107,
	108,
	109,
	110,
	111,
	112,
	113,
	114,
	115,
	116,
	117,
	118,
	119,
	120,
	121,
	122,
	123,
	124,
	125,
	126,
	127,
	128,
	129,
	130,
	131,
	132,
	133,
	134,
	135,
	136,
	137,
	138,
	139,
	140,
	141,
	142,
	143,
	144,
	145,
	146,
	147,
	148,
	149,
	150,
	151,
	152,
	153,
	154,
	155,
	156,
	157,
	158,
	159,
	160,
	161,
	162,
	163,
	164,
	165,
	166,
	167,
	168,
	169,
	170,
	171,
	172,
	173,
	174,
	175,
	176,
	177,
	178,
	179,
	180,
	181,
	182,
	183,
	184,
	185,
	186,
	187,
	188,
	189,
	190,
	191,
	192,
	193,
	194,
	195,
	196,
	197,
	198,
	199,
	200,
	201,
	202,
	203,
	204,
	205,
	206,
	207,
	208,
	209,
	210,
	211,
	404,
	213,
	214,
	215,
	216,
	217,
	218,
	219,
	220,
	221,
	222,
	223,
	224,
	225,
	226,
	227,
	228,
	229,
	230,
	231,
	232,
	233,
	234,
	235,
	236,
	237,
	238,
	239,
	240,
	241,
	242,
	243,
	244,
	245,
	246,
	247,
	248,
	249,
	250,
	251,
	252,
	253,
	254,
	255,
	256,
	257,
	258,
	259,
	260,
	261,
	262,
	263,
	264,
	265,
	266,
	267,
	268,
	269,
	270,
	271,
	272,
	273,
	274,
	275,
	276,
	277,
	278,
	279,
	280,
	281,
	282,
	283,
	284,
	285,
	286,
	287,
	288,
	289,
	290,
	291,
	292,
	293,
	294,
	295,
	296,
	297,
	298,
	299,
	300,
	301,
	302,
	303,
	304,
	305,
	306,
	307,
	308,
	309,
	310,
	311,
	312,
	313,
	314,
	315,
	316,
	317,
	318,
	319,
	320,
	321,
	322,
	323,
	324,
	325,
	326,
	327,
	328,
	329,
	330,
	331,
	332,
	333,
	334,
	335,
	336,
	337,
	338,
	339,
	340,
	341,
	342,
	343,
	444,
	484,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	483,
	789,
	0,
	485,
	0,
	0,
	527,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	472,
	453,
	454,
	0,
	474,
	0,
	475,
	0,
	0,
	0,
	0,
	501,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	478,
	481,
	497,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	494,
	458,
	0,
	0,
	0,
	0,
	495,
	459,
	460,
	0,
	0,
	0,
	0,
	523,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	449,
	0,
	0,
	517,
	0,
	0,
	0,
	0,
	452,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	448,
	0,
	461,
	462,
	0,
	447,
	488,
	0,
	0,
	0,
	0,
	528,
	0,
	0,
	0,
	529,
	0,
	445,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	500,
	0,
	476,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	473,
	0,
	450,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	477,
	480,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	451,
	0,
	0,
	0,
	0,
	0,
	0,
	486,
	0,
	0,
	530,
	788,
	0,
	0,
	0,
	0,
	0,
	479,
	482,
	0,
	524,
	525,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	489,
	0,
	516,
	0,
	0,
	0,
	0,
	518,
	0,
	0,
	487,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	465,
	0,
	0,
	0,
	419,
	420,
	522,
	0,
	526,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	344,
	512,
	521,
	64,
	65,
	66,
	67,
	68,
	69,
	70,
	71,
	72,
	73,
	74,
	75,
	76,
	77,
	78,
	79,
	80,
	81,
	82,
	83,
	84,
	85,
	86,
	87,
	88,
	89,
	90,
	91,
	92,
	93,
	94,
	95,
	96,
	97,
	98,
	99,
	100,
	101,
	102,
	103,
	104,
	105,
	106,
	107,
	108,
	109,
	110,
	111,
	112,
	113,
	114,
	115,
	116,
	117,
	118,
	119,
	120,
	121,
	122,
	123,
	124,
	125,
	126,
	127,
	128,
	129,
	130,
	131,
	132,
	133,
	134,
	135,
	136,
	137,
	138,
	139,
	140,
	141,
	142,
	143,
	144,
	145,
	146,
	147,
	148,
	149,
	150,
	151,
	152,
	153,
	154,
	155,
	156,
	157,
	158,
	159,
	160,
	161,
	162,
	163,
	164,
	165,
	166,
	167,
	168,
	169,
	170,
	171,
	172,
	173,
	174,
	175,
	176,
	177,
	178,
	179,
	180,
	181,
	182,
	183,
	184,
	185,
	186,
	187,
	188,
	189,
	190,
	191,
	192,
	193,
	194,
	195,
	196,
	197,
	198,
	199,
	200,
	201,
	202,
	203,
	204,
	205,
	206,
	207,
	208,
	209,
	210,
	211,
	404,
	213,
	214,
	215,
	216,
	217,
	218,
	219,
	220,
	221,
	222,
	223,
	224,
	225,
	226,
	227,
	228,
	229,
	230,
	231,
	232,
	233,
	234,
	235,
	236,
	237,
	238,
	239,
	240,
	241,
	242,
	243,
	244,
	245,
	246,
	247,
	248,
	249,
	250,
	251,
	252,
	253,
	254,
	255,
	256,
	257,
	258,
	259,
	260,
	261,
	262,
	263,
	264,
	265,
	266,
	267,
	268,
	269,
	270,
	271,
	272,
	273,
	274,
	275,
	276,
	277,
	278,
	279,
	280,
	281,
	282,
	283,
	284,
	285,
	286,
	287,
	288,
	289,
	290,
	291,
	292,
	293,
	294,
	295,
	296,
	297,
	298,
	299,
	300,
	301,
	302,
	303,
	304,
	305,
	306,
	307,
	308,
	309,
	310,
	311,
	312,
	313,
	314,
	315,
	316,
	317,
	318,
	319,
	320,
	321,
	322,
	323,
	324,
	325,
	326,
	327,
	328,
	329,
	330,
	331,
	332,
	333,
	334,
	335,
	336,
	337,
	338,
	339,
	340,
	341,
	342,
	343,
	444,
	484,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	483,
	0,
	0,
	485,
	0,
	0,
	527,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	472,
	453,
	454,
	0,
	474,
	0,
	475,
	0,
	0,
	0,
	0,
	501,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	478,
	481,
	497,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	494,
	458,
	0,
	0,
	0,
	0,
	495,
	459,
	460,
	0,
	0,
	0,
	0,
	523,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	449,
	0,
	0,
	517,
	0,
	0,
	0,
	0,
	452,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	448,
	0,
	461,
	462,
	0,
	447,
	488,
	0,
	0,
	0,
	0,
	528,
	0,
	0,
	0,
	529,
	0,
	445,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	390,
	0,
	0,
	0,
	500,
	0,
	476,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	473,
	0,
	450,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	477,
	480,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	451,
	0,
	0,
	0,
	0,
	0,
	0,
	486,
	0,
	0,
	530,
	0,
	0,
	0,
	0,
	0,
	0,
	479,
	482,
	0,
	524,
	525,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	489,
	0,
	516,
	0,
	0,
	0,
	0,
	518,
	0,
	0,
	487,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	465,
	0,
	368,
	0,
	419,
	420,
	522,
	0,
	526,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	344,
	512,
	521,
	64,
	65,
	66,
	67,
	68,
	69,
	70,
	71,
	72,
	73,
	74,
	75,
	76,
	77,
	78,
	79,
	80,
	81,
	82,
	83,
	84,
	85,
	86,
	87,
	88,
	89,
	90,
	91,
	92,
	93,
	94,
	95,
	96,
	97,
	98,
	99,
	100,
	101,
	102,
	103,
	104,
	105,
	106,
	107,
	108,
	109,
	110,
	111,
	112,
	113,
	114,
	115,
	116,
	117,
	118,
	119,
	120,
	121,
	122,
	123,
	124,
	125,
	126,
	127,
	128,
	129,
	130,
	131,
	132,
	133,
	134,
	135,
	136,
	137,
	138,
	139,
	140,
	141,
	142,
	143,
	144,
	145,
	146,
	147,
	148,
	149,
	150,
	151,
	152,
	153,
	154,
	155,
	156,
	157,
	158,
	159,
	160,
	161,
	162,
	163,
	164,
	165,
	166,
	167,
	168,
	169,
	170,
	171,
	172,
	173,
	174,
	175,
	176,
	177,
	178,
	179,
	180,
	181,
	182,
	183,
	184,
	185,
	186,
	187,
	188,
	189,
	190,
	191,
	192,
	193,
	194,
	195,
	196,
	197,
	198,
	199,
	200,
	201,
	202,
	203,
	204,
	205,
	206,
	207,
	208,
	209,
	210,
	211,
	404,
	213,
	214,
	215,
	216,
	217,
	218,
	219,
	220,
	221,
	222,
	223,
	224,
	225,
	226,
	227,
	228,
	229,
	230,
	231,
	232,
	233,
	234,
	235,
	236,
	237,
	238,
	239,
	240,
	241,
	242,
	243,
	244,
	245,
	246,
	247,
	248,
	249,
	250,
	251,
	252,
	253,
	254,
	255,
	256,
	257,
	258,
	259,
	260,
	261,
	262,
	263,
	264,
	265,
	266,
	267,
	268,
	269,
	270,
	271,
	272,
	273,
	274,
	275,
	276,
	277,
	278,
	279,
	280,
	281,
	282,
	283,
	284,
	285,
	286,
	287,
	288,
	289,
	290,
	291,
	292,
	293,
	294,
	295,
	296,
	297,
	298,
	299,
	300,
	301,
	302,
	303,
	304,
	305,
	306,
	307,
	308,
	309,
	310,
	311,
	312,
	313,
	314,
	315,
	316,
	317,
	318,
	319,
	320,
	321,
	322,
	323,
	324,
	325,
	326,
	327,
	328,
	329,
	330,
	331,
	332,
	333,
	334,
	335,
	336,
	337,
	338,
	339,
	340,
	341,
	342,
	343,
	444,
	484,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	483,
	0,
	0,
	485,
	0,
	0,
	527,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	472,
	453,
	454,
	0,
	474,
	0,
	475,
	0,
	0,
	0,
	0,
	501,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	478,
	481,
	497,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	494,
	458,
	0,
	0,
	0,
	0,
	495,
	459,
	460,
	0,
	0,
	0,
	0,
	523,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	449,
	0,
	0,
	517,
	0,
	0,
	0,
	0,
	452,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	448,
	0,
	461,
	462,
	0,
	447,
	488,
	0,
	0,
	0,
	0,
	528,
	0,
	0,
	0,
	529,
	0,
	445,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	390,
	0,
	0,
	0,
	500,
	0,
	476,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	473,
	0,
	450,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	477,
	480,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	451,
	0,
	0,
	0,
	0,
	0,
	0,
	486,
	0,
	0,
	530,
	0,
	0,
	0,
	0,
	0,
	0,
	479,
	482,
	0,
	524,
	525,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	489,
	0,
	516,
	0,
	0,
	0,
	0,
	518,
	0,
	0,
	487,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	465,
	0,
	0,
	0,
	419,
	420,
	522,
	0,
	526,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	344,
	512,
	521,
	64,
	65,
	66,
	67,
	68,
	69,
	70,
	71,
	72,
	73,
	74,
	75,
	76,
	77,
	78,
	79,
	80,
	81,
	82,
	83,
	84,
	85,
	86,
	87,
	88,
	89,
	90,
	91,
	92,
	93,
	94,
	95,
	96,
	97,
	98,
	99,
	100,
	101,
	102,
	103,
	104,
	105,
	106,
	107,
	108,
	109,
	110,
	111,
	112,
	113,
	114,
	115,
	116,
	117,
	118,
	119,
	120,
	121,
	122,
	123,
	124,
	125,
	126,
	127,
	128,
	129,
	130,
	131,
	132,
	133,
	134,
	135,
	136,
	137,
	138,
	139,
	140,
	141,
	142,
	143,
	144,
	145,
	146,
	147,
	148,
	149,
	150,
	151,
	152,
	153,
	154,
	155,
	156,
	157,
	158,
	159,
	160,
	161,
	162,
	163,
	164,
	165,
	166,
	167,
	168,
	169,
	170,
	171,
	172,
	173,
	174,
	175,
	176,
	177,
	178,
	179,
	180,
	181,
	182,
	183,
	184,
	185,
	186,
	187,
	188,
	189,
	190,
	191,
	192,
	193,
	194,
	195,
	196,
	197,
	198,
	199,
	200,
	201,
	202,
	203,
	204,
	205,
	206,
	207,
	208,
	209,
	210,
	211,
	404,
	213,
	214,
	215,
	216,
	217,
	218,
	219,
	220,
	221,
	222,
	223,
	224,
	225,
	226,
	227,
	228,
	229,
	230,
	231,
	232,
	233,
	234,
	235,
	236,
	237,
	238,
	239,
	240,
	241,
	242,
	243,
	244,
	245,
	246,
	247,
	248,
	249,
	250,
	251,
	252,
	253,
	254,
	255,
	256,
	257,
	258,
	259,
	260,
	261,
	262,
	263,
	264,
	265,
	266,
	267,
	268,
	269,
	270,
	271,
	272,
	273,
	274,
	275,
	276,
	277,
	278,
	279,
	280,
	281,
	282,
	283,
	284,
	285,
	286,
	287,
	288,
	289,
	290,
	291,
	292,
	293,
	294,
	295,
	296,
	297,
	298,
	299,
	300,
	301,
	302,
	303,
	304,
	305,
	306,
	307,
	308,
	309,
	310,
	311,
	312,
	313,
	314,
	315,
	316,
	317,
	318,
	319,
	320,
	321,
	322,
	323,
	324,
	325,
	326,
	327,
	328,
	329,
	330,
	331,
	332,
	333,
	334,
	335,
	336,
	337,
	338,
	339,
	340,
	341,
	342,
	343,
	444,
	484,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	483,
	0,
	0,
	485,
	0,
	0,
	527,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	472,
	453,
	454,
	0,
	474,
	0,
	475,
	0,
	0,
	0,
	0,
	501,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	478,
	481,
	497,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	494,
	458,
	0,
	0,
	0,
	0,
	495,
	459,
	460,
	0,
	0,
	0,
	0,
	523,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	449,
	0,
	0,
	517,
	0,
	0,
	0,
	0,
	452,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	448,
	0,
	461,
	462,
	0,
	447,
	488,
	0,
	0,
	0,
	0,
	528,
	0,
	0,
	0,
	529,
	0,
	445,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	500,
	0,
	476,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	473,
	0,
	450,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	477,
	480,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	451,
	0,
	0,
	0,
	0,
	0,
	0,
	486,
	0,
	0,
	530,
	0,
	0,
	0,
	0,
	0,
	0,
	479,
	482,
	0,
	524,
	525,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	489,
	0,
	516,
	0,
	0,
	0,
	0,
	518,
	0,
	0,
	487,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	465,
	0,
	0,
	0,
	419,
	420,
	522,
	0,
	526,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	344,
	512,
	521,
	64,
	65,
	66,
	67,
	68,
	69,
	70,
	71,
	72,
	73,
	74,
	75,
	76,
	77,
	78,
	79,
	80,
	81,
	82,
	83,
	84,
	85,
	86,
	87,
	88,
	89,
	90,
	91,
	92,
	93,
	94,
	95,
	96,
	97,
	98,
	99,
	100,
	101,
	102,
	103,
	104,
	105,
	106,
	107,
	108,
	109,
	110,
	111,
	112,
	113,
	114,
	115,
	116,
	117,
	118,
	119,
	120,
	121,
	122,
	123,
	124,
	125,
	126,
	127,
	128,
	129,
	130,
	131,
	132,
	133,
	134,
	135,
	136,
	137,
	138,
	139,
	140,
	141,
	142,
	143,
	144,
	145,
	146,
	147,
	148,
	149,
	150,
	151,
	152,
	153,
	154,
	155,
	156,
	157,
	158,
	159,
	160,
	161,
	162,
	163,
	164,
	165,
	166,
	167,
	168,
	169,
	170,
	171,
	172,
	173,
	174,
	175,
	176,
	177,
	178,
	179,
	180,
	181,
	182,
	183,
	184,
	185,
	186,
	187,
	188,
	189,
	190,
	191,
	192,
	193,
	194,
	195,
	196,
	197,
	198,
	199,
	200,
	201,
	202,
	203,
	204,
	205,
	206,
	207,
	208,
	209,
	210,
	211,
	404,
	213,
	214,
	215,
	216,
	217,
	218,
	219,
	220,
	221,
	222,
	223,
	224,
	225,
	226,
	227,
	228,
	229,
	230,
	231,
	232,
	233,
	234,
	235,
	236,
	237,
	238,
	239,
	240,
	241,
	242,
	243,
	244,
	245,
	246,
	247,
	248,
	249,
	250,
	251,
	252,
	253,
	254,
	255,
	256,
	257,
	258,
	259,
	260,
	261,
	262,
	263,
	264,
	265,
	266,
	267,
	268,
	269,
	270,
	271,
	272,
	273,
	274,
	275,
	276,
	277,
	278,
	279,
	280,
	281,
	282,
	283,
	284,
	285,
	286,
	287,
	288,
	289,
	290,
	291,
	292,
	293,
	294,
	295,
	296,
	297,
	298,
	299,
	300,
	301,
	302,
	303,
	304,
	305,
	306,
	307,
	308,
	309,
	310,
	311,
	312,
	313,
	314,
	315,
	316,
	317,
	318,
	319,
	320,
	321,
	322,
	323,
	324,
	325,
	326,
	327,
	328,
	329,
	330,
	331,
	332,
	333,
	334,
	335,
	336,
	337,
	338,
	339,
	340,
	341,
	342,
	343,
	444,
	484,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	483,
	0,
	0,
	485,
	0,
	0,
	527,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	472,
	453,
	454,
	0,
	474,
	0,
	475,
	0,
	0,
	0,
	0,
	501,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	478,
	481,
	497,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	494,
	0,
	0,
	0,
	0,
	0,
	495,
	0,
	0,
	0,
	0,
	0,
	0,
	523,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	449,
	0,
	0,
	517,
	0,
	0,
	0,
	0,
	452,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	448,
	0,
	0,
	0,
	0,
	447,
	0,
	0,
	0,
	0,
	0,
	528,
	0,
	0,
	0,
	529,
	0,
	445,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	500,
	0,
	476,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	473,
	0,
	450,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	477,
	480,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	451,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	530,
	0,
	0,
	0,
	0,
	0,
	0,
	479,
	482,
	0,
	524,
	525,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	516,
	0,
	0,
	0,
	0,
	518,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	465,
	0,
	0,
	0,
	419,
	420,
	522,
	0,
	526,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	344,
	512,
	521,
	64,
	65,
	66,
	67,
	68,
	69,
	70,
	71,
	72,
	73,
	74,
	75,
	76,
	77,
	78,
	79,
	80,
	81,
	82,
	83,
	84,
	85,
	86,
	87,
	88,
	89,
	90,
	91,
	92,
	93,
	94,
	95,
	96,
	97,
	98,
	99,
	100,
	101,
	102,
	103,
	104,
	105,
	106,
	107,
	108,
	109,
	110,
	111,
	112,
	113,
	114,
	115,
	116,
	117,
	118,
	119,
	120,
	121,
	122,
	123,
	124,
	125,
	126,
	127,
	128,
	129,
	130,
	131,
	132,
	133,
	134,
	135,
	136,
	137,
	138,
	139,
	140,
	141,
	142,
	143,
	144,
	145,
	146,
	147,
	148,
	149,
	150,
	151,
	152,
	153,
	154,
	155,
	156,
	157,
	158,
	159,
	160,
	161,
	162,
	163,
	164,
	165,
	166,
	167,
	168,
	169,
	170,
	171,
	172,
	173,
	174,
	175,
	176,
	177,
	178,
	179,
	180,
	181,
	182,
	183,
	184,
	185,
	186,
	187,
	188,
	189,
	190,
	191,
	192,
	193,
	194,
	195,
	196,
	197,
	198,
	199,
	200,
	201,
	202,
	203,
	204,
	205,
	206,
	207,
	208,
	209,
	210,
	211,
	404,
	213,
	214,
	215,
	216,
	217,
	218,
	219,
	220,
	221,
	222,
	223,
	224,
	225,
	226,
	227,
	228,
	229,
	230,
	231,
	232,
	233,
	234,
	235,
	236,
	237,
	238,
	239,
	240,
	241,
	242,
	243,
	244,
	245,
	246,
	247,
	248,
	249,
	250,
	251,
	252,
	253,
	254,
	255,
	256,
	257,
	258,
	259,
	260,
	261,
	262,
	263,
	264,
	265,
	266,
	267,
	268,
	269,
	270,
	271,
	272,
	273,
	274,
	275,
	276,
	277,
	278,
	279,
	280,
	281,
	282,
	283,
	284,
	285,
	286,
	287,
	288,
	289,
	290,
	291,
	292,
	293,
	294,
	295,
	296,
	297,
	298,
	299,
	300,
	301,
	302,
	303,
	304,
	305,
	306,
	307,
	308,
	309,
	310,
	311,
	312,
	313,
	314,
	315,
	316,
	317,
	318,
	319,
	320,
	321,
	322,
	323,
	324,
	325,
	326,
	327,
	328,
	329,
	330,
	331,
	332,
	333,
	334,
	335,
	336,
	337,
	338,
	339,
	340,
	341,
	342,
	343,
	444,
	484,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	483,
	0,
	0,
	485,
	0,
	0,
	527,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	472,
	453,
	454,
	0,
	474,
	0,
	475,
	0,
	0,
	0,
	0,
	501,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	478,
	481,
	497,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	494,
	0,
	0,
	0,
	0,
	0,
	495,
	0,
	0,
	0,
	0,
	0,
	0,
	523,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	449,
	0,
	0,
	517,
	0,
	0,
	0,
	0,
	452,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	448,
	0,
	0,
	0,
	0,
	447,
	0,
	0,
	0,
	0,
	0,
	528,
	0,
	0,
	0,
	529,
	0,
	445,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	500,
	0,
	476,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	473,
	0,
	450,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	477,
	480,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	451,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	530,
	0,
	0,
	0,
	0,
	0,
	0,
	479,
	482,
	0,
	524,
	525,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	516,
	0,
	0,
	0,
	0,
	518,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	465,
	0,
	0,
	0,
	0,
	0,
	522,
	0,
	526,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	344,
	512,
	521,
	64,
	65,
	66,
	67,
	68,
	69,
	70,
	71,
	72,
	73,
	74,
	75,
	76,
	77,
	78,
	79,
	80,
	81,
	82,
	83,
	84,
	85,
	86,
	87,
	88,
	89,
	90,
	91,
	92,
	93,
	94,
	95,
	96,
	97,
	98,
	99,
	100,
	101,
	102,
	103,
	104,
	105,
	106,
	107,
	108,
	109,
	110,
	111,
	112,
	113,
	114,
	115,
	116,
	117,
	118,
	119,
	120,
	121,
	122,
	123,
	124,
	125,
	126,
	127,
	128,
	129,
	130,
	131,
	132,
	133,
	134,
	135,
	136,
	137,
	138,
	139,
	140,
	141,
	142,
	143,
	144,
	145,
	146,
	147,
	148,
	149,
	150,
	151,
	152,
	153,
	154,
	155,
	156,
	157,
	158,
	159,
	160,
	161,
	162,
	163,
	164,
	165,
	166,
	167,
	168,
	169,
	170,
	171,
	172,
	173,
	174,
	175,
	176,
	177,
	178,
	179,
	180,
	181,
	182,
	183,
	184,
	185,
	186,
	187,
	188,
	189,
	190,
	191,
	192,
	193,
	194,
	195,
	196,
	197,
	198,
	199,
	200,
	201,
	202,
	203,
	204,
	205,
	206,
	207,
	208,
	209,
	210,
	211,
	404,
	213,
	214,
	215,
	216,
	217,
	218,
	219,
	220,
	221,
	222,
	223,
	224,
	225,
	226,
	227,
	228,
	229,
	230,
	231,
	232,
	233,
	234,
	235,
	236,
	237,
	238,
	239,
	240,
	241,
	242,
	243,
	244,
	245,
	246,
	247,
	248,
	249,
	250,
	251,
	252,
	253,
	254,
	255,
	256,
	257,
	258,
	259,
	260,
	261,
	262,
	263,
	264,
	265,
	266,
	267,
	268,
	269,
	270,
	271,
	272,
	273,
	274,
	275,
	276,
	277,
	278,
	279,
	280,
	281,
	282,
	283,
	284,
	285,
	286,
	287,
	288,
	289,
	290,
	291,
	292,
	293,
	294,
	295,
	296,
	297,
	298,
	299,
	300,
	301,
	302,
	303,
	304,
	305,
	306,
	307,
	308,
	309,
	310,
	311,
	312,
	313,
	314,
	315,
	316,
	317,
	318,
	319,
	320,
	321,
	322,
	323,
	324,
	325,
	326,
	327,
	328,
	329,
	330,
	331,
	332,
	333,
	334,
	335,
	336,
	337,
	338,
	339,
	340,
	341,
	342,
	343,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	527,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	824,
	0,
	0,
	0,
	0,
	0,
	0,
	472,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	501,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	497,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	494,
	0,
	0,
	0,
	0,
	0,
	495,
	0,
	0,
	0,
	0,
	0,
	0,
	523,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	517,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	818,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	822,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	488,
	0,
	0,
	0,
	0,
	528,
	0,
	0,
	0,
	529,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	500,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	486,
	0,
	0,
	530,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	524,
	525,
	0,
	0,
	0,
	823,
	0,
	0,
	0,
	0,
	0,
	489,
	0,
	516,
	0,
	0,
	0,
	0,
	518,
	0,
	0,
	487,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	465,
	0,
	0,
	0,
	0,
	0,
	522,
	0,
	526,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	344,
	512,
	521,
	64,
	65,
	66,
	67,
	68,
	69,
	70,
	71,
	72,
	73,
	74,
	75,
	76,
	77,
	78,
	79,
	80,
	81,
	82,
	83,
	84,
	85,
	86,
	87,
	88,
	89,
	90,
	91,
	92,
	93,
	94,
	95,
	96,
	97,
	98,
	99,
	100,
	101,
	102,
	103,
	104,
	105,
	106,
	107,
	108,
	109,
	110,
	111,
	112,
	113,
	114,
	115,
	116,
	117,
	118,
	119,
	120,
	121,
	122,
	123,
	124,
	125,
	126,
	127,
	128,
	129,
	130,
	131,
	132,
	133,
	134,
	135,
	136,
	137,
	138,
	139,
	140,
	141,
	142,
	143,
	144,
	145,
	146,
	147,
	148,
	149,
	150,
	151,
	152,
	153,
	154,
	155,
	156,
	157,
	158,
	159,
	160,
	161,
	162,
	163,
	164,
	165,
	166,
	167,
	168,
	169,
	170,
	171,
	172,
	173,
	174,
	175,
	176,
	177,
	178,
	179,
	180,
	181,
	182,
	183,
	184,
	185,
	186,
	187,
	188,
	189,
	190,
	191,
	192,
	193,
	194,
	195,
	196,
	197,
	198,
	199,
	200,
	201,
	202,
	203,
	204,
	205,
	206,
	207,
	208,
	209,
	210,
	211,
	404,
	213,
	214,
	215,
	216,
	217,
	218,
	219,
	220,
	221,
	222,
	223,
	224,
	225,
	226,
	227,
	228,
	229,
	230,
	231,
	232,
	233,
	234,
	235,
	236,
	237,
	238,
	239,
	240,
	241,
	242,
	243,
	244,
	245,
	246,
	247,
	248,
	249,
	250,
	251,
	252,
	253,
	254,
	255,
	256,
	257,
	258,
	259,
	260,
	261,
	262,
	263,
	264,
	265,
	266,
	267,
	268,
	269,
	270,
	271,
	272,
	273,
	274,
	275,
	276,
	277,
	278,
	279,
	280,
	281,
	282,
	283,
	284,
	285,
	286,
	287,
	288,
	289,
	290,
	291,
	292,
	293,
	294,
	295,
	296,
	297,
	298,
	299,
	300,
	301,
	302,
	303,
	304,
	305,
	306,
	307,
	308,
	309,
	310,
	311,
	312,
	313,
	314,
	315,
	316,
	317,
	318,
	319,
	320,
	321,
	322,
	323,
	324,
	325,
	326,
	327,
	328,
	329,
	330,
	331,
	332,
	333,
	334,
	335,
	336,
	337,
	338,
	339,
	340,
	341,
	342,
	343,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	527,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	472,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	501,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	497,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	494,
	0,
	0,
	0,
	0,
	0,
	495,
	0,
	0,
	0,
	0,
	0,
	0,
	523,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	517,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	926,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	488,
	0,
	0,
	0,
	0,
	528,
	0,
	0,
	0,
	529,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	500,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	486,
	0,
	0,
	530,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	524,
	525,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	489,
	0,
	516,
	0,
	0,
	0,
	0,
	518,
	0,
	0,
	487,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	465,
	0,
	0,
	0,
	0,
	0,
	522,
	0,
	526,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	344,
	512,
	521,
	64,
	65,
	66,
	67,
	68,
	69,
	70,
	71,
	72,
	73,
	74,
	75,
	76,
	77,
	78,
	79,
	80,
	81,
	82,
	83,
	84,
	85,
	86,
	87,
	88,
	89,
	90,
	91,
	92,
	93,
	94,
	95,
	96,
	97,
	98,
	99,
	100,
	101,
	102,
	103,
	104,
	105,
	106,
	107,
	108,
	109,
	110,
	111,
	112,
	113,
	114,
	115,
	116,
	117,
	118,
	119,
	120,
	121,
	122,
	123,
	124,
	125,
	126,
	127,
	128,
	129,
	130,
	131,
	132,
	133,
	134,
	135,
	136,
	137,
	138,
	139,
	140,
	141,
	142,
	143,
	144,
	145,
	146,
	147,
	148,
	149,
	150,
	151,
	152,
	153,
	154,
	155,
	156,
	157,
	158,
	159,
	160,
	161,
	162,
	163,
	164,
	165,
	166,
	167,
	168,
	169,
	170,
	171,
	172,
	173,
	174,
	175,
	176,
	177,
	178,
	179,
	180,
	181,
	182,
	183,
	184,
	185,
	186,
	187,
	188,
	189,
	190,
	191,
	192,
	193,
	194,
	195,
	196,
	197,
	198,
	199,
	200,
	201,
	202,
	203,
	204,
	205,
	206,
	207,
	208,
	209,
	210,
	211,
	404,
	213,
	214,
	215,
	216,
	217,
	218,
	219,
	220,
	221,
	222,
	223,
	224,
	225,
	226,
	227,
	228,
	229,
	230,
	231,
	232,
	233,
	234,
	235,
	236,
	237,
	238,
	239,
	240,
	241,
	242,
	243,
	244,
	245,
	246,
	247,
	248,
	249,
	250,
	251,
	252,
	253,
	254,
	255,
	256,
	257,
	258,
	259,
	260,
	261,
	262,
	263,
	264,
	265,
	266,
	267,
	268,
	269,
	270,
	271,
	272,
	273,
	274,
	275,
	276,
	277,
	278,
	279,
	280,
	281,
	282,
	283,
	284,
	285,
	286,
	287,
	288,
	289,
	290,
	291,
	292,
	293,
	294,
	295,
	296,
	297,
	298,
	299,
	300,
	301,
	302,
	303,
	304,
	305,
	306,
	307,
	308,
	309,
	310,
	311,
	312,
	313,
	314,
	315,
	316,
	317,
	318,
	319,
	320,
	321,
	322,
	323,
	324,
	325,
	326,
	327,
	328,
	329,
	330,
	331,
	332,
	333,
	334,
	335,
	336,
	337,
	338,
	339,
	340,
	341,
	342,
	343,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	527,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	472,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	501,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	497,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	494,
	0,
	0,
	0,
	0,
	0,
	495,
	0,
	0,
	0,
	0,
	0,
	0,
	523,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	517,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	488,
	0,
	0,
	0,
	0,
	528,
	0,
	0,
	0,
	529,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	500,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	486,
	0,
	0,
	530,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	524,
	525,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	489,
	0,
	516,
	0,
	0,
	0,
	0,
	518,
	0,
	0,
	487,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	465,
	0,
	0,
	0,
	0,
	0,
	522,
	0,
	526,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	344,
	512,
	521,
	64,
	65,
	66,
	67,
	68,
	69,
	70,
	71,
	72,
	73,
	74,
	75,
	76,
	77,
	78,
	79,
	80,
	81,
	82,
	83,
	84,
	85,
	86,
	87,
	88,
	89,
	90,
	91,
	92,
	93,
	94,
	95,
	96,
	97,
	98,
	99,
	100,
	101,
	102,
	103,
	104,
	105,
	106,
	107,
	108,
	109,
	110,
	111,
	112,
	113,
	114,
	115,
	116,
	117,
	118,
	119,
	120,
	121,
	122,
	123,
	124,
	125,
	126,
	127,
	128,
	129,
	130,
	131,
	132,
	133,
	134,
	135,
	136,
	137,
	138,
	139,
	140,
	141,
	142,
	143,
	144,
	145,
	146,
	147,
	148,
	149,
	150,
	151,
	152,
	153,
	154,
	155,
	156,
	157,
	158,
	159,
	160,
	161,
	162,
	163,
	164,
	165,
	166,
	167,
	168,
	169,
	170,
	171,
	172,
	173,
	174,
	175,
	176,
	177,
	178,
	179,
	180,
	181,
	182,
	183,
	184,
	185,
	186,
	187,
	188,
	189,
	190,
	191,
	192,
	193,
	194,
	195,
	196,
	197,
	198,
	199,
	200,
	201,
	202,
	203,
	204,
	205,
	206,
	207,
	208,
	209,
	210,
	211,
	212,
	213,
	214,
	215,
	216,
	217,
	218,
	219,
	220,
	221,
	222,
	223,
	224,
	225,
	226,
	227,
	228,
	229,
	230,
	231,
	232,
	233,
	234,
	235,
	236,
	237,
	238,
	239,
	240,
	241,
	242,
	243,
	244,
	245,
	246,
	247,
	248,
	249,
	250,
	251,
	252,
	253,
	254,
	255,
	256,
	257,
	258,
	259,
	260,
	261,
	262,
	263,
	264,
	265,
	266,
	267,
	268,
	269,
	270,
	271,
	272,
	273,
	274,
	275,
	276,
	277,
	278,
	279,
	280,
	281,
	282,
	283,
	284,
	285,
	286,
	287,
	288,
	289,
	290,
	291,
	292,
	293,
	294,
	295,
	296,
	297,
	298,
	299,
	300,
	301,
	302,
	303,
	304,
	305,
	306,
	307,
	308,
	309,
	310,
	311,
	312,
	313,
	314,
	315,
	316,
	317,
	318,
	319,
	320,
	321,
	322,
	323,
	324,
	325,
	326,
	327,
	328,
	329,
	330,
	331,
	332,
	333,
	334,
	335,
	336,
	337,
	338,
	339,
	340,
	341,
	342,
	343,
	64,
	65,
	66,
	67,
	68,
	69,
	70,
	71,
	72,
	73,
	74,
	75,
	76,
	77,
	78,
	79,
	80,
	81,
	82,
	83,
	84,
	85,
	86,
	87,
	88,
	89,
	90,
	91,
	92,
	93,
	94,
	95,
	96,
	97,
	98,
	99,
	100,
	101,
	102,
	103,
	104,
	105,
	106,
	107,
	108,
	109,
	110,
	111,
	112,
	113,
	114,
	115,
	116,
	117,
	118,
	119,
	120,
	121,
	122,
	123,
	124,
	125,
	126,
	127,
	128,
	129,
	130,
	131,
	132,
	133,
	134,
	135,
	136,
	137,
	138,
	139,
	140,
	141,
	142,
	143,
	144,
	145,
	146,
	147,
	148,
	149,
	150,
	151,
	152,
	153,
	154,
	155,
	156,
	157,
	158,
	159,
	160,
	161,
	162,
	163,
	164,
	165,
	166,
	167,
	168,
	169,
	170,
	171,
	172,
	173,
	174,
	175,
	176,
	177,
	178,
	179,
	180,
	181,
	182,
	183,
	184,
	185,
	186,
	187,
	188,
	189,
	190,
	191,
	192,
	193,
	194,
	195,
	196,
	197,
	198,
	199,
	200,
	201,
	202,
	203,
	204,
	205,
	206,
	207,
	208,
	209,
	210,
	211,
	212,
	213,
	214,
	215,
	216,
	217,
	218,
	219,
	220,
	221,
	222,
	223,
	224,
	225,
	226,
	227,
	228,
	229,
	230,
	231,
	232,
	233,
	234,
	235,
	236,
	237,
	238,
	239,
	240,
	241,
	242,
	243,
	244,
	245,
	246,
	247,
	248,
	249,
	250,
	251,
	252,
	253,
	254,
	255,
	256,
	257,
	258,
	259,
	260,
	261,
	262,
	263,
	264,
	265,
	266,
	267,
	268,
	269,
	270,
	271,
	272,
	273,
	274,
	275,
	276,
	277,
	278,
	279,
	280,
	281,
	282,
	283,
	284,
	285,
	286,
	287,
	288,
	289,
	290,
	291,
	292,
	293,
	294,
	295,
	296,
	297,
	298,
	299,
	300,
	301,
	302,
	303,
	304,
	305,
	306,
	307,
	308,
	309,
	310,
	311,
	312,
	313,
	314,
	315,
	316,
	317,
	318,
	319,
	320,
	321,
	322,
	323,
	324,
	325,
	326,
	327,
	328,
	329,
	330,
	331,
	332,
	333,
	334,
	335,
	336,
	337,
	338,
	339,
	340,
	341,
	342,
	343,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	465,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	344,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	861,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	344,
	64,
	65,
	66,
	67,
	68,
	69,
	70,
	71,
	72,
	73,
	74,
	75,
	76,
	77,
	78,
	79,
	80,
	81,
	82,
	83,
	84,
	85,
	86,
	87,
	88,
	89,
	90,
	91,
	92,
	93,
	94,
	95,
	96,
	97,
	98,
	99,
	100,
	101,
	102,
	103,
	104,
	105,
	106,
	107,
	108,
	109,
	110,
	111,
	112,
	113,
	114,
	115,
	116,
	117,
	118,
	119,
	120,
	121,
	122,
	123,
	124,
	125,
	126,
	127,
	128,
	129,
	130,
	131,
	132,
	133,
	134,
	135,
	136,
	137,
	138,
	139,
	140,
	141,
	142,
	143,
	144,
	145,
	146,
	147,
	148,
	149,
	150,
	151,
	152,
	153,
	154,
	155,
	156,
	157,
	158,
	159,
	160,
	161,
	162,
	163,
	164,
	165,
	166,
	167,
	168,
	169,
	170,
	171,
	172,
	173,
	174,
	175,
	176,
	177,
	178,
	179,
	180,
	181,
	182,
	183,
	184,
	185,
	186,
	187,
	188,
	189,
	190,
	191,
	192,
	193,
	194,
	195,
	196,
	197,
	198,
	199,
	200,
	201,
	202,
	203,
	204,
	205,
	206,
	207,
	208,
	209,
	210,
	211,
	212,
	213,
	214,
	215,
	216,
	217,
	218,
	219,
	220,
	221,
	222,
	223,
	224,
	225,
	226,
	227,
	228,
	229,
	230,
	231,
	232,
	233,
	234,
	235,
	236,
	237,
	238,
	239,
	240,
	241,
	242,
	243,
	244,
	245,
	246,
	247,
	248,
	249,
	250,
	251,
	252,
	253,
	254,
	255,
	256,
	257,
	258,
	259,
	260,
	261,
	262,
	263,
	264,
	265,
	266,
	267,
	268,
	269,
	270,
	271,
	272,
	273,
	274,
	275,
	276,
	277,
	278,
	279,
	280,
	281,
	282,
	283,
	284,
	285,
	286,
	287,
	288,
	289,
	290,
	291,
	292,
	293,
	294,
	295,
	296,
	297,
	298,
	299,
	300,
	301,
	302,
	303,
	304,
	305,
	306,
	307,
	308,
	309,
	310,
	311,
	312,
	313,
	314,
	315,
	316,
	317,
	318,
	319,
	320,
	321,
	322,
	323,
	324,
	325,
	326,
	327,
	328,
	329,
	330,
	331,
	332,
	333,
	334,
	335,
	336,
	337,
	338,
	339,
	340,
	341,
	342,
	343,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	887,
	64,
	65,
	66,
	67,
	68,
	69,
	70,
	71,
	72,
	73,
	74,
	75,
	76,
	77,
	78,
	79,
	80,
	81,
	82,
	83,
	84,
	85,
	86,
	87,
	88,
	89,
	90,
	91,
	92,
	93,
	94,
	95,
	96,
	97,
	98,
	99,
	100,
	101,
	102,
	103,
	104,
	105,
	106,
	107,
	108,
	109,
	110,
	111,
	112,
	113,
	114,
	115,
	116,
	117,
	118,
	119,
	120,
	121,
	122,
	123,
	124,
	125,
	126,
	127,
	128,
	129,
	130,
	131,
	132,
	133,
	134,
	135,
	136,
	137,
	138,
	139,
	140,
	141,
	142,
	143,
	144,
	145,
	146,
	147,
	148,
	149,
	150,
	151,
	152,
	153,
	154,
	155,
	156,
	157,
	158,
	159,
	160,
	161,
	162,
	163,
	164,
	165,
	166,
	167,
	168,
	169,
	170,
	171,
	172,
	173,
	174,
	175,
	176,
	177,
	178,
	179,
	180,
	181,
	182,
	183,
	184,
	185,
	186,
	187,
	188,
	189,
	190,
	191,
	192,
	193,
	194,
	195,
	196,
	197,
	198,
	199,
	200,
	201,
	202,
	203,
	204,
	205,
	206,
	207,
	208,
	209,
	210,
	211,
	212,
	213,
	214,
	215,
	216,
	217,
	218,
	219,
	220,
	221,
	222,
	223,
	224,
	225,
	226,
	227,
	228,
	229,
	230,
	231,
	232,
	233,
	234,
	235,
	236,
	237,
	238,
	239,
	240,
	241,
	242,
	243,
	244,
	245,
	246,
	247,
	248,
	249,
	250,
	251,
	252,
	253,
	254,
	255,
	256,
	257,
	258,
	259,
	260,
	261,
	262,
	263,
	264,
	265,
	266,
	267,
	268,
	269,
	270,
	271,
	272,
	273,
	274,
	275,
	276,
	277,
	278,
	279,
	280,
	281,
	282,
	283,
	284,
	285,
	286,
	287,
	288,
	289,
	290,
	291,
	292,
	293,
	294,
	295,
	296,
	297,
	298,
	299,
	300,
	301,
	302,
	303,
	304,
	305,
	306,
	307,
	308,
	309,
	310,
	311,
	312,
	313,
	314,
	315,
	316,
	317,
	318,
	319,
	320,
	321,
	322,
	323,
	324,
	325,
	326,
	327,
	328,
	329,
	330,
	331,
	332,
	333,
	334,
	335,
	336,
	337,
	338,
	339,
	340,
	341,
	342,
	343,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	583,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	344,
	64,
	65,
	66,
	67,
	68,
	69,
	70,
	71,
	72,
	73,
	74,
	75,
	76,
	77,
	78,
	79,
	80,
	81,
	82,
	83,
	84,
	85,
	86,
	87,
	88,
	89,
	90,
	91,
	92,
	93,
	94,
	95,
	96,
	97,
	98,
	99,
	100,
	101,
	102,
	103,
	104,
	105,
	106,
	107,
	108,
	109,
	110,
	111,
	112,
	113,
	114,
	115,
	116,
	117,
	118,
	119,
	120,
	121,
	122,
	123,
	124,
	125,
	126,
	127,
	128,
	129,
	130,
	131,
	132,
	133,
	134,
	135,
	136,
	137,
	138,
	139,
	140,
	141,
	142,
	143,
	144,
	145,
	146,
	147,
	148,
	149,
	150,
	151,
	152,
	153,
	154,
	155,
	156,
	157,
	158,
	159,
	160,
	161,
	162,
	163,
	164,
	165,
	166,
	167,
	168,
	169,
	170,
	171,
	172,
	173,
	174,
	175,
	176,
	177,
	178,
	179,
	180,
	181,
	182,
	183,
	184,
	185,
	186,
	187,
	188,
	189,
	190,
	191,
	192,
	193,
	194,
	195,
	196,
	197,
	198,
	199,
	200,
	201,
	202,
	203,
	204,
	205,
	206,
	207,
	208,
	209,
	210,
	211,
	212,
	213,
	214,
	215,
	216,
	217,
	218,
	219,
	220,
	221,
	222,
	223,
	224,
	225,
	226,
	227,
	228,
	229,
	230,
	231,
	232,
	233,
	234,
	235,
	236,
	237,
	238,
	239,
	240,
	241,
	242,
	243,
	244,
	245,
	246,
	247,
	248,
	249,
	250,
	251,
	252,
	253,
	254,
	255,
	256,
	257,
	258,
	259,
	260,
	261,
	262,
	263,
	264,
	265,
	266,
	267,
	268,
	269,
	270,
	271,
	272,
	273,
	274,
	275,
	276,
	277,
	278,
	279,
	280,
	281,
	282,
	283,
	284,
	285,
	286,
	287,
	288,
	289,
	290,
	291,
	292,
	293,
	294,
	295,
	296,
	297,
	298,
	299,
	300,
	301,
	302,
	303,
	304,
	305,
	306,
	307,
	308,
	309,
	310,
	311,
	312,
	313,
	314,
	315,
	316,
	317,
	318,
	319,
	320,
	321,
	322,
	323,
	324,
	325,
	326,
	327,
	328,
	329,
	330,
	331,
	332,
	333,
	334,
	335,
	336,
	337,
	338,
	339,
	340,
	341,
	342,
	343,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	344,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	344,
]

const yy_pact = [
	-127,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-216,
	-250,
	-1000,
	12222,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-27,
	-53,
	-54,
	214,
	-229,
	-79,
	-80,
	3,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	5296,
	3966,
	12222,
	12222,
	-417,
	-1000,
	-1000,
	-1000,
	-562,
	-1000,
	-1000,
	-1000,
	-562,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-308,
	-308,
	-226,
	-205,
	-1000,
	-101,
	-316,
	144,
	12222,
	12222,
	12222,
	12222,
	12222,
	12222,
	12222,
	-301,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	11851,
	-603,
	-1000,
	-334,
	-1000,
	-549,
	-1000,
	-1000,
	-66,
	-562,
	-566,
	-576,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	6626,
	-1000,
	7956,
	-1000,
	-1000,
	-604,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-496,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	5961,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-527,
	-527,
	-527,
	-527,
	-527,
	-527,
	-527,
	-527,
	-527,
	-527,
	-527,
	-1000,
	-1000,
	-1000,
	-1000,
	-527,
	-527,
	-527,
	-527,
	-230,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-527,
	-1000,
	-527,
	-527,
	-527,
	-527,
	-527,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-527,
	-527,
	-527,
	-527,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-606,
	-1000,
	-1000,
	-527,
	-527,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-527,
	-562,
	-619,
	-623,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	12222,
	-1000,
	-1000,
	-1000,
	-610,
	-612,
	-614,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-555,
	-1000,
	-1000,
	-1000,
	-334,
	-1000,
	-527,
	-1000,
	-1000,
	1971,
	-562,
	-512,
	-527,
	-1000,
	12222,
	12222,
	12222,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-575,
	-1000,
	-205,
	-1000,
	-1000,
	5961,
	-394,
	-1000,
	-1000,
	-1000,
	-316,
	-1000,
	-1000,
	-1000,
	-527,
	31,
	-1000,
	-1000,
	-562,
	211,
	-1000,
	-1000,
	75,
	-1000,
	5961,
	-293,
	-1000,
	10616,
	-1000,
	12222,
	-1000,
	-1000,
	-1000,
	5961,
	7291,
	7291,
	5961,
	12222,
	7291,
	7291,
	-1000,
	9951,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	5961,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-211,
	-398,
	-534,
	7291,
	7291,
	7291,
	7291,
	7291,
	7291,
	7291,
	7291,
	7291,
	7291,
	7291,
	-619,
	-619,
	-619,
	-619,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	6626,
	4631,
	9951,
	-162,
	-473,
	-312,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	3301,
	2636,
	9951,
	9951,
	9951,
	9951,
	9951,
	9951,
	9951,
	8621,
	-534,
	5961,
	5961,
	5961,
	-619,
	-1000,
	-580,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	3966,
	5961,
	-534,
	5961,
	-1000,
	-1000,
	12222,
	-535,
	-1000,
	-525,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-555,
	-1000,
	228,
	-1000,
	-1000,
	-1000,
	-1000,
	-394,
	-1000,
	-1000,
	-1000,
	-1000,
	10896,
	31,
	-1000,
	31,
	-1000,
	-1000,
	-1000,
	-516,
	-1000,
	-1000,
	-1000,
	-1000,
	-102,
	-590,
	61,
	-590,
	-1000,
	12222,
	-1000,
	-1000,
	-1000,
	75,
	-1000,
	-1000,
	-1000,
	-519,
	-1000,
	-227,
	-1000,
	5961,
	-105,
	-1000,
	-262,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	11559,
	-1000,
	-1000,
	-1000,
	-439,
	-1000,
	-66,
	-566,
	-566,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	12222,
	-1000,
	-1000,
	-1000,
	-551,
	-555,
	-549,
	-551,
	-551,
	-551,
	-551,
	-555,
	-549,
	-551,
	-551,
	-551,
	-551,
	-534,
	-1000,
	-1000,
	-534,
	-1000,
	-534,
	-534,
	-1000,
	-1000,
	-70,
	6626,
	-1000,
	-1000,
	-1000,
	-576,
	-1000,
	9951,
	-475,
	9951,
	-1000,
	-313,
	-1000,
	-534,
	-555,
	-1000,
	3301,
	-78,
	-1000,
	-1000,
	-1000,
	-1000,
	-237,
	-576,
	-569,
	-569,
	-534,
	-331,
	-569,
	-569,
	-534,
	-1000,
	9951,
	9286,
	-218,
	-576,
	-1000,
	-1000,
	-1000,
	-1000,
	-555,
	-543,
	-1000,
	-534,
	-1000,
	-1000,
	-1000,
	-1000,
	-619,
	-1000,
	-543,
	-1000,
	-1000,
	-1000,
	-1000,
	-334,
	-534,
	-555,
	-1000,
	5961,
	12222,
	2636,
	5961,
	-1000,
	-1000,
	-1000,
	-330,
	-543,
	-1000,
	-1000,
	-1000,
	-167,
	-1000,
	-1000,
	-527,
	104,
	-1000,
	-1000,
	-590,
	-590,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-590,
	-1000,
	-1000,
	12222,
	10616,
	-255,
	-1000,
	-342,
	-1000,
	-1000,
	-1000,
	-527,
	12222,
	-1000,
	-1000,
	-1000,
	7291,
	-1000,
	-1000,
	-1000,
	-1000,
	7291,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	6626,
	-71,
	-1000,
	9951,
	-1000,
	-576,
	-1000,
	-1000,
	5961,
	-534,
	-167,
	9951,
	-1000,
	-1000,
	-1000,
	7291,
	-1000,
	-1000,
	-1000,
	-1000,
	-576,
	9951,
	-222,
	-576,
	9951,
	5961,
	-1000,
	5961,
	-1000,
	-1000,
	-1000,
	5961,
	-498,
	12222,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	10896,
	-307,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-517,
	-518,
	-527,
	-1000,
	-1000,
	-1000,
	-1000,
	-531,
	-531,
	-527,
	-527,
	-1000,
	-1000,
	-1000,
	-1000,
	-527,
	-1000,
	-368,
	12222,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-555,
	-1000,
	-1000,
	-1000,
	-1000,
	-562,
	-270,
	10616,
	-1000,
	-1000,
	12222,
	-527,
	-534,
	-549,
	-534,
	-549,
	-1000,
	6626,
	-1000,
	-534,
	-534,
	-1000,
	-534,
	-576,
	-295,
	-549,
	-1000,
	9951,
	-1000,
	-534,
	-1000,
	-1000,
	-1000,
	2636,
	-1000,
	-1000,
	-1000,
	-1000,
	-314,
	-619,
	-527,
	-619,
	-527,
	-619,
	-619,
	-1000,
	-467,
	-468,
	-619,
	-1000,
	-619,
	-619,
	-619,
	-1000,
	-534,
	-555,
	12222,
	-1000,
	-1000,
	5961,
	-270,
	-534,
	-555,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	7291,
	201,
	-1000,
	-1000,
	-555,
	-1000,
	-1000,
	-1000,
	-334,
	-1000,
	2636,
	-1000,
	-534,
	-1000,
	-1000,
	-619,
	-534,
	-619,
	-534,
	-534,
	-58,
	-59,
	-534,
	-543,
	-1000,
	-543,
	-534,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-529,
	-549,
	-534,
	-1000,
	-1000,
	2636,
	-534,
	-534,
	-555,
	-1000,
	-534,
	-1000,
	-534,
	-1000,
	-520,
	-1000,
	-1000,
	-520,
	-1000,
	-619,
	-1000,
	-619,
	-1000,
	-1000,
	201,
	-1000,
	-1000,
	-1000,
	2636,
	-1000,
	-1000,
	-1000,
	-1000,
	-534,
	-1000,
	-534,
	-534,
	-543,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	-1000,
	2636,
	-1000,
]

const yy_pgo = [
	0,
	655,
	652,
	649,
	656,
	648,
	647,
	29,
	27,
	645,
	644,
	60,
	642,
	638,
	186,
	25,
	0,
	56,
	26,
	637,
	636,
	635,
	632,
	631,
	630,
	33,
	629,
	628,
	627,
	204,
	626,
	625,
	624,
	623,
	20,
	622,
	621,
	158,
	618,
	615,
	22,
	614,
	613,
	612,
	610,
	39,
	609,
	42,
	608,
	36,
	606,
	34,
	604,
	602,
	601,
	600,
	598,
	97,
	597,
	596,
	594,
	590,
	589,
	38,
	587,
	586,
	585,
	584,
	583,
	21,
	581,
	580,
	578,
	577,
	576,
	575,
	573,
	571,
	570,
	568,
	565,
	557,
	556,
	555,
	554,
	553,
	552,
	237,
	551,
	12,
	35,
	550,
	44,
	549,
	548,
	547,
	3,
	546,
	242,
	545,
	543,
	214,
	539,
	537,
	536,
	535,
	534,
	533,
	241,
	150,
	5,
	32,
	532,
	531,
	529,
	526,
	525,
	524,
	523,
	522,
	518,
	515,
	514,
	512,
	183,
	156,
	511,
	686,
	510,
	506,
	505,
	85,
	504,
	500,
	135,
	499,
	497,
	496,
	495,
	494,
	493,
	492,
	491,
	486,
	935,
	485,
	484,
	483,
	169,
	482,
	481,
	171,
	23,
	480,
	479,
	478,
	472,
	470,
	469,
	110,
	467,
	466,
	465,
	464,
	458,
	457,
	8,
	456,
	443,
	11,
	2,
	435,
	1,
	14,
	10,
	24,
	16,
	28,
	165,
	595,
	95,
	425,
	151,
	152,
	200,
	424,
	423,
	422,
	421,
	420,
	418,
	416,
	415,
	412,
	409,
	408,
	407,
	406,
	405,
	402,
	399,
	670,
	387,
	384,
	383,
	381,
	380,
	379,
	378,
	377,
	143,
	376,
	375,
	374,
	373,
	372,
	371,
	370,
	368,
	367,
	19,
	366,
	37,
	365,
	364,
	362,
	361,
	358,
	357,
	356,
	146,
	142,
	201,
	355,
	349,
	82,
	342,
	353,
	341,
	339,
	9,
	335,
	210,
	334,
	162,
	332,
	331,
	330,
	327,
	326,
	7,
	325,
	324,
	323,
	322,
	31,
	321,
	13,
	320,
	319,
	318,
	317,
	316,
	153,
	314,
	313,
	312,
	311,
	309,
	308,
	306,
	205,
	163,
	304,
	303,
	301,
	300,
	299,
	40,
	295,
	294,
	291,
	52,
	287,
	284,
	283,
	282,
	17,
	281,
	6,
	280,
	278,
	54,
	4,
	65,
	276,
	275,
	273,
	272,
	18,
	270,
	269,
	268,
	265,
	264,
	15,
	263,
	262,
	260,
	259,
	258,
	257,
	255,
	252,
	250,
	249,
	247,
	246,
	245,
	41,
	244,
	30,
	238,
]

const yy_r1 = [
	0,
	1,
	3,
	3,
	6,
	6,
	7,
	7,
	9,
	10,
	10,
	12,
	13,
	14,
	14,
	14,
	18,
	19,
	19,
	20,
	21,
	22,
	22,
	22,
	22,
	22,
	23,
	24,
	26,
	27,
	27,
	28,
	30,
	31,
	32,
	34,
	34,
	33,
	33,
	35,
	35,
	38,
	39,
	41,
	36,
	42,
	44,
	44,
	46,
	46,
	47,
	48,
	48,
	49,
	49,
	51,
	51,
	51,
	51,
	50,
	56,
	52,
	58,
	53,
	53,
	59,
	54,
	54,
	60,
	55,
	55,
	61,
	62,
	62,
	63,
	63,
	64,
	64,
	65,
	66,
	43,
	67,
	68,
	70,
	70,
	71,
	71,
	71,
	72,
	72,
	72,
	72,
	73,
	73,
	73,
	77,
	77,
	80,
	81,
	82,
	83,
	84,
	86,
	86,
	88,
	88,
	90,
	91,
	94,
	93,
	93,
	95,
	97,
	87,
	99,
	99,
	74,
	75,
	75,
	76,
	76,
	79,
	100,
	78,
	102,
	2,
	2,
	2,
	2,
	103,
	103,
	103,
	103,
	104,
	105,
	106,
	107,
	16,
	17,
	108,
	109,
	8,
	110,
	111,
	112,
	113,
	114,
	92,
	115,
	116,
	117,
	117,
	118,
	120,
	121,
	122,
	123,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	119,
	124,
	124,
	126,
	126,
	125,
	125,
	125,
	128,
	57,
	57,
	127,
	127,
	132,
	132,
	132,
	132,
	131,
	131,
	133,
	135,
	136,
	137,
	137,
	134,
	129,
	129,
	129,
	138,
	139,
	140,
	141,
	142,
	143,
	130,
	130,
	130,
	144,
	145,
	29,
	25,
	25,
	148,
	147,
	149,
	149,
	146,
	146,
	150,
	15,
	37,
	151,
	152,
	45,
	153,
	154,
	154,
	155,
	155,
	156,
	157,
	157,
	158,
	160,
	40,
	161,
	161,
	161,
	161,
	162,
	162,
	162,
	162,
	162,
	162,
	162,
	163,
	163,
	167,
	167,
	167,
	167,
	167,
	167,
	167,
	167,
	167,
	167,
	168,
	168,
	168,
	168,
	171,
	166,
	172,
	172,
	169,
	170,
	164,
	165,
	165,
	165,
	165,
	165,
	165,
	165,
	165,
	165,
	174,
	174,
	173,
	175,
	176,
	11,
	11,
	177,
	177,
	177,
	179,
	179,
	179,
	182,
	182,
	182,
	183,
	183,
	184,
	184,
	185,
	185,
	185,
	185,
	185,
	185,
	185,
	185,
	185,
	185,
	185,
	185,
	186,
	198,
	199,
	200,
	187,
	187,
	202,
	202,
	203,
	188,
	189,
	204,
	205,
	190,
	206,
	206,
	206,
	206,
	206,
	206,
	206,
	206,
	206,
	191,
	192,
	193,
	194,
	207,
	208,
	195,
	196,
	197,
	197,
	180,
	201,
	201,
	209,
	210,
	211,
	211,
	212,
	213,
	213,
	213,
	214,
	214,
	214,
	214,
	215,
	215,
	216,
	219,
	219,
	219,
	219,
	219,
	220,
	221,
	221,
	221,
	222,
	217,
	218,
	181,
	223,
	224,
	5,
	5,
	5,
	5,
	5,
	225,
	226,
	226,
	228,
	228,
	227,
	227,
	229,
	229,
	178,
	178,
	230,
	230,
	231,
	231,
	232,
	232,
	232,
	232,
	232,
	232,
	232,
	233,
	233,
	235,
	235,
	236,
	4,
	4,
	238,
	237,
	237,
	237,
	237,
	237,
	237,
	237,
	101,
	101,
	239,
	239,
	242,
	242,
	242,
	244,
	244,
	243,
	96,
	159,
	245,
	246,
	246,
	247,
	240,
	241,
	248,
	250,
	251,
	252,
	252,
	252,
	253,
	253,
	254,
	255,
	256,
	256,
	257,
	258,
	259,
	260,
	261,
	261,
	261,
	263,
	263,
	265,
	266,
	267,
	264,
	264,
	268,
	268,
	98,
	98,
	98,
	98,
	98,
	98,
	98,
	98,
	269,
	273,
	274,
	275,
	275,
	270,
	271,
	272,
	279,
	277,
	280,
	278,
	278,
	281,
	283,
	282,
	284,
	284,
	284,
	285,
	285,
	286,
	286,
	287,
	288,
	288,
	288,
	288,
	288,
	290,
	290,
	289,
	289,
	291,
	291,
	292,
	293,
	294,
	276,
	295,
	295,
	85,
	296,
	296,
	262,
	262,
	262,
	262,
	297,
	298,
	299,
	299,
	249,
	249,
	300,
	301,
	301,
	301,
	304,
	304,
	304,
	304,
	303,
	302,
	306,
	69,
	69,
	305,
	234,
	234,
	234,
	234,
	234,
	89,
	307,
	312,
	313,
	313,
	313,
	313,
	313,
	313,
	308,
	314,
	314,
	315,
	315,
	316,
	316,
	309,
	317,
	318,
	318,
	319,
	310,
	320,
	320,
	321,
	311,
	322,
	322,
]

const yy_r2 = [
	0,
	1,
	1,
	1,
	1,
	3,
	1,
	2,
	1,
	1,
	1,
	2,
	1,
	2,
	3,
	5,
	1,
	3,
	1,
	4,
	1,
	1,
	1,
	1,
	1,
	1,
	3,
	1,
	4,
	1,
	1,
	3,
	4,
	1,
	3,
	1,
	1,
	1,
	3,
	2,
	3,
	1,
	1,
	2,
	1,
	1,
	3,
	4,
	1,
	2,
	1,
	1,
	2,
	1,
	1,
	1,
	1,
	1,
	1,
	3,
	1,
	3,
	1,
	2,
	2,
	1,
	2,
	2,
	1,
	1,
	2,
	4,
	1,
	2,
	1,
	1,
	1,
	3,
	1,
	3,
	4,
	2,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	4,
	1,
	1,
	4,
	1,
	4,
	6,
	1,
	3,
	3,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	3,
	5,
	2,
	1,
	2,
	1,
	2,
	2,
	2,
	2,
	2,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	2,
	1,
	1,
	1,
	2,
	3,
	2,
	1,
	1,
	3,
	1,
	1,
	1,
	2,
	1,
	1,
	1,
	1,
	2,
	2,
	2,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	3,
	1,
	1,
	1,
	1,
	3,
	1,
	3,
	1,
	1,
	1,
	2,
	1,
	1,
	1,
	6,
	4,
	1,
	3,
	6,
	1,
	1,
	1,
	4,
	1,
	1,
	1,
	1,
	1,
	1,
	4,
	1,
	4,
	5,
	5,
	4,
	1,
	1,
	1,
	4,
	6,
	1,
	4,
	6,
	1,
	1,
	1,
	1,
	1,
	4,
	1,
	2,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	4,
	2,
	5,
	1,
	4,
	2,
	5,
	3,
	3,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	3,
	3,
	1,
	3,
	3,
	1,
	2,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	6,
	1,
	1,
	1,
	1,
	4,
	4,
	4,
	4,
	6,
	1,
	1,
	4,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	4,
	4,
	4,
	6,
	1,
	1,
	4,
	4,
	4,
	4,
	1,
	1,
	1,
	3,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	6,
	8,
	8,
	10,
	4,
	4,
	4,
	1,
	2,
	3,
	3,
	4,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	4,
	1,
	4,
	1,
	4,
	1,
	4,
	1,
	3,
	1,
	3,
	1,
	2,
	1,
	2,
	2,
	2,
	2,
	2,
	2,
	1,
	1,
	1,
	1,
	3,
	1,
	1,
	3,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	3,
	1,
	1,
	1,
	1,
	1,
	2,
	1,
	1,
	2,
	1,
	1,
	2,
	3,
	1,
	3,
	1,
	1,
	1,
	3,
	1,
	1,
	3,
	1,
	1,
	2,
	1,
	1,
	1,
	2,
	2,
	1,
	1,
	2,
	2,
	3,
	2,
	3,
	4,
	3,
	1,
	1,
	1,
	1,
	1,
	3,
	3,
	5,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	3,
	1,
	1,
	1,
	4,
	1,
	1,
	3,
	1,
	1,
	1,
	1,
	3,
	5,
	1,
	3,
	1,
	1,
	1,
	1,
	1,
	1,
	1,
	2,
	1,
	3,
	2,
	1,
	3,
	1,
	2,
	2,
	3,
	2,
	1,
	1,
	1,
	4,
	5,
	1,
	1,
	1,
	2,
	1,
	2,
	2,
	3,
	1,
	1,
	1,
	1,
	3,
	3,
	1,
	1,
	1,
	1,
	1,
	1,
	2,
	2,
	1,
	1,
	1,
	1,
	1,
	1,
	2,
	4,
	5,
	1,
	2,
	1,
	1,
	1,
	2,
	2,
	3,
	1,
	2,
	3,
	4,
	1,
	2,
	2,
	3,
]

const yy_chk = [
	-1000,
	-1,
	-2,
	-103,
	-104,
	-105,
	-106,
	-99,
	-80,
	-107,
	-86,
	-70,
	-73,
	-77,
	375,
	432,
	-97,
	625,
	-71,
	-72,
	-74,
	-75,
	-76,
	-78,
	-79,
	-98,
	-23,
	-30,
	-44,
	-26,
	-28,
	-61,
	-66,
	586,
	334,
	556,
	571,
	-269,
	348,
	383,
	288,
	-273,
	-274,
	-275,
	-260,
	-276,
	568,
	630,
	412,
	438,
	-87,
	-29,
	-146,
	-15,
	-150,
	-144,
	-25,
	-145,
	-147,
	-148,
	-117,
	-118,
	-119,
	-120,
	4,
	5,
	6,
	7,
	8,
	9,
	10,
	11,
	12,
	13,
	14,
	15,
	16,
	17,
	18,
	19,
	20,
	21,
	22,
	23,
	24,
	25,
	26,
	27,
	28,
	29,
	30,
	31,
	32,
	33,
	34,
	35,
	36,
	37,
	38,
	39,
	40,
	41,
	42,
	43,
	44,
	45,
	46,
	47,
	48,
	49,
	50,
	51,
	52,
	53,
	54,
	55,
	56,
	57,
	58,
	59,
	60,
	61,
	62,
	63,
	64,
	65,
	66,
	67,
	68,
	69,
	70,
	71,
	72,
	73,
	74,
	75,
	76,
	77,
	78,
	79,
	80,
	81,
	82,
	83,
	84,
	85,
	86,
	87,
	88,
	89,
	90,
	91,
	92,
	93,
	94,
	95,
	96,
	97,
	98,
	99,
	100,
	101,
	102,
	103,
	104,
	105,
	106,
	107,
	108,
	109,
	110,
	111,
	112,
	113,
	114,
	115,
	116,
	117,
	118,
	119,
	120,
	121,
	122,
	123,
	124,
	125,
	126,
	127,
	128,
	129,
	130,
	131,
	132,
	133,
	134,
	135,
	136,
	137,
	138,
	139,
	140,
	141,
	142,
	143,
	144,
	145,
	146,
	147,
	148,
	149,
	150,
	151,
	152,
	153,
	154,
	155,
	156,
	157,
	158,
	159,
	160,
	161,
	162,
	163,
	164,
	165,
	166,
	167,
	168,
	169,
	170,
	171,
	172,
	173,
	174,
	175,
	176,
	177,
	178,
	179,
	180,
	181,
	182,
	183,
	184,
	185,
	186,
	187,
	188,
	189,
	190,
	191,
	192,
	193,
	194,
	195,
	196,
	197,
	198,
	199,
	200,
	201,
	202,
	203,
	204,
	205,
	206,
	207,
	208,
	209,
	210,
	211,
	212,
	213,
	214,
	215,
	216,
	217,
	218,
	219,
	220,
	221,
	222,
	223,
	224,
	225,
	226,
	227,
	228,
	229,
	230,
	231,
	232,
	233,
	234,
	235,
	236,
	237,
	238,
	239,
	240,
	241,
	242,
	243,
	244,
	245,
	246,
	247,
	248,
	249,
	250,
	251,
	252,
	253,
	254,
	255,
	256,
	257,
	258,
	259,
	260,
	261,
	262,
	263,
	264,
	265,
	266,
	267,
	268,
	269,
	270,
	271,
	272,
	273,
	274,
	275,
	276,
	277,
	278,
	279,
	280,
	281,
	282,
	283,
	666,
	256,
	280,
	280,
	-100,
	-102,
	22,
	219,
	-270,
	-271,
	-272,
	508,
	500,
	403,
	219,
	600,
	227,
	219,
	600,
	227,
	227,
	-261,
	-108,
	-263,
	650,
	-264,
	-265,
	-11,
	-266,
	-177,
	-178,
	-267,
	-179,
	-180,
	-181,
	-230,
	-144,
	-182,
	-201,
	-223,
	-231,
	-183,
	-209,
	-210,
	-224,
	-232,
	491,
	-184,
	-131,
	-211,
	-3,
	-233,
	-4,
	-185,
	-109,
	-110,
	-212,
	-5,
	-234,
	-235,
	152,
	-238,
	-237,
	-186,
	-187,
	-188,
	-189,
	-190,
	-191,
	-192,
	-193,
	-194,
	-195,
	-196,
	-197,
	652,
	653,
	-213,
	-225,
	-226,
	-227,
	-228,
	-229,
	-307,
	-308,
	-309,
	-310,
	-311,
	-236,
	-16,
	-239,
	-240,
	-241,
	-12,
	-153,
	-156,
	-160,
	-198,
	-202,
	-203,
	284,
	478,
	-206,
	466,
	461,
	399,
	526,
	585,
	407,
	320,
	321,
	-214,
	-215,
	-216,
	354,
	360,
	361,
	463,
	464,
	-294,
	-317,
	648,
	-126,
	-242,
	-247,
	-19,
	-13,
	-154,
	319,
	524,
	323,
	325,
	497,
	574,
	343,
	602,
	575,
	344,
	603,
	297,
	285,
	300,
	592,
	626,
	467,
	616,
	-291,
	-127,
	-125,
	-243,
	353,
	359,
	-246,
	345,
	-20,
	-15,
	495,
	330,
	-132,
	-133,
	-128,
	-129,
	-130,
	-151,
	-21,
	-134,
	-111,
	-135,
	667,
	-138,
	-139,
	-140,
	618,
	402,
	623,
	-113,
	-22,
	668,
	654,
	366,
	605,
	606,
	656,
	303,
	472,
	476,
	595,
	-295,
	-292,
	-284,
	-177,
	-178,
	-285,
	558,
	-281,
	-282,
	-16,
	-144,
	-87,
	-81,
	-29,
	571,
	-111,
	-111,
	-101,
	-124,
	-242,
	-57,
	-125,
	-127,
	-131,
	-101,
	-271,
	-272,
	-272,
	313,
	-277,
	-244,
	-124,
	-151,
	91,
	-24,
	-25,
	-144,
	-29,
	-45,
	-149,
	-15,
	-25,
	-25,
	-29,
	-45,
	-45,
	-262,
	-8,
	-297,
	651,
	412,
	-268,
	295,
	-37,
	-144,
	664,
	507,
	-109,
	-110,
	289,
	-111,
	-108,
	-112,
	655,
	-116,
	659,
	-232,
	-177,
	-184,
	-4,
	-237,
	-16,
	670,
	671,
	672,
	673,
	674,
	675,
	629,
	-178,
	-11,
	-16,
	-16,
	-16,
	-16,
	-16,
	-16,
	-16,
	-16,
	-16,
	-16,
	-16,
	-16,
	-16,
	-16,
	-16,
	-312,
	-314,
	-318,
	-320,
	-322,
	-313,
	-315,
	458,
	491,
	573,
	439,
	-92,
	-121,
	-114,
	-115,
	-123,
	-122,
	307,
	647,
	660,
	657,
	658,
	662,
	661,
	-14,
	-16,
	-16,
	-16,
	-16,
	-16,
	-16,
	-16,
	-16,
	-16,
	-16,
	665,
	-16,
	-16,
	-16,
	-111,
	-134,
	669,
	-144,
	-141,
	667,
	-142,
	667,
	-143,
	667,
	-8,
	-16,
	-98,
	640,
	-82,
	-83,
	-16,
	-88,
	-90,
	-91,
	-94,
	-95,
	-37,
	-15,
	-144,
	-148,
	-144,
	-127,
	-272,
	-6,
	-7,
	-9,
	-11,
	-278,
	558,
	560,
	-279,
	-280,
	-244,
	-31,
	-32,
	-16,
	-46,
	-47,
	-48,
	-49,
	-50,
	-51,
	586,
	-52,
	-53,
	-54,
	-55,
	118,
	141,
	488,
	145,
	365,
	-111,
	-27,
	21,
	203,
	-62,
	-63,
	-64,
	-51,
	202,
	-263,
	-254,
	-255,
	640,
	419,
	-298,
	-299,
	-300,
	-248,
	-301,
	-249,
	-302,
	-303,
	-29,
	-283,
	-282,
	-16,
	-37,
	-230,
	-182,
	-182,
	-231,
	-144,
	-183,
	-183,
	-210,
	-4,
	408,
	-17,
	649,
	-17,
	-179,
	-204,
	-179,
	-179,
	-179,
	-179,
	-179,
	-207,
	-179,
	-179,
	-179,
	-179,
	-179,
	-173,
	-176,
	-134,
	-175,
	-176,
	-173,
	-175,
	-294,
	-235,
	-294,
	-316,
	596,
	298,
	-319,
	-201,
	307,
	458,
	573,
	609,
	494,
	491,
	-17,
	-18,
	-14,
	-11,
	-16,
	-157,
	-11,
	-159,
	-245,
	494,
	-199,
	-201,
	-201,
	-201,
	-180,
	-201,
	-201,
	-201,
	-219,
	-220,
	412,
	-221,
	-222,
	-201,
	456,
	610,
	312,
	-17,
	-11,
	-155,
	-11,
	-11,
	-134,
	-136,
	-137,
	-134,
	-131,
	-292,
	-286,
	-287,
	-11,
	-17,
	-89,
	-178,
	-84,
	-69,
	-37,
	640,
	-8,
	-92,
	-8,
	-10,
	12,
	64,
	-278,
	-33,
	-34,
	-35,
	-36,
	-37,
	-42,
	-43,
	-67,
	530,
	-47,
	-49,
	643,
	313,
	-59,
	-57,
	141,
	145,
	365,
	-60,
	-57,
	-15,
	-63,
	643,
	-255,
	-89,
	313,
	440,
	-252,
	429,
	-253,
	457,
	555,
	-304,
	-152,
	295,
	-144,
	-45,
	-17,
	-8,
	-17,
	-17,
	-17,
	-17,
	-8,
	-17,
	-17,
	-17,
	-17,
	-17,
	-17,
	-17,
	-17,
	289,
	-294,
	-319,
	609,
	-321,
	-201,
	494,
	-17,
	-8,
	-11,
	295,
	426,
	-17,
	-17,
	-17,
	412,
	-17,
	-17,
	-17,
	-220,
	-201,
	412,
	-222,
	-201,
	412,
	-8,
	-17,
	-8,
	-17,
	-134,
	-17,
	-8,
	-17,
	-8,
	-89,
	-90,
	-93,
	-11,
	-96,
	-159,
	-7,
	505,
	-17,
	-8,
	-38,
	-40,
	-161,
	-162,
	-163,
	-164,
	-165,
	324,
	322,
	635,
	-167,
	-168,
	311,
	366,
	605,
	606,
	496,
	370,
	577,
	434,
	433,
	308,
	406,
	536,
	382,
	-16,
	130,
	-56,
	-57,
	-58,
	-57,
	-65,
	-57,
	-256,
	-257,
	-258,
	-259,
	-240,
	-144,
	-299,
	440,
	510,
	-305,
	-16,
	-152,
	-205,
	-179,
	-208,
	-179,
	-294,
	289,
	-321,
	-18,
	-158,
	-40,
	-200,
	-201,
	-217,
	-179,
	-220,
	412,
	-220,
	-11,
	-11,
	-287,
	-85,
	630,
	-37,
	-34,
	-39,
	-41,
	491,
	-16,
	636,
	-16,
	636,
	-16,
	-16,
	-174,
	643,
	645,
	-16,
	-174,
	-16,
	-16,
	-16,
	528,
	-68,
	-69,
	-8,
	-250,
	-251,
	503,
	-299,
	-306,
	-69,
	-305,
	-17,
	-17,
	-294,
	-17,
	-17,
	-17,
	-17,
	408,
	628,
	-220,
	-17,
	-296,
	-293,
	-288,
	-177,
	-178,
	-96,
	-16,
	494,
	-166,
	-171,
	-134,
	-16,
	-166,
	-16,
	-166,
	-173,
	605,
	605,
	-175,
	-169,
	-134,
	-169,
	-169,
	-17,
	-257,
	-89,
	-250,
	-17,
	-218,
	-179,
	-172,
	30,
	162,
	-8,
	-11,
	-96,
	-289,
	-17,
	-166,
	-17,
	-166,
	-17,
	-17,
	283,
	283,
	-17,
	-17,
	-8,
	-17,
	-8,
	-17,
	-17,
	628,
	-17,
	-293,
	-17,
	-8,
	-17,
	-17,
	-174,
	-174,
	-170,
	-134,
	-170,
	-172,
	-290,
	-289,
	-11,
	-96,
	-17,
	-17,
	-17,
	-17,
	-8,
	-289,
]

const yy_def = [
	0,
	-2,
	1,
	125,
	126,
	127,
	128,
	129,
	130,
	131,
	132,
	133,
	134,
	135,
	0,
	0,
	136,
	0,
	83,
	84,
	92,
	93,
	94,
	95,
	96,
	112,
	85,
	86,
	87,
	88,
	89,
	90,
	91,
	0,
	117,
	119,
	0,
	730,
	0,
	0,
	0,
	738,
	739,
	740,
	741,
	742,
	0,
	0,
	0,
	0,
	0,
	113,
	475,
	482,
	0,
	-2,
	484,
	473,
	0,
	477,
	474,
	150,
	151,
	152,
	157,
	158,
	159,
	160,
	161,
	162,
	163,
	164,
	165,
	166,
	167,
	168,
	169,
	170,
	171,
	172,
	173,
	174,
	175,
	176,
	177,
	178,
	179,
	180,
	181,
	182,
	183,
	184,
	185,
	186,
	187,
	188,
	189,
	190,
	191,
	192,
	193,
	194,
	195,
	196,
	197,
	198,
	199,
	200,
	201,
	202,
	203,
	204,
	205,
	206,
	207,
	208,
	209,
	210,
	211,
	212,
	213,
	214,
	215,
	216,
	217,
	218,
	219,
	220,
	221,
	222,
	223,
	224,
	225,
	226,
	227,
	228,
	229,
	230,
	231,
	232,
	233,
	234,
	235,
	236,
	237,
	238,
	239,
	240,
	241,
	242,
	243,
	244,
	245,
	246,
	247,
	248,
	249,
	250,
	251,
	252,
	253,
	254,
	255,
	256,
	257,
	258,
	259,
	260,
	261,
	262,
	263,
	264,
	265,
	266,
	267,
	268,
	269,
	270,
	271,
	272,
	273,
	274,
	275,
	276,
	277,
	278,
	279,
	280,
	281,
	282,
	283,
	284,
	285,
	286,
	287,
	288,
	289,
	290,
	291,
	292,
	293,
	294,
	295,
	296,
	297,
	298,
	299,
	300,
	301,
	302,
	303,
	304,
	305,
	306,
	307,
	308,
	309,
	310,
	311,
	312,
	313,
	314,
	315,
	316,
	317,
	318,
	319,
	320,
	321,
	322,
	323,
	324,
	325,
	326,
	327,
	328,
	329,
	330,
	331,
	332,
	333,
	334,
	335,
	336,
	337,
	338,
	339,
	340,
	341,
	342,
	343,
	344,
	345,
	346,
	347,
	348,
	349,
	350,
	351,
	352,
	353,
	354,
	355,
	356,
	357,
	358,
	359,
	360,
	361,
	362,
	363,
	364,
	365,
	366,
	367,
	368,
	369,
	370,
	371,
	372,
	373,
	374,
	375,
	376,
	377,
	378,
	379,
	380,
	381,
	382,
	383,
	384,
	385,
	386,
	387,
	388,
	389,
	390,
	391,
	392,
	393,
	394,
	395,
	396,
	397,
	398,
	399,
	400,
	401,
	402,
	403,
	404,
	405,
	406,
	407,
	408,
	409,
	410,
	411,
	412,
	413,
	414,
	415,
	416,
	417,
	418,
	419,
	420,
	421,
	422,
	423,
	424,
	425,
	426,
	427,
	428,
	429,
	430,
	431,
	432,
	433,
	434,
	435,
	436,
	153,
	116,
	118,
	120,
	121,
	123,
	0,
	0,
	731,
	732,
	734,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	718,
	719,
	139,
	721,
	722,
	726,
	0,
	-2,
	550,
	724,
	551,
	552,
	553,
	656,
	-2,
	554,
	609,
	639,
	658,
	557,
	610,
	611,
	640,
	660,
	0,
	560,
	0,
	613,
	641,
	662,
	-2,
	563,
	453,
	454,
	615,
	3,
	669,
	-2,
	305,
	674,
	-2,
	564,
	565,
	566,
	567,
	568,
	569,
	570,
	571,
	572,
	573,
	574,
	575,
	140,
	142,
	616,
	642,
	643,
	644,
	645,
	646,
	806,
	807,
	808,
	809,
	810,
	671,
	0,
	677,
	678,
	679,
	680,
	681,
	682,
	683,
	576,
	580,
	581,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	617,
	618,
	619,
	647,
	648,
	652,
	650,
	654,
	0,
	827,
	137,
	686,
	687,
	700,
	701,
	0,
	490,
	0,
	0,
	0,
	0,
	0,
	590,
	591,
	592,
	593,
	594,
	595,
	596,
	597,
	598,
	0,
	0,
	0,
	0,
	775,
	439,
	440,
	688,
	689,
	690,
	699,
	25,
	18,
	12,
	0,
	0,
	-2,
	448,
	441,
	442,
	443,
	693,
	0,
	449,
	0,
	0,
	444,
	461,
	462,
	463,
	470,
	471,
	472,
	0,
	20,
	460,
	143,
	0,
	0,
	0,
	145,
	21,
	22,
	23,
	24,
	776,
	777,
	773,
	-2,
	755,
	756,
	0,
	758,
	751,
	0,
	-2,
	114,
	0,
	98,
	0,
	0,
	0,
	122,
	684,
	685,
	437,
	438,
	445,
	0,
	124,
	733,
	735,
	737,
	0,
	0,
	747,
	691,
	692,
	0,
	26,
	27,
	-2,
	0,
	46,
	489,
	480,
	0,
	0,
	31,
	79,
	0,
	717,
	0,
	782,
	141,
	0,
	727,
	0,
	729,
	486,
	723,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	144,
	0,
	149,
	661,
	771,
	561,
	562,
	675,
	0,
	663,
	664,
	665,
	666,
	667,
	668,
	0,
	550,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	812,
	820,
	828,
	832,
	836,
	0,
	0,
	0,
	0,
	0,
	0,
	814,
	815,
	816,
	817,
	818,
	819,
	823,
	147,
	154,
	146,
	148,
	156,
	155,
	11,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	450,
	452,
	0,
	487,
	464,
	467,
	465,
	468,
	466,
	469,
	0,
	0,
	0,
	0,
	97,
	99,
	0,
	102,
	104,
	0,
	107,
	108,
	111,
	483,
	485,
	476,
	478,
	446,
	736,
	743,
	4,
	6,
	8,
	744,
	749,
	750,
	0,
	746,
	748,
	32,
	33,
	0,
	47,
	48,
	50,
	51,
	53,
	54,
	0,
	55,
	56,
	57,
	58,
	0,
	0,
	0,
	0,
	69,
	0,
	28,
	29,
	30,
	71,
	72,
	74,
	75,
	76,
	720,
	783,
	784,
	0,
	0,
	786,
	787,
	788,
	789,
	792,
	702,
	793,
	794,
	801,
	800,
	752,
	0,
	728,
	657,
	555,
	556,
	659,
	698,
	558,
	559,
	612,
	614,
	0,
	673,
	138,
	676,
	0,
	0,
	587,
	0,
	0,
	0,
	0,
	0,
	603,
	0,
	0,
	0,
	0,
	0,
	546,
	548,
	0,
	547,
	0,
	0,
	813,
	772,
	0,
	0,
	825,
	826,
	829,
	831,
	824,
	0,
	0,
	0,
	837,
	0,
	13,
	0,
	0,
	16,
	0,
	0,
	496,
	497,
	695,
	696,
	0,
	578,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	627,
	0,
	0,
	0,
	-2,
	633,
	634,
	635,
	17,
	0,
	0,
	493,
	0,
	451,
	455,
	457,
	458,
	0,
	778,
	0,
	759,
	761,
	753,
	115,
	811,
	0,
	101,
	803,
	0,
	0,
	0,
	0,
	7,
	9,
	10,
	0,
	0,
	37,
	35,
	36,
	0,
	44,
	45,
	0,
	0,
	49,
	52,
	0,
	0,
	63,
	65,
	64,
	67,
	70,
	66,
	68,
	481,
	73,
	0,
	785,
	710,
	0,
	0,
	0,
	705,
	706,
	708,
	709,
	795,
	796,
	0,
	488,
	499,
	585,
	0,
	589,
	599,
	600,
	601,
	0,
	605,
	606,
	607,
	608,
	649,
	653,
	651,
	655,
	0,
	0,
	830,
	0,
	833,
	835,
	838,
	14,
	0,
	0,
	0,
	0,
	582,
	583,
	584,
	0,
	624,
	625,
	626,
	628,
	632,
	0,
	0,
	636,
	0,
	0,
	492,
	0,
	19,
	459,
	757,
	0,
	0,
	0,
	103,
	105,
	106,
	109,
	110,
	694,
	5,
	745,
	34,
	0,
	39,
	41,
	500,
	501,
	502,
	503,
	504,
	505,
	507,
	0,
	512,
	513,
	534,
	535,
	536,
	540,
	514,
	517,
	520,
	521,
	522,
	523,
	524,
	526,
	0,
	0,
	81,
	59,
	60,
	61,
	62,
	77,
	78,
	711,
	712,
	714,
	715,
	716,
	697,
	0,
	0,
	707,
	798,
	0,
	797,
	0,
	588,
	0,
	604,
	821,
	0,
	834,
	0,
	0,
	498,
	0,
	579,
	0,
	637,
	629,
	0,
	630,
	0,
	494,
	760,
	100,
	0,
	804,
	38,
	40,
	42,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	538,
	0,
	0,
	0,
	542,
	0,
	0,
	0,
	527,
	0,
	82,
	0,
	790,
	703,
	0,
	0,
	0,
	802,
	799,
	586,
	602,
	822,
	15,
	495,
	577,
	620,
	0,
	0,
	631,
	491,
	779,
	780,
	774,
	-2,
	763,
	764,
	0,
	43,
	0,
	529,
	528,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	532,
	0,
	0,
	80,
	713,
	704,
	791,
	805,
	0,
	638,
	0,
	530,
	531,
	0,
	769,
	770,
	0,
	506,
	0,
	508,
	0,
	511,
	537,
	544,
	545,
	541,
	515,
	0,
	518,
	0,
	525,
	621,
	0,
	622,
	781,
	765,
	0,
	509,
	510,
	539,
	543,
	0,
	533,
	0,
	0,
	0,
	767,
	769,
	770,
	516,
	519,
	623,
	766,
	0,
	768,
]

const yy_tok1 = [
	1,
]

const yy_tok2 = [
	2,
	3,
	4,
	5,
	6,
	7,
	8,
	9,
	10,
	11,
	12,
	13,
	14,
	15,
	16,
	17,
	18,
	19,
	20,
	21,
	22,
	23,
	24,
	25,
	26,
	27,
	28,
	29,
	30,
	31,
	32,
	33,
	34,
	35,
	36,
	37,
	38,
	39,
	40,
	41,
	42,
	43,
	44,
	45,
	46,
	47,
	48,
	49,
	50,
	51,
	52,
	53,
	54,
	55,
	56,
	57,
	58,
	59,
	60,
	61,
	62,
	63,
	64,
	65,
	66,
	67,
	68,
	69,
	70,
	71,
	72,
	73,
	74,
	75,
	76,
	77,
	78,
	79,
	80,
	81,
	82,
	83,
	84,
	85,
	86,
	87,
	88,
	89,
	90,
	91,
	92,
	93,
	94,
	95,
	96,
	97,
	98,
	99,
	100,
	101,
	102,
	103,
	104,
	105,
	106,
	107,
	108,
	109,
	110,
	111,
	112,
	113,
	114,
	115,
	116,
	117,
	118,
	119,
	120,
	121,
	122,
	123,
	124,
	125,
	126,
	127,
	128,
	129,
	130,
	131,
	132,
	133,
	134,
	135,
	136,
	137,
	138,
	139,
	140,
	141,
	142,
	143,
	144,
	145,
	146,
	147,
	148,
	149,
	150,
	151,
	152,
	153,
	154,
	155,
	156,
	157,
	158,
	159,
	160,
	161,
	162,
	163,
	164,
	165,
	166,
	167,
	168,
	169,
	170,
	171,
	172,
	173,
	174,
	175,
	176,
	177,
	178,
	179,
	180,
	181,
	182,
	183,
	184,
	185,
	186,
	187,
	188,
	189,
	190,
	191,
	192,
	193,
	194,
	195,
	196,
	197,
	198,
	199,
	200,
	201,
	202,
	203,
	204,
	205,
	206,
	207,
	208,
	209,
	210,
	211,
	212,
	213,
	214,
	215,
	216,
	217,
	218,
	219,
	220,
	221,
	222,
	223,
	224,
	225,
	226,
	227,
	228,
	229,
	230,
	231,
	232,
	233,
	234,
	235,
	236,
	237,
	238,
	239,
	240,
	241,
	242,
	243,
	244,
	245,
	246,
	247,
	248,
	249,
	250,
	251,
	252,
	253,
	254,
	255,
	256,
	257,
]

const yy_tok3 = [
	57600,
	258,
	57601,
	259,
	57602,
	260,
	57603,
	261,
	57604,
	262,
	57605,
	263,
	57606,
	264,
	57607,
	265,
	57608,
	266,
	57609,
	267,
	57610,
	268,
	57611,
	269,
	57612,
	270,
	57613,
	271,
	57614,
	272,
	57615,
	273,
	57616,
	274,
	57617,
	275,
	57618,
	276,
	57619,
	277,
	57620,
	278,
	57621,
	279,
	57622,
	280,
	57623,
	281,
	57624,
	282,
	57625,
	283,
	57626,
	284,
	57627,
	285,
	57628,
	286,
	57629,
	287,
	57630,
	288,
	57631,
	289,
	57632,
	290,
	57633,
	291,
	57634,
	292,
	57635,
	293,
	57636,
	294,
	57637,
	295,
	57638,
	296,
	57639,
	297,
	57640,
	298,
	57641,
	299,
	57642,
	300,
	57643,
	301,
	57644,
	302,
	57645,
	303,
	57646,
	304,
	57647,
	305,
	57648,
	306,
	57649,
	307,
	57650,
	308,
	57651,
	309,
	57652,
	310,
	57653,
	311,
	57654,
	312,
	57655,
	313,
	57656,
	314,
	57657,
	315,
	57658,
	316,
	57659,
	317,
	57660,
	318,
	57661,
	319,
	57662,
	320,
	57663,
	321,
	57664,
	322,
	57665,
	323,
	57666,
	324,
	57667,
	325,
	57668,
	326,
	57669,
	327,
	57670,
	328,
	57671,
	329,
	57672,
	330,
	57673,
	331,
	57674,
	332,
	57675,
	333,
	57676,
	334,
	57677,
	335,
	57678,
	336,
	57679,
	337,
	57680,
	338,
	57681,
	339,
	57682,
	340,
	57683,
	341,
	57684,
	342,
	57685,
	343,
	57686,
	344,
	57687,
	345,
	57688,
	346,
	57689,
	347,
	57690,
	348,
	57691,
	349,
	57692,
	350,
	57693,
	351,
	57694,
	352,
	57695,
	353,
	57696,
	354,
	57697,
	355,
	57698,
	356,
	57699,
	357,
	57700,
	358,
	57701,
	359,
	57702,
	360,
	57703,
	361,
	57704,
	362,
	57705,
	363,
	57706,
	364,
	57707,
	365,
	57708,
	366,
	57709,
	367,
	57710,
	368,
	57711,
	369,
	57712,
	370,
	57713,
	371,
	57714,
	372,
	57715,
	373,
	57716,
	374,
	57717,
	375,
	57718,
	376,
	57719,
	377,
	57720,
	378,
	57721,
	379,
	57722,
	380,
	57723,
	381,
	57724,
	382,
	57725,
	383,
	57726,
	384,
	57727,
	385,
	57728,
	386,
	57729,
	387,
	57730,
	388,
	57731,
	389,
	57732,
	390,
	57733,
	391,
	57734,
	392,
	57735,
	393,
	57736,
	394,
	57737,
	395,
	57738,
	396,
	57739,
	397,
	57740,
	398,
	57741,
	399,
	57742,
	400,
	57743,
	401,
	57744,
	402,
	57745,
	403,
	57746,
	404,
	57747,
	405,
	57748,
	406,
	57749,
	407,
	57750,
	408,
	57751,
	409,
	57752,
	410,
	57753,
	411,
	57754,
	412,
	57755,
	413,
	57756,
	414,
	57757,
	415,
	57758,
	416,
	57759,
	417,
	57760,
	418,
	57761,
	419,
	57762,
	420,
	57763,
	421,
	57764,
	422,
	57765,
	423,
	57766,
	424,
	57767,
	425,
	57768,
	426,
	57769,
	427,
	57770,
	428,
	57771,
	429,
	57772,
	430,
	57773,
	431,
	57774,
	432,
	57775,
	433,
	57776,
	434,
	57777,
	435,
	57778,
	436,
	57779,
	437,
	57780,
	438,
	57781,
	439,
	57782,
	440,
	57783,
	441,
	57784,
	442,
	57785,
	443,
	57786,
	444,
	57787,
	445,
	57788,
	446,
	57789,
	447,
	57790,
	448,
	57791,
	449,
	57792,
	450,
	57793,
	451,
	57794,
	452,
	57795,
	453,
	57796,
	454,
	57797,
	455,
	57798,
	456,
	57799,
	457,
	57800,
	458,
	57801,
	459,
	57802,
	460,
	57803,
	461,
	57804,
	462,
	57805,
	463,
	57806,
	464,
	57807,
	465,
	57808,
	466,
	57809,
	467,
	57810,
	468,
	57811,
	469,
	57812,
	470,
	57813,
	471,
	57814,
	472,
	57815,
	473,
	57816,
	474,
	57817,
	475,
	57818,
	476,
	57819,
	477,
	57820,
	478,
	57821,
	479,
	57822,
	480,
	57823,
	481,
	57824,
	482,
	57825,
	483,
	57826,
	484,
	57827,
	485,
	57828,
	486,
	57829,
	487,
	57830,
	488,
	57831,
	489,
	57832,
	490,
	57833,
	491,
	57834,
	492,
	57835,
	493,
	57836,
	494,
	57837,
	495,
	57838,
	496,
	57839,
	497,
	57840,
	498,
	57841,
	499,
	57842,
	500,
	57843,
	501,
	57844,
	502,
	57845,
	503,
	57846,
	504,
	57847,
	505,
	57848,
	506,
	57849,
	507,
	57850,
	508,
	57851,
	509,
	57852,
	510,
	57853,
	511,
	57854,
	512,
	57855,
	513,
	57856,
	514,
	57857,
	515,
	57858,
	516,
	57859,
	517,
	57860,
	518,
	57861,
	519,
	57862,
	520,
	57863,
	521,
	57864,
	522,
	57865,
	523,
	57866,
	524,
	57867,
	525,
	57868,
	526,
	57869,
	527,
	57870,
	528,
	57871,
	529,
	57872,
	530,
	57873,
	531,
	57874,
	532,
	57875,
	533,
	57876,
	534,
	57877,
	535,
	57878,
	536,
	57879,
	537,
	57880,
	538,
	57881,
	539,
	57882,
	540,
	57883,
	541,
	57884,
	542,
	57885,
	543,
	57886,
	544,
	57887,
	545,
	57888,
	546,
	57889,
	547,
	57890,
	548,
	57891,
	549,
	57892,
	550,
	57893,
	551,
	57894,
	552,
	57895,
	553,
	57896,
	554,
	57897,
	555,
	57898,
	556,
	57899,
	557,
	57900,
	558,
	57901,
	559,
	57902,
	560,
	57903,
	561,
	57904,
	562,
	57905,
	563,
	57906,
	564,
	57907,
	565,
	57908,
	566,
	57909,
	567,
	57910,
	568,
	57911,
	569,
	57912,
	570,
	57913,
	571,
	57914,
	572,
	57915,
	573,
	57916,
	574,
	57917,
	575,
	57918,
	576,
	57919,
	577,
	57920,
	578,
	57921,
	579,
	57922,
	580,
	57923,
	581,
	57924,
	582,
	57925,
	583,
	57926,
	584,
	57927,
	585,
	57928,
	586,
	57929,
	587,
	57930,
	588,
	57931,
	589,
	57932,
	590,
	57933,
	591,
	57934,
	592,
	57935,
	593,
	57936,
	594,
	57937,
	595,
	57938,
	596,
	57939,
	597,
	57940,
	598,
	57941,
	599,
	57942,
	600,
	57943,
	601,
	57944,
	602,
	57945,
	603,
	57946,
	604,
	57947,
	605,
	57948,
	606,
	57949,
	607,
	57950,
	608,
	57951,
	609,
	57952,
	610,
	57953,
	611,
	57954,
	612,
	57955,
	613,
	57956,
	614,
	57957,
	615,
	57958,
	616,
	57959,
	617,
	57960,
	618,
	57961,
	619,
	57962,
	620,
	57963,
	621,
	57964,
	622,
	57965,
	623,
	57966,
	624,
	57967,
	625,
	57968,
	626,
	57969,
	627,
	57970,
	628,
	57971,
	629,
	57972,
	630,
	57973,
	631,
	57974,
	632,
	57975,
	633,
	57976,
	634,
	57977,
	635,
	57978,
	636,
	57979,
	637,
	57980,
	638,
	57981,
	639,
	57982,
	640,
	57983,
	641,
	57984,
	642,
	57985,
	643,
	57986,
	644,
	57987,
	645,
	57988,
	646,
	57989,
	647,
	57990,
	648,
	57991,
	649,
	57992,
	650,
	57993,
	651,
	57994,
	652,
	57995,
	653,
	57996,
	654,
	57997,
	655,
	57998,
	656,
	57999,
	657,
	58000,
	658,
	58001,
	659,
	58002,
	660,
	58003,
	661,
	58004,
	662,
	58005,
	663,
	58006,
	664,
	58007,
	665,
	58008,
	666,
	58009,
	667,
	58010,
	668,
	58011,
	669,
	58012,
	670,
	58013,
	671,
	58014,
	672,
	58015,
	673,
	58016,
	674,
	58017,
	675,
	0,
]

struct ErrorMessage {
	state int
	token int
	msg   string
}

const yy_error_messages = []ErrorMessage{}

// line yaccpar:1

// parser for yacc output

const yy_debug = 0
const yy_error_verbose = true

interface YYLexer {
mut:
	lex(mut lval YYSymType) int
	error(s string) !
}

interface YYParser {
mut:
	parse(mut YYLexer) !int
	lookahead() int
}

pub struct YYParserImpl {
pub mut:
	lval  YYSymType
	stack [yy_initial_stack_size]YYSymType
	char  int
}

pub fn (mut p YYParserImpl) lookahead() int {
	return p.char
}

pub fn yy_new_parser() YYParser {
	return YYParserImpl{}
}

const yy_flag = -1000

fn yy_tokname(c int) string {
	if c >= 1 && c - 1 < yy_toknames.len {
		if yy_toknames[c - 1] != '' {
			return yy_toknames[c - 1]
		}
	}
	return 'tok-${c}'
}

fn yy_statname(s int) string {
	if s >= 0 && s < yy_statenames.len {
		if yy_statenames[s] != '' {
			return yy_statenames[s]
		}
	}
	return 'state-${s}'
}

const tokstart = 4

fn yy_error_message(state int, look_ahead int) string {
	if !yy_error_verbose {
		return 'syntax error'
	}

	for e in yy_error_messages {
		if e.state == state && e.token == look_ahead {
			return 'syntax error: ' + e.msg
		}
	}

	mut res := 'syntax error: unexpected ' + yy_tokname(look_ahead)

	// To match Bison, suggest at most four expected tokens.
	mut expected := []int{cap: 4}

	// Look for shiftable tokens.
	base := int(yy_pact[state])
	for tok := tokstart; tok - 1 < yy_toknames.len; tok++ {
		n := base + tok
		if n >= 0 && n < yy_last && int(yy_chk[int(yy_act[n])]) == tok {
			if expected.len == expected.cap {
				return res
			}
			expected << tok
		}
	}

	if yy_def[state] == -2 {
		mut i := 0
		for yy_exca[i] != -1 || int(yy_exca[i + 1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yy_exca[i] >= 0; i += 2 {
			tok := int(yy_exca[i])
			if tok < tokstart || yy_exca[i + 1] == 0 {
				continue
			}
			if expected.len == expected.cap {
				return res
			}
			expected << tok
		}

		// If the default action is to accept or reduce, give up.
		if yy_exca[i + 1] != 0 {
			return res
		}
	}

	for i, tok in expected {
		if i == 0 {
			res += ', expecting '
		} else {
			res += ' or '
		}
		res += yy_tokname(tok)
	}
	return res
}

fn yylex1(mut lex YYLexer, mut lval YYSymType) (int, int) {
	mut token := 0
	mut ch := lex.lex(mut lval)
	if ch <= 0 {
		token = int(yy_tok1[0])
		unsafe {
			goto out
		}
	}
	if ch < yy_tok1.len {
		token = int(yy_tok1[ch])
		unsafe {
			goto out
		}
	}
	if ch >= yy_private {
		if ch < yy_private + yy_tok2.len {
			token = int(yy_tok2[ch - yy_private])
			unsafe {
				goto out
			}
		}
	}
	for i := 0; i < yy_tok3.len; i += 2 {
		token = int(yy_tok3[i + 0])
		if token == ch {
			token = int(yy_tok3[i + 1])
			unsafe {
				goto out
			}
		}
	}

	out:
	if token == 0 {
		token = int(yy_tok2[1]) // unknown char
	}
	if yy_debug >= 3 {
		println('lex ${yy_tokname(token)}(${u8(ch)})')
	}
	return ch, token
}

fn yy_parse(mut yylex YYLexer) !int {
	mut parser := yy_new_parser()
	return parser.parse(mut yylex)
}

fn (mut yyrcvr YYParserImpl) parse(mut yylex YYLexer) !int {
	mut yyn := 0
	mut yy_val := YYSymType{}
	mut yy_dollar := []YYSymType{}
	_ = yy_dollar // silence set and not used
	mut yy_s := yyrcvr.stack[..]

	mut n_errs := 0 // number of errors
	mut err_flag := 0 // error recovery flag
	mut yystate := 0
	yyrcvr.char = -1
	mut yytoken := -1 // yyrcvr.char translated into internal numbering
	defer {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}
	mut yyp := -1
	unsafe {
		goto yystack
	}
	ret0:
	return 0

	ret1:
	return 1

	yystack:
	// put a state and value onto the stack
	if yy_debug >= 4 {
		println('char ${yy_tokname(yytoken)} in ${yy_statname(yystate)}')
	}

	yyp++
	if yyp >= yy_s.len {
		mut nyys := []YYSymType{len: yy_s.len * 2}
		gocopy(mut nyys, yy_s)
		yy_s = nyys.clone()
	}
	yy_s[yyp] = yy_val
	yy_s[yyp].yys = yystate

	yynewstate:
	yyn = int(yy_pact[yystate])
	if yyn <= yy_flag {
		unsafe {
			goto yydefault // simple state
		}
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(mut yylex, mut yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yy_last {
		unsafe {
			goto yydefault
		}
	}
	yyn = int(yy_act[yyn])
	if int(yy_chk[yyn]) == yytoken {
		// valid shift
		yyrcvr.char = -1
		yytoken = -1
		yy_val = yyrcvr.lval
		yystate = yyn
		if err_flag > 0 {
			err_flag--
		}
		unsafe {
			goto yystack
		}
	}

	yydefault:
	// default state action
	yyn = int(yy_def[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(mut yylex, mut yyrcvr.lval)
		}

		// look through exception table
		mut xi := 0
		for {
			if yy_exca[xi + 0] == -1 && int(yy_exca[xi + 1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; true; xi += 2 {
			yyn = int(yy_exca[xi + 0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yy_exca[xi + 1])
		if yyn < 0 {
			unsafe {
				goto ret0
			}
		}
	}
	if yyn == 0 {
		// error ... attempt to resume parsing
		match err_flag {
			0 {
				// brand new error
				yylex.error(yy_error_message(yystate, yytoken))!
				n_errs++
				if yy_debug >= 1 {
					print(yy_statname(yystate))
					println(' saw ${yy_tokname(yytoken)}')
				}

				// Note: fallthrough copies the next case:
				err_flag = 3

				// find a state where "error" is a legal shift action
				for yyp >= 0 {
					yyn = int(yy_pact[yy_s[yyp].yys]) + yy_err_code
					if yyn >= 0 && yyn < yy_last {
						yystate = int(yy_act[yyn]) // simulate a shift of "error"
						if int(yy_chk[yystate]) == yy_err_code {
							unsafe {
								goto yystack
							}
						}
					}

					// the current p has no shift on "error", pop stack
					if yy_debug >= 2 {
						println('error recovery pops state ${yy_s[yyp].yys}')
					}
					yyp--
				}
				// there is no state on the stack with an error shift ... abort
				unsafe {
					goto ret1
				}
			}
			1, 2 {
				// incompletely recovered error ... try again
				err_flag = 3

				// find a state where "error" is a legal shift action
				for yyp >= 0 {
					yyn = int(yy_pact[yy_s[yyp].yys]) + yy_err_code
					if yyn >= 0 && yyn < yy_last {
						yystate = int(yy_act[yyn]) // simulate a shift of "error"
						if int(yy_chk[yystate]) == yy_err_code {
							unsafe {
								goto yystack
							}
						}
					}

					// the current p has no shift on "error", pop stack
					if yy_debug >= 2 {
						println('error recovery pops state ${yy_s[yyp].yys}')
					}
					yyp--
				}
				// there is no state on the stack with an error shift ... abort
				unsafe {
					goto ret1
				}
			}
			3 {
				// no shift yet; clobber input char
				if yy_debug >= 2 {
					println('error recovery discards ${yy_tokname(yytoken)}')
				}
				if yytoken == yy_eof_code {
					unsafe {
						goto ret1
					}
				}
				yyrcvr.char = -1
				yytoken = -1
				unsafe {
					goto yynewstate
					// try again in the same state
				}
			}
			else {}
		}
	}

	// reduction by production yyn
	if yy_debug >= 2 {
		println('reduce ${yyn} in:\n\t${yy_statname(yystate)}')
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yy_r2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp + 1 >= yy_s.len {
		mut nyys := []YYSymType{len: yy_s.len * 2}
		gocopy(mut nyys, yy_s)
		yy_s = nyys.clone()
	}
	yy_val = yy_s[yyp + 1]

	// consult goto table to find next state
	yyn = int(yy_r1[yyn])
	yyg := int(yy_pgo[yyn])
	yyj := yyg + yy_s[yyp].yys + 1

	if yyj >= yy_last {
		yystate = int(yy_act[yyg])
	} else {
		yystate = int(yy_act[yyj])
		if int(yy_chk[yystate]) != -yyn {
			yystate = int(yy_act[yyg])
		}
	}
	// dummy call; replaced with literal code
	match yynt {
		1 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:680
			{
				yyrcvr.lval.v = yy_dollar[1].v as Stmt
			}
		}
		2 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:686
			{
				yy_val.v = DatetimePrimary(yy_dollar[1].v as ValueExpressionPrimary)
			}
		}
		3 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:689
			{
				yy_val.v = DatetimePrimary(yy_dollar[1].v as DatetimeValueFunction)
			}
		}
		4 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:696
			{
				yy_val.v = [yy_dollar[1].v as SortSpecification]
			}
		}
		5 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:697
			{
				yy_val.v = append_list(yy_dollar[1].v as []SortSpecification, yy_dollar[3].v as SortSpecification)
			}
		}
		6 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:702
			{
				yy_val.v = SortSpecification{yy_dollar[1].v as ValueExpression, true}
			}
		}
		7 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:703
			{
				yy_val.v = SortSpecification{yy_dollar[1].v as ValueExpression, yy_dollar[2].v as bool}
			}
		}
		8 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:708
			{
				yy_val.v = yy_dollar[1].v as ValueExpression
			}
		}
		9 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:711
			{
				yy_val.v = true
			}
		}
		10 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:712
			{
				yy_val.v = false
			}
		}
		11 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:717
			{
				yy_val.v = RoutineInvocation{(yy_dollar[1].v as Identifier).entity_name, yy_dollar[2].v as []ValueExpression}
			}
		}
		12 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:722
			{
				yy_val.v = new_function_identifier((yy_dollar[1].v as IdentifierChain).identifier)!
			}
		}
		13 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:727
			{
				yy_val.v = []ValueExpression{}
			}
		}
		14 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:728
			{
				yy_val.v = [yy_dollar[2].v as ValueExpression]
			}
		}
		15 {
			yy_dollar = yy_s[yypt - 5..yypt + 1].clone()
			// line vsql/y.y:729
			{
				yy_val.v = append_list(yy_dollar[2].v as []ValueExpression, yy_dollar[4].v as ValueExpression)
			}
		}
		16 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:734
			{
				yy_val.v = yy_dollar[1].v as ValueExpression
			}
		}
		17 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:740
			{
				yy_val.v = AggregateFunction(AggregateFunctionCount{})
			}
		}
		18 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:743
			{
				yy_val.v = yy_dollar[1].v as AggregateFunction
			}
		}
		19 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:746
			{
				yy_val.v = AggregateFunction(RoutineInvocation{yy_dollar[1].v as string, [
					yy_dollar[3].v as ValueExpression,
				]})
			}
		}
		20 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:752
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		21 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:755
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		22 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:756
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		23 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:757
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		24 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:758
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		25 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:759
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		26 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:764
			{
				yy_val.v = Stmt(SchemaDefinition{yy_dollar[3].v as Identifier})
			}
		}
		27 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:769
			{
				yy_val.v = yy_dollar[1].v as Identifier
			}
		}
		28 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:774
			{
				yy_val.v = Stmt(DropSchemaStatement{yy_dollar[3].v as Identifier, yy_dollar[4].v as string})
			}
		}
		29 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:779
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		30 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:780
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		31 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:785
			{
				yy_val.v = Stmt(DropTableStatement{yy_dollar[3].v as Identifier})
			}
		}
		32 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:790
			{
				yy_val.v = Stmt(TableDefinition{yy_dollar[3].v as Identifier, yy_dollar[4].v as []TableElement})
			}
		}
		33 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:795
			{
				yy_val.v = yy_dollar[1].v as []TableElement
			}
		}
		34 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:798
			{
				yy_val.v = yy_dollar[2].v as []TableElement
			}
		}
		35 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:801
			{
				yy_val.v = yy_dollar[1].v as TableElement
			}
		}
		36 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:802
			{
				yy_val.v = yy_dollar[1].v as TableElement
			}
		}
		37 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:805
			{
				yy_val.v = [yy_dollar[1].v as TableElement]
			}
		}
		38 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:806
			{
				yy_val.v = append_list(yy_dollar[1].v as []TableElement, yy_dollar[3].v as TableElement)
			}
		}
		39 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:817
			{
				yy_val.v = TableElement(Column{yy_dollar[1].v as Identifier, yy_dollar[2].v as Type, false})
			}
		}
		40 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:820
			{
				yy_val.v = TableElement(Column{yy_dollar[1].v as Identifier, yy_dollar[2].v as Type, yy_dollar[3].v as bool})
			}
		}
		41 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:825
			{
				yy_val.v = yy_dollar[1].v as Type
			}
		}
		42 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:828
			{
				yy_val.v = yy_dollar[1].v as bool
			}
		}
		43 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:831
			{
				yy_val.v = true
			}
		}
		44 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:840
			{
				yy_val.v = yy_dollar[1].v as TableElement
			}
		}
		45 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:843
			{
				yy_val.v = TableElement(yy_dollar[1].v as UniqueConstraintDefinition)
			}
		}
		46 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:850
			{
				yy_val.v = SequenceGeneratorDefinition{
					name: yy_dollar[3].v as Identifier
				}
			}
		}
		47 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:855
			{
				yy_val.v = SequenceGeneratorDefinition{
					name:    yy_dollar[3].v as Identifier
					options: yy_dollar[4].v as []SequenceGeneratorOption
				}
			}
		}
		48 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:863
			{
				yy_val.v = yy_dollar[1].v as []SequenceGeneratorOption
			}
		}
		49 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:864
			{
				yy_val.v = yy_dollar[1].v as []SequenceGeneratorOption
			}
		}
		50 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:869
			{
				yy_val.v = yy_dollar[1].v as []SequenceGeneratorOption
			}
		}
		51 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:872
			{
				yy_val.v = [yy_dollar[1].v as SequenceGeneratorOption]
			}
		}
		52 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:873
			{
				yy_val.v = append_list(yy_dollar[1].v as []SequenceGeneratorOption, yy_dollar[2].v as SequenceGeneratorOption)
			}
		}
		53 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:879
			{
				yy_val.v = SequenceGeneratorOption(yy_dollar[1].v as SequenceGeneratorStartWithOption)
			}
		}
		54 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:882
			{
				yy_val.v = yy_dollar[1].v as SequenceGeneratorOption
			}
		}
		55 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:885
			{
				yy_val.v = SequenceGeneratorOption(yy_dollar[1].v as SequenceGeneratorIncrementByOption)
			}
		}
		56 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:888
			{
				yy_val.v = SequenceGeneratorOption(yy_dollar[1].v as SequenceGeneratorMaxvalueOption)
			}
		}
		57 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:891
			{
				yy_val.v = SequenceGeneratorOption(yy_dollar[1].v as SequenceGeneratorMinvalueOption)
			}
		}
		58 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:894
			{
				yy_val.v = SequenceGeneratorOption(SequenceGeneratorCycleOption{yy_dollar[1].v as bool})
			}
		}
		59 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:899
			{
				yy_val.v = SequenceGeneratorStartWithOption{
					start_value: yy_dollar[3].v as Value
				}
			}
		}
		60 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:906
			{
				yy_val.v = yy_dollar[1].v as Value
			}
		}
		61 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:909
			{
				yy_val.v = SequenceGeneratorIncrementByOption{
					increment_by: yy_dollar[3].v as Value
				}
			}
		}
		62 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:916
			{
				yy_val.v = yy_dollar[1].v as Value
			}
		}
		63 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:919
			{
				yy_val.v = SequenceGeneratorMaxvalueOption{
					max_value: yy_dollar[2].v as Value
				}
			}
		}
		64 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:924
			{
				yy_val.v = SequenceGeneratorMaxvalueOption{}
			}
		}
		65 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:927
			{
				yy_val.v = yy_dollar[1].v as Value
			}
		}
		66 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:930
			{
				yy_val.v = SequenceGeneratorMinvalueOption{
					min_value: yy_dollar[2].v as Value
				}
			}
		}
		67 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:935
			{
				yy_val.v = SequenceGeneratorMinvalueOption{}
			}
		}
		68 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:938
			{
				yy_val.v = yy_dollar[1].v as Value
			}
		}
		69 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:941
			{
				yy_val.v = true
			}
		}
		70 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:942
			{
				yy_val.v = false
			}
		}
		71 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:947
			{
				yy_val.v = AlterSequenceGeneratorStatement{
					name:    yy_dollar[3].v as Identifier
					options: yy_dollar[4].v as []SequenceGeneratorOption
				}
			}
		}
		72 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:955
			{
				yy_val.v = [yy_dollar[1].v as SequenceGeneratorOption]
			}
		}
		73 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:956
			{
				yy_val.v = append_list(yy_dollar[1].v as []SequenceGeneratorOption, yy_dollar[2].v as SequenceGeneratorOption)
			}
		}
		74 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:962
			{
				yy_val.v = SequenceGeneratorOption(yy_dollar[1].v as SequenceGeneratorRestartOption)
			}
		}
		75 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:965
			{
				yy_val.v = yy_dollar[1].v as SequenceGeneratorOption
			}
		}
		76 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:968
			{
				yy_val.v = SequenceGeneratorRestartOption{}
			}
		}
		77 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:969
			{
				yy_val.v = SequenceGeneratorRestartOption{
					restart_value: yy_dollar[3].v as Value
				}
			}
		}
		78 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:976
			{
				yy_val.v = yy_dollar[1].v as Value
			}
		}
		79 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:981
			{
				yy_val.v = Stmt(DropSequenceGeneratorStatement{yy_dollar[3].v as Identifier})
			}
		}
		80 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:988
			{
				yy_val.v = UniqueConstraintDefinition{yy_dollar[3].v as []Identifier}
			}
		}
		82 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:996
			{
				yy_val.v = yy_dollar[1].v as []Identifier
			}
		}
		83 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1005
			{
				yy_val.v = yy_dollar[1].v as Stmt
			}
		}
		84 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1006
			{
				yy_val.v = yy_dollar[1].v as Stmt
			}
		}
		85 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1009
			{
				yy_val.v = yy_dollar[1].v as Stmt
			}
		}
		86 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1010
			{
				yy_val.v = yy_dollar[1].v as Stmt
			}
		}
		87 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1011
			{
				yy_val.v = Stmt(yy_dollar[1].v as SequenceGeneratorDefinition)
			}
		}
		88 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1014
			{
				yy_val.v = yy_dollar[1].v as Stmt
			}
		}
		89 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1015
			{
				yy_val.v = yy_dollar[1].v as Stmt
			}
		}
		90 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1016
			{
				yy_val.v = Stmt(yy_dollar[1].v as AlterSequenceGeneratorStatement)
			}
		}
		91 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1017
			{
				yy_val.v = yy_dollar[1].v as Stmt
			}
		}
		92 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1020
			{
				yy_val.v = yy_dollar[1].v as Stmt
			}
		}
		93 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1021
			{
				yy_val.v = yy_dollar[1].v as Stmt
			}
		}
		94 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1022
			{
				yy_val.v = yy_dollar[1].v as Stmt
			}
		}
		95 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1025
			{
				yy_val.v = Stmt(yy_dollar[1].v as SetSchemaStatement)
			}
		}
		96 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1026
			{
				yy_val.v = yy_dollar[1].v as Stmt
			}
		}
		97 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:1031
			{
				stmt := yy_dollar[4].v as InsertStatement
				yy_val.v = Stmt(InsertStatement{yy_dollar[3].v as Identifier, stmt.columns, stmt.values})
			}
		}
		98 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1037
			{
				yy_val.v = yy_dollar[1].v as Identifier
			}
		}
		99 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1040
			{
				yy_val.v = yy_dollar[1].v as InsertStatement
			}
		}
		100 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:1044
			{
				yy_val.v = InsertStatement{
					columns: yy_dollar[2].v as []Identifier
					values:  yy_dollar[4].v as []ContextuallyTypedRowValueConstructor
				}
			}
		}
		101 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1052
			{
				yy_val.v = yy_dollar[1].v as []Identifier
			}
		}
		102 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:1057
			{
				yy_val.v = Stmt(UpdateStatementSearched{yy_dollar[2].v as Identifier, yy_dollar[4].v as map[string]UpdateSource, none})
			}
		}
		103 {
			yy_dollar = yy_s[yypt - 6..yypt + 1].clone()
			// line vsql/y.y:1061
			{
				yy_val.v = Stmt(UpdateStatementSearched{yy_dollar[2].v as Identifier, yy_dollar[4].v as map[string]UpdateSource, yy_dollar[6].v as BooleanValueExpression})
			}
		}
		104 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1069
			{
				yy_val.v = yy_dollar[1].v as map[string]UpdateSource
			}
		}
		105 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:1070
			{
				yy_val.v = merge_maps(yy_dollar[1].v as map[string]UpdateSource, yy_dollar[3].v as map[string]UpdateSource)
			}
		}
		106 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:1076
			{
				yy_val.v = {
					(yy_dollar[1].v as Identifier).str(): yy_dollar[3].v as UpdateSource
				}
			}
		}
		107 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1083
			{
				yy_val.v = yy_dollar[1].v as Identifier
			}
		}
		108 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1086
			{
				yy_val.v = yy_dollar[1].v as Identifier
			}
		}
		109 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1089
			{
				yy_val.v = UpdateSource(yy_dollar[1].v as ValueExpression)
			}
		}
		110 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1090
			{
				yy_val.v = UpdateSource(yy_dollar[1].v as NullSpecification)
			}
		}
		111 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1095
			{
				yy_val.v = yy_dollar[1].v as Identifier
			}
		}
		112 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1100
			{
				yy_val.v = Stmt(yy_dollar[1].v as QueryExpression)
			}
		}
		113 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1105
			{
				yy_val.v = yy_dollar[1].v as Identifier
			}
		}
		114 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:1110
			{
				yy_val.v = Stmt(DeleteStatementSearched{yy_dollar[3].v as Identifier, none})
			}
		}
		115 {
			yy_dollar = yy_s[yypt - 5..yypt + 1].clone()
			// line vsql/y.y:1113
			{
				yy_val.v = Stmt(DeleteStatementSearched{yy_dollar[3].v as Identifier, yy_dollar[5].v as BooleanValueExpression})
			}
		}
		116 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:1123
			{
				yy_val.v = Stmt(StartTransactionStatement{})
			}
		}
		117 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1128
			{
				yy_val.v = Stmt(CommitStatement{})
			}
		}
		118 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:1129
			{
				yy_val.v = Stmt(CommitStatement{})
			}
		}
		119 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1134
			{
				yy_val.v = Stmt(RollbackStatement{})
			}
		}
		120 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:1135
			{
				yy_val.v = Stmt(RollbackStatement{})
			}
		}
		121 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:1140
			{
				yy_val.v = Stmt(SetCatalogStatement{yy_dollar[2].v as ValueSpecification})
			}
		}
		122 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:1145
			{
				yy_val.v = yy_dollar[2].v as ValueSpecification
			}
		}
		123 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:1150
			{
				yy_val.v = SetSchemaStatement{yy_dollar[2].v as ValueSpecification}
			}
		}
		124 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:1155
			{
				yy_val.v = yy_dollar[2].v
			}
		}
		125 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1160
			{
				yy_val.v = yy_dollar[1].v as Stmt
			}
		}
		126 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1161
			{
				yy_val.v = yy_dollar[1].v as Stmt
			}
		}
		127 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1162
			{
				yy_val.v = yy_dollar[1].v as Stmt
			}
		}
		128 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1163
			{
				yy_val.v = yy_dollar[1].v as Stmt
			}
		}
		129 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1166
			{
				yy_val.v = yy_dollar[1].v as Stmt
			}
		}
		130 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1167
			{
				yy_val.v = yy_dollar[1].v as Stmt
			}
		}
		131 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1168
			{
				yy_val.v = yy_dollar[1].v as Stmt
			}
		}
		132 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1169
			{
				yy_val.v = yy_dollar[1].v as Stmt
			}
		}
		133 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1172
			{
				yy_val.v = yy_dollar[1].v as Stmt
			}
		}
		134 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1175
			{
				yy_val.v = yy_dollar[1].v as Stmt
			}
		}
		135 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1178
			{
				yy_val.v = yy_dollar[1].v as Stmt
			}
		}
		136 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1181
			{
				yy_val.v = yy_dollar[1].v as Stmt
			}
		}
		139 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1193
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		140 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1195
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		142 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1199
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		144 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1203
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		150 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1219
			{
				yy_val.v = yy_dollar[1].v as IdentifierChain
			}
		}
		151 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1220
			{
				yy_val.v = IdentifierChain{yy_dollar[1].v as string}
			}
		}
		152 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1223
			{
				yy_val.v = yy_dollar[1].v as IdentifierChain
			}
		}
		153 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1226
			{
				yy_val.v = yy_dollar[1].v as IdentifierChain
			}
		}
		437 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1519
			{
				yy_val.v = yy_dollar[1].v as Value
			}
		}
		438 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1520
			{
				yy_val.v = yy_dollar[1].v as Value
			}
		}
		439 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1523
			{
				yy_val.v = yy_dollar[1].v as Value
			}
		}
		440 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1524
			{
				yy_val.v = yy_dollar[1].v as Value
			}
		}
		441 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1527
			{
				yy_val.v = yy_dollar[1].v as Value
			}
		}
		442 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1528
			{
				yy_val.v = yy_dollar[1].v as Value
			}
		}
		443 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1529
			{
				yy_val.v = yy_dollar[1].v as Value
			}
		}
		444 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1532
			{
				yy_val.v = yy_dollar[1].v as Value
			}
		}
		445 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1535
			{
				yy_val.v = yy_dollar[1].v as Value
			}
		}
		446 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:1536
			{
				yy_val.v = numeric_literal(yy_dollar[1].v as string +
					(yy_dollar[2].v as Value).str())!
			}
		}
		447 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1541
			{
				yy_val.v = yy_dollar[1].v as Value
			}
		}
		448 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1542
			{
				yy_val.v = yy_dollar[1].v as Value
			}
		}
		449 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1545
			{
				yy_val.v = numeric_literal(yy_dollar[1].v as string)!
			}
		}
		450 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:1546
			{
				yy_val.v = numeric_literal((yy_dollar[1].v as string) + '.')!
			}
		}
		451 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:1547
			{
				yy_val.v = numeric_literal((yy_dollar[1].v as string) + '.' +
					(yy_dollar[3].v as string))!
			}
		}
		452 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:1550
			{
				yy_val.v = numeric_literal('0.' + (yy_dollar[2].v as string))!
			}
		}
		453 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1553
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		454 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1554
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		455 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:1557
			{
				yy_val.v = new_double_precision_value((yy_dollar[1].v as Value).as_f64()! * math.pow(10,
					(yy_dollar[3].v as Value).as_f64()!))
			}
		}
		456 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1563
			{
				yy_val.v = yy_dollar[1].v as Value
			}
		}
		457 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1566
			{
				yy_val.v = yy_dollar[1].v as Value
			}
		}
		458 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1569
			{
				yy_val.v = new_numeric_value(yy_dollar[1].v as string)
			}
		}
		459 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:1570
			{
				yy_val.v = if yy_dollar[1].v as string == '-' {
					new_numeric_value('-' + (yy_dollar[2].v as string))
				} else {
					new_numeric_value(yy_dollar[2].v as string)
				}
			}
		}
		460 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1579
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		461 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1582
			{
				yy_val.v = yy_dollar[1].v as Value
			}
		}
		462 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1583
			{
				yy_val.v = yy_dollar[1].v as Value
			}
		}
		463 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1584
			{
				yy_val.v = yy_dollar[1].v as Value
			}
		}
		464 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:1587
			{
				yy_val.v = new_date_value((yy_dollar[2].v as Value).string_value())!
			}
		}
		465 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:1590
			{
				yy_val.v = new_time_value((yy_dollar[2].v as Value).string_value())!
			}
		}
		466 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:1593
			{
				yy_val.v = new_timestamp_value((yy_dollar[2].v as Value).string_value())!
			}
		}
		467 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1598
			{
				yy_val.v = yy_dollar[1].v as Value
			}
		}
		468 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1601
			{
				yy_val.v = yy_dollar[1].v as Value
			}
		}
		469 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1604
			{
				yy_val.v = yy_dollar[1].v as Value
			}
		}
		470 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1607
			{
				yy_val.v = new_boolean_value(true)
			}
		}
		471 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1608
			{
				yy_val.v = new_boolean_value(false)
			}
		}
		472 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1609
			{
				yy_val.v = new_unknown_value()
			}
		}
		473 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1614
			{
				yy_val.v = yy_dollar[1].v as IdentifierChain
			}
		}
		474 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1617
			{
				yy_val.v = yy_dollar[1].v as IdentifierChain
			}
		}
		475 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1620
			{
				yy_val.v = new_table_identifier((yy_dollar[1].v as IdentifierChain).identifier)!
			}
		}
		476 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:1625
			{
				yy_val.v = new_schema_identifier((yy_dollar[1].v as IdentifierChain).str() + '.' +
					(yy_dollar[3].v as Identifier).str())!
			}
		}
		477 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1629
			{
				yy_val.v = yy_dollar[1].v as Identifier
			}
		}
		478 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1632
			{
				yy_val.v = new_schema_identifier((yy_dollar[1].v as IdentifierChain).identifier)!
			}
		}
		479 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1637
			{
				yy_val.v = yy_dollar[1].v as IdentifierChain
			}
		}
		480 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1640
			{
				yy_val.v = yy_dollar[1].v as IdentifierChain
			}
		}
		481 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:1641
			{
				yy_val.v = IdentifierChain{(yy_dollar[1].v as Identifier).schema_name + '.' +
					(yy_dollar[3].v as IdentifierChain).str()}
			}
		}
		482 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1647
			{
				yy_val.v = yy_dollar[1].v as IdentifierChain
			}
		}
		483 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:1648
			{
				yy_val.v = IdentifierChain{(yy_dollar[1].v as Identifier).str() + '.' +
					(yy_dollar[3].v as IdentifierChain).str()}
			}
		}
		484 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1654
			{
				yy_val.v = yy_dollar[1].v as Identifier
			}
		}
		485 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1657
			{
				yy_val.v = yy_dollar[1].v as IdentifierChain
			}
		}
		486 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1660
			{
				yy_val.v = new_column_identifier((yy_dollar[1].v as IdentifierChain).identifier)!
			}
		}
		487 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:1665
			{
				yy_val.v = GeneralValueSpecification(HostParameterName{(yy_dollar[2].v as IdentifierChain).identifier})
			}
		}
		488 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1672
			{
				yy_val.v = new_column_identifier((yy_dollar[1].v as IdentifierChain).identifier)!
			}
		}
		489 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1677
			{
				yy_val.v = new_table_identifier((yy_dollar[1].v as IdentifierChain).identifier)!
			}
		}
		490 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1684
			{
				yy_val.v = yy_dollar[1].v as CaseExpression
			}
		}
		491 {
			yy_dollar = yy_s[yypt - 6..yypt + 1].clone()
			// line vsql/y.y:1687
			{
				yy_val.v = CaseExpression(CaseExpressionNullIf{yy_dollar[3].v as ValueExpression, yy_dollar[5].v as ValueExpression})
			}
		}
		492 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:1693
			{
				yy_val.v = CaseExpression(CaseExpressionCoalesce{yy_dollar[3].v as []ValueExpression})
			}
		}
		493 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1700
			{
				yy_val.v = [yy_dollar[1].v as ValueExpression]
			}
		}
		494 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:1701
			{
				yy_val.v = append_list(yy_dollar[1].v as []ValueExpression, yy_dollar[3].v as ValueExpression)
			}
		}
		495 {
			yy_dollar = yy_s[yypt - 6..yypt + 1].clone()
			// line vsql/y.y:1708
			{
				yy_val.v = CastSpecification{yy_dollar[3].v as CastOperand, yy_dollar[5].v as Type}
			}
		}
		496 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1713
			{
				yy_val.v = CastOperand(yy_dollar[1].v as ValueExpression)
			}
		}
		497 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1714
			{
				yy_val.v = CastOperand(yy_dollar[1].v as NullSpecification)
			}
		}
		498 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1719
			{
				yy_val.v = yy_dollar[1].v as Type
			}
		}
		499 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:1724
			{
				yy_val.v = NextValueExpression{
					name: yy_dollar[4].v as Identifier
				}
			}
		}
		500 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1733
			{
				yy_val.v = yy_dollar[1].v as Type
			}
		}
		501 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1736
			{
				yy_val.v = yy_dollar[1].v as Type
			}
		}
		502 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1737
			{
				yy_val.v = yy_dollar[1].v as Type
			}
		}
		503 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1738
			{
				yy_val.v = yy_dollar[1].v as Type
			}
		}
		504 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1739
			{
				yy_val.v = yy_dollar[1].v as Type
			}
		}
		505 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1742
			{
				yy_val.v = new_type('CHARACTER', 1, 0)
			}
		}
		506 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:1743
			{
				yy_val.v = new_type('CHARACTER', (yy_dollar[3].v as string).int(), 0)
			}
		}
		507 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1746
			{
				yy_val.v = new_type('CHARACTER', 1, 0)
			}
		}
		508 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:1747
			{
				yy_val.v = new_type('CHARACTER', (yy_dollar[3].v as string).int(), 0)
			}
		}
		509 {
			yy_dollar = yy_s[yypt - 5..yypt + 1].clone()
			// line vsql/y.y:1750
			{
				yy_val.v = new_type('CHARACTER VARYING', (yy_dollar[4].v as string).int(),
					0)
			}
		}
		510 {
			yy_dollar = yy_s[yypt - 5..yypt + 1].clone()
			// line vsql/y.y:1753
			{
				yy_val.v = new_type('CHARACTER VARYING', (yy_dollar[4].v as string).int(),
					0)
			}
		}
		511 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:1756
			{
				yy_val.v = new_type('CHARACTER VARYING', (yy_dollar[3].v as string).int(),
					0)
			}
		}
		512 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1761
			{
				yy_val.v = yy_dollar[1].v as Type
			}
		}
		513 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1762
			{
				yy_val.v = yy_dollar[1].v as Type
			}
		}
		514 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1765
			{
				yy_val.v = new_type('NUMERIC', 0, 0)
			}
		}
		515 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:1766
			{
				yy_val.v = new_type('NUMERIC', (yy_dollar[3].v as string).int(), 0)
			}
		}
		516 {
			yy_dollar = yy_s[yypt - 6..yypt + 1].clone()
			// line vsql/y.y:1769
			{
				yy_val.v = new_type('NUMERIC', (yy_dollar[3].v as string).int(), (yy_dollar[5].v as string).i16())
			}
		}
		517 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1772
			{
				yy_val.v = new_type('DECIMAL', 0, 0)
			}
		}
		518 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:1773
			{
				yy_val.v = new_type('DECIMAL', (yy_dollar[3].v as string).int(), 0)
			}
		}
		519 {
			yy_dollar = yy_s[yypt - 6..yypt + 1].clone()
			// line vsql/y.y:1776
			{
				yy_val.v = new_type('DECIMAL', (yy_dollar[3].v as string).int(), (yy_dollar[5].v as string).i16())
			}
		}
		520 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1779
			{
				yy_val.v = new_type('SMALLINT', 0, 0)
			}
		}
		521 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1780
			{
				yy_val.v = new_type('INTEGER', 0, 0)
			}
		}
		522 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1781
			{
				yy_val.v = new_type('INTEGER', 0, 0)
			}
		}
		523 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1782
			{
				yy_val.v = new_type('BIGINT', 0, 0)
			}
		}
		524 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1785
			{
				yy_val.v = new_type('FLOAT', 0, 0)
			}
		}
		525 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:1786
			{
				yy_val.v = new_type('FLOAT', (yy_dollar[3].v as string).int(), 0)
			}
		}
		526 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1789
			{
				yy_val.v = new_type('REAL', 0, 0)
			}
		}
		527 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:1790
			{
				yy_val.v = new_type('DOUBLE PRECISION', 0, 0)
			}
		}
		528 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1793
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		529 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1796
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		530 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1799
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		531 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1800
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		532 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1803
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		533 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1806
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		534 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1809
			{
				yy_val.v = new_type('BOOLEAN', 0, 0)
			}
		}
		535 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1812
			{
				yy_val.v = new_type('DATE', 0, 0)
			}
		}
		536 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1813
			{
				yy_val.v = parse_time_prec_tz_type('0', false)!
			}
		}
		537 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:1814
			{
				yy_val.v = parse_time_prec_tz_type(yy_dollar[3].v as string, false)!
			}
		}
		538 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:1817
			{
				yy_val.v = parse_time_prec_tz_type('0', yy_dollar[2].v as bool)!
			}
		}
		539 {
			yy_dollar = yy_s[yypt - 5..yypt + 1].clone()
			// line vsql/y.y:1820
			{
				yy_val.v = parse_time_prec_tz_type(yy_dollar[3].v as string, yy_dollar[5].v as bool)!
			}
		}
		540 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1823
			{
				yy_val.v = parse_timestamp_prec_tz_type('0', false)!
			}
		}
		541 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:1824
			{
				yy_val.v = parse_timestamp_prec_tz_type(yy_dollar[3].v as string, false)!
			}
		}
		542 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:1827
			{
				// ISO/IEC 9075-2:2016(E), 6.1, 36) If <timestamp precision> is not
				// specified, then 6 is implicit.
				yy_val.v = parse_timestamp_prec_tz_type('6', yy_dollar[2].v as bool)!
			}
		}
		543 {
			yy_dollar = yy_s[yypt - 5..yypt + 1].clone()
			// line vsql/y.y:1833
			{
				yy_val.v = parse_timestamp_prec_tz_type(yy_dollar[3].v as string, yy_dollar[5].v as bool)!
			}
		}
		544 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:1838
			{
				yy_val.v = true
			}
		}
		545 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:1839
			{
				yy_val.v = false
			}
		}
		546 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1842
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		547 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1845
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		548 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1848
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		549 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1853
			{
				yy_val.v = ValueExpression(yy_dollar[1].v as CommonValueExpression)
			}
		}
		550 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1856
			{
				yy_val.v = ValueExpression(yy_dollar[1].v as BooleanValueExpression)
			}
		}
		551 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1861
			{
				yy_val.v = CommonValueExpression(yy_dollar[1].v as NumericValueExpression)
			}
		}
		552 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1864
			{
				yy_val.v = CommonValueExpression(yy_dollar[1].v as CharacterValueExpression)
			}
		}
		553 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1867
			{
				yy_val.v = CommonValueExpression(yy_dollar[1].v as DatetimePrimary)
			}
		}
		554 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1874
			{
				yy_val.v = NumericValueExpression{
					term: yy_dollar[1].v as Term
				}
			}
		}
		555 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:1875
			{
				n := yy_dollar[1].v as NumericValueExpression
				yy_val.v = NumericValueExpression{&n, '+', yy_dollar[3].v as Term}
			}
		}
		556 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:1879
			{
				n := yy_dollar[1].v as NumericValueExpression
				yy_val.v = NumericValueExpression{&n, '-', yy_dollar[3].v as Term}
			}
		}
		557 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1885
			{
				yy_val.v = Term{
					factor: yy_dollar[1].v as NumericPrimary
				}
			}
		}
		558 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:1886
			{
				t := yy_dollar[1].v as Term
				yy_val.v = Term{&t, '*', yy_dollar[3].v as NumericPrimary}
			}
		}
		559 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:1890
			{
				t := yy_dollar[1].v as Term
				yy_val.v = Term{&t, '/', yy_dollar[3].v as NumericPrimary}
			}
		}
		560 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1896
			{
				yy_val.v = yy_dollar[1].v as NumericPrimary
			}
		}
		561 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:1897
			{
				yy_val.v = parse_factor_2(yy_dollar[1].v as string, yy_dollar[2].v as NumericPrimary)!
			}
		}
		562 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1902
			{
				yy_val.v = NumericPrimary(yy_dollar[1].v as ValueExpressionPrimary)
			}
		}
		563 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1905
			{
				yy_val.v = NumericPrimary(yy_dollar[1].v as RoutineInvocation)
			}
		}
		564 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1910
			{
				yy_val.v = yy_dollar[1].v as RoutineInvocation
			}
		}
		565 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1911
			{
				yy_val.v = yy_dollar[1].v as RoutineInvocation
			}
		}
		566 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1912
			{
				yy_val.v = yy_dollar[1].v as RoutineInvocation
			}
		}
		567 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1913
			{
				yy_val.v = yy_dollar[1].v as RoutineInvocation
			}
		}
		568 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1914
			{
				yy_val.v = yy_dollar[1].v as RoutineInvocation
			}
		}
		569 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1915
			{
				yy_val.v = yy_dollar[1].v as RoutineInvocation
			}
		}
		570 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1916
			{
				yy_val.v = yy_dollar[1].v as RoutineInvocation
			}
		}
		571 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1917
			{
				yy_val.v = yy_dollar[1].v as RoutineInvocation
			}
		}
		572 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1918
			{
				yy_val.v = yy_dollar[1].v as RoutineInvocation
			}
		}
		573 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1919
			{
				yy_val.v = yy_dollar[1].v as RoutineInvocation
			}
		}
		574 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1920
			{
				yy_val.v = yy_dollar[1].v as RoutineInvocation
			}
		}
		575 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1921
			{
				yy_val.v = yy_dollar[1].v as RoutineInvocation
			}
		}
		576 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1924
			{
				yy_val.v = yy_dollar[1].v as RoutineInvocation
			}
		}
		577 {
			yy_dollar = yy_s[yypt - 6..yypt + 1].clone()
			// line vsql/y.y:1928
			{
				yy_val.v = RoutineInvocation{'POSITION', [
					ValueExpression(CommonValueExpression(yy_dollar[3].v as CharacterValueExpression)),
					ValueExpression(CommonValueExpression(yy_dollar[5].v as CharacterValueExpression)),
				]}
			}
		}
		578 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1936
			{
				yy_val.v = yy_dollar[1].v as CharacterValueExpression
			}
		}
		579 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1939
			{
				yy_val.v = yy_dollar[1].v as CharacterValueExpression
			}
		}
		580 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1942
			{
				yy_val.v = yy_dollar[1].v as RoutineInvocation
			}
		}
		581 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1943
			{
				yy_val.v = yy_dollar[1].v as RoutineInvocation
			}
		}
		582 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:1946
			{
				yy_val.v = RoutineInvocation{'CHAR_LENGTH', [
					ValueExpression(CommonValueExpression(yy_dollar[3].v as CharacterValueExpression)),
				]}
			}
		}
		583 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:1951
			{
				yy_val.v = RoutineInvocation{'CHAR_LENGTH', [
					ValueExpression(CommonValueExpression(yy_dollar[3].v as CharacterValueExpression)),
				]}
			}
		}
		584 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:1958
			{
				yy_val.v = RoutineInvocation{'OCTET_LENGTH', [
					ValueExpression(CommonValueExpression(yy_dollar[3].v as CharacterValueExpression)),
				]}
			}
		}
		585 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:1965
			{
				yy_val.v = RoutineInvocation{'ABS', [
					ValueExpression(CommonValueExpression(yy_dollar[3].v as NumericValueExpression)),
				]}
			}
		}
		586 {
			yy_dollar = yy_s[yypt - 6..yypt + 1].clone()
			// line vsql/y.y:1973
			{
				yy_val.v = RoutineInvocation{'MOD', [
					ValueExpression(CommonValueExpression(yy_dollar[3].v as NumericValueExpression)),
					ValueExpression(CommonValueExpression(yy_dollar[5].v as NumericValueExpression)),
				]}
			}
		}
		587 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1981
			{
				yy_val.v = yy_dollar[1].v as NumericValueExpression
			}
		}
		588 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1984
			{
				yy_val.v = yy_dollar[1].v as NumericValueExpression
			}
		}
		589 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:1987
			{
				yy_val.v = RoutineInvocation{yy_dollar[1].v as string, [
					ValueExpression(CommonValueExpression(yy_dollar[3].v as NumericValueExpression)),
				]}
			}
		}
		590 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1994
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		591 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1995
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		592 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1996
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		593 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1997
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		594 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1998
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		595 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:1999
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		596 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2000
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		597 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2001
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		598 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2002
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		599 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:2005
			{
				yy_val.v = RoutineInvocation{'LOG10', [
					ValueExpression(CommonValueExpression(yy_dollar[3].v as NumericValueExpression)),
				]}
			}
		}
		600 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:2012
			{
				yy_val.v = RoutineInvocation{'LN', [
					ValueExpression(CommonValueExpression(yy_dollar[3].v as NumericValueExpression)),
				]}
			}
		}
		601 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:2019
			{
				yy_val.v = RoutineInvocation{'EXP', [
					ValueExpression(CommonValueExpression(yy_dollar[3].v as NumericValueExpression)),
				]}
			}
		}
		602 {
			yy_dollar = yy_s[yypt - 6..yypt + 1].clone()
			// line vsql/y.y:2027
			{
				yy_val.v = RoutineInvocation{'POWER', [
					ValueExpression(CommonValueExpression(yy_dollar[3].v as NumericValueExpression)),
					ValueExpression(CommonValueExpression(yy_dollar[5].v as NumericValueExpression)),
				]}
			}
		}
		603 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2035
			{
				yy_val.v = yy_dollar[1].v as NumericValueExpression
			}
		}
		604 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2038
			{
				yy_val.v = yy_dollar[1].v as NumericValueExpression
			}
		}
		605 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:2041
			{
				yy_val.v = RoutineInvocation{'SQRT', [
					ValueExpression(CommonValueExpression(yy_dollar[3].v as NumericValueExpression)),
				]}
			}
		}
		606 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:2048
			{
				yy_val.v = RoutineInvocation{'FLOOR', [
					ValueExpression(CommonValueExpression(yy_dollar[3].v as NumericValueExpression)),
				]}
			}
		}
		607 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:2055
			{
				yy_val.v = RoutineInvocation{'CEILING', [
					ValueExpression(CommonValueExpression(yy_dollar[3].v as NumericValueExpression)),
				]}
			}
		}
		608 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:2060
			{
				yy_val.v = RoutineInvocation{'CEILING', [
					ValueExpression(CommonValueExpression(yy_dollar[3].v as NumericValueExpression)),
				]}
			}
		}
		609 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2069
			{
				yy_val.v = yy_dollar[1].v as CharacterValueExpression
			}
		}
		610 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2072
			{
				yy_val.v = CharacterValueExpression(yy_dollar[1].v as Concatenation)
			}
		}
		611 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2073
			{
				yy_val.v = CharacterValueExpression(yy_dollar[1].v as CharacterPrimary)
			}
		}
		612 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:2076
			{
				yy_val.v = Concatenation{yy_dollar[1].v as CharacterValueExpression, yy_dollar[3].v as CharacterPrimary}
			}
		}
		613 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2084
			{
				yy_val.v = yy_dollar[1].v as CharacterPrimary
			}
		}
		614 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2087
			{
				yy_val.v = CharacterPrimary(yy_dollar[1].v as ValueExpressionPrimary)
			}
		}
		615 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2090
			{
				yy_val.v = CharacterPrimary(yy_dollar[1].v as CharacterValueFunction)
			}
		}
		616 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2097
			{
				yy_val.v = yy_dollar[1].v as CharacterValueFunction
			}
		}
		617 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2100
			{
				yy_val.v = CharacterValueFunction(yy_dollar[1].v as CharacterSubstringFunction)
			}
		}
		618 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2103
			{
				yy_val.v = CharacterValueFunction(yy_dollar[1].v as RoutineInvocation)
			}
		}
		619 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2104
			{
				yy_val.v = CharacterValueFunction(yy_dollar[1].v as TrimFunction)
			}
		}
		620 {
			yy_dollar = yy_s[yypt - 6..yypt + 1].clone()
			// line vsql/y.y:2108
			{
				yy_val.v = CharacterSubstringFunction{yy_dollar[3].v as CharacterValueExpression, yy_dollar[5].v as NumericValueExpression, none, 'CHARACTERS'}
			}
		}
		621 {
			yy_dollar = yy_s[yypt - 8..yypt + 1].clone()
			// line vsql/y.y:2113
			{
				yy_val.v = CharacterSubstringFunction{yy_dollar[3].v as CharacterValueExpression, yy_dollar[5].v as NumericValueExpression, yy_dollar[7].v as NumericValueExpression, 'CHARACTERS'}
			}
		}
		622 {
			yy_dollar = yy_s[yypt - 8..yypt + 1].clone()
			// line vsql/y.y:2119
			{
				yy_val.v = CharacterSubstringFunction{yy_dollar[3].v as CharacterValueExpression, yy_dollar[5].v as NumericValueExpression, none, yy_dollar[7].v as string}
			}
		}
		623 {
			yy_dollar = yy_s[yypt - 10..yypt + 1].clone()
			// line vsql/y.y:2124
			{
				yy_val.v = CharacterSubstringFunction{yy_dollar[3].v as CharacterValueExpression, yy_dollar[5].v as NumericValueExpression, yy_dollar[7].v as NumericValueExpression, yy_dollar[9].v as string}
			}
		}
		624 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:2131
			{
				yy_val.v = RoutineInvocation{'UPPER', [
					ValueExpression(CommonValueExpression(yy_dollar[3].v as CharacterValueExpression)),
				]}
			}
		}
		625 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:2135
			{
				yy_val.v = RoutineInvocation{'LOWER', [
					ValueExpression(CommonValueExpression(yy_dollar[3].v as CharacterValueExpression)),
				]}
			}
		}
		626 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:2141
			{
				yy_val.v = yy_dollar[3].v as TrimFunction
			}
		}
		627 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2144
			{
				space := CharacterValueExpression(CharacterPrimary(ValueExpressionPrimary(NonparenthesizedValueExpressionPrimary(ValueSpecification(new_varchar_value(' '))))))
				yy_val.v = TrimFunction{'BOTH', space, yy_dollar[1].v as CharacterValueExpression}
			}
		}
		628 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:2148
			{
				space := CharacterValueExpression(CharacterPrimary(ValueExpressionPrimary(NonparenthesizedValueExpressionPrimary(ValueSpecification(new_varchar_value(' '))))))
				yy_val.v = TrimFunction{'BOTH', space, yy_dollar[2].v as CharacterValueExpression}
			}
		}
		629 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:2152
			{
				space := CharacterValueExpression(CharacterPrimary(ValueExpressionPrimary(NonparenthesizedValueExpressionPrimary(ValueSpecification(new_varchar_value(' '))))))
				yy_val.v = TrimFunction{yy_dollar[1].v as string, space, yy_dollar[3].v as CharacterValueExpression}
			}
		}
		630 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:2156
			{
				yy_val.v = TrimFunction{'BOTH', yy_dollar[1].v as CharacterValueExpression, yy_dollar[3].v as CharacterValueExpression}
			}
		}
		631 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:2159
			{
				yy_val.v = TrimFunction{yy_dollar[1].v as string, yy_dollar[2].v as CharacterValueExpression, yy_dollar[4].v as CharacterValueExpression}
			}
		}
		632 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2164
			{
				yy_val.v = yy_dollar[1].v as CharacterValueExpression
			}
		}
		633 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2167
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		634 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2168
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		635 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2169
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		636 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2172
			{
				yy_val.v = yy_dollar[1].v as CharacterValueExpression
			}
		}
		637 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2175
			{
				yy_val.v = yy_dollar[1].v as NumericValueExpression
			}
		}
		638 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2178
			{
				yy_val.v = yy_dollar[1].v as NumericValueExpression
			}
		}
		639 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2183
			{
				yy_val.v = yy_dollar[1].v as DatetimePrimary
			}
		}
		640 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2186
			{
				yy_val.v = yy_dollar[1].v as DatetimePrimary
			}
		}
		641 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2189
			{
				yy_val.v = yy_dollar[1].v as DatetimePrimary
			}
		}
		642 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2196
			{
				yy_val.v = DatetimeValueFunction(yy_dollar[1].v as CurrentDate)
			}
		}
		643 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2199
			{
				yy_val.v = DatetimeValueFunction(yy_dollar[1].v as CurrentTime)
			}
		}
		644 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2202
			{
				yy_val.v = DatetimeValueFunction(yy_dollar[1].v as CurrentTimestamp)
			}
		}
		645 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2205
			{
				yy_val.v = DatetimeValueFunction(yy_dollar[1].v as LocalTime)
			}
		}
		646 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2208
			{
				yy_val.v = DatetimeValueFunction(yy_dollar[1].v as LocalTimestamp)
			}
		}
		647 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2213
			{
				yy_val.v = CurrentDate{}
			}
		}
		648 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2216
			{
				yy_val.v = CurrentTime{default_time_precision}
			}
		}
		649 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:2217
			{
				yy_val.v = CurrentTime{(yy_dollar[3].v as string).int()}
			}
		}
		650 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2222
			{
				yy_val.v = LocalTime{0}
			}
		}
		651 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:2223
			{
				yy_val.v = LocalTime{(yy_dollar[3].v as string).int()}
			}
		}
		652 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2228
			{
				yy_val.v = CurrentTimestamp{default_timestamp_precision}
			}
		}
		653 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:2229
			{
				yy_val.v = CurrentTimestamp{(yy_dollar[3].v as string).int()}
			}
		}
		654 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2234
			{
				yy_val.v = LocalTimestamp{6}
			}
		}
		655 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:2235
			{
				yy_val.v = LocalTimestamp{(yy_dollar[3].v as string).int()}
			}
		}
		656 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2242
			{
				yy_val.v = BooleanValueExpression{
					term: yy_dollar[1].v as BooleanTerm
				}
			}
		}
		657 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:2243
			{
				expr := yy_dollar[1].v as BooleanValueExpression
				yy_val.v = BooleanValueExpression{&expr, yy_dollar[3].v as BooleanTerm}
			}
		}
		658 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2249
			{
				yy_val.v = BooleanTerm{
					factor: yy_dollar[1].v as BooleanTest
				}
			}
		}
		659 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:2250
			{
				term := yy_dollar[1].v as BooleanTerm
				yy_val.v = BooleanTerm{&term, yy_dollar[3].v as BooleanTest}
			}
		}
		660 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2256
			{
				yy_val.v = yy_dollar[1].v as BooleanTest
			}
		}
		661 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:2257
			{
				b := yy_dollar[2].v as BooleanTest
				yy_val.v = BooleanTest{b.expr, b.not, b.value, !b.inverse}
			}
		}
		662 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2263
			{
				yy_val.v = BooleanTest{
					expr: yy_dollar[1].v as BooleanPrimary
				}
			}
		}
		663 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:2264
			{
				yy_val.v = BooleanTest{yy_dollar[1].v as BooleanPrimary, false, new_boolean_value(true), false}
			}
		}
		664 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:2272
			{
				yy_val.v = BooleanTest{yy_dollar[1].v as BooleanPrimary, false, new_boolean_value(false), false}
			}
		}
		665 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:2280
			{
				yy_val.v = BooleanTest{yy_dollar[1].v as BooleanPrimary, false, new_unknown_value(), false}
			}
		}
		666 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:2288
			{
				yy_val.v = BooleanTest{yy_dollar[1].v as BooleanPrimary, true, new_boolean_value(true), false}
			}
		}
		667 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:2296
			{
				yy_val.v = BooleanTest{yy_dollar[1].v as BooleanPrimary, true, new_boolean_value(false), false}
			}
		}
		668 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:2304
			{
				yy_val.v = BooleanTest{yy_dollar[1].v as BooleanPrimary, true, new_unknown_value(), false}
			}
		}
		669 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2314
			{
				yy_val.v = BooleanPrimary(yy_dollar[1].v as Predicate)
			}
		}
		670 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2315
			{
				yy_val.v = BooleanPrimary(yy_dollar[1].v as BooleanPredicand)
			}
		}
		671 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2318
			{
				yy_val.v = BooleanPredicand(yy_dollar[1].v as BooleanValueExpression)
			}
		}
		672 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2321
			{
				yy_val.v = BooleanPredicand(yy_dollar[1].v as NonparenthesizedValueExpressionPrimary)
			}
		}
		673 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:2326
			{
				yy_val.v = yy_dollar[2].v
			}
		}
		674 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2331
			{
				yy_val.v = ValueExpressionPrimary(yy_dollar[1].v as ParenthesizedValueExpression)
			}
		}
		675 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2334
			{
				yy_val.v = ValueExpressionPrimary(yy_dollar[1].v as NonparenthesizedValueExpressionPrimary)
			}
		}
		676 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:2339
			{
				yy_val.v = ParenthesizedValueExpression{yy_dollar[2].v as ValueExpression}
			}
		}
		677 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2344
			{
				yy_val.v = NonparenthesizedValueExpressionPrimary(yy_dollar[1].v as ValueSpecification)
			}
		}
		678 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2347
			{
				yy_val.v = NonparenthesizedValueExpressionPrimary(yy_dollar[1].v as Identifier)
			}
		}
		679 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2350
			{
				yy_val.v = NonparenthesizedValueExpressionPrimary(yy_dollar[1].v as AggregateFunction)
			}
		}
		680 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2353
			{
				yy_val.v = NonparenthesizedValueExpressionPrimary(yy_dollar[1].v as RoutineInvocation)
			}
		}
		681 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2356
			{
				yy_val.v = NonparenthesizedValueExpressionPrimary(yy_dollar[1].v as CaseExpression)
			}
		}
		682 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2359
			{
				yy_val.v = NonparenthesizedValueExpressionPrimary(yy_dollar[1].v as CastSpecification)
			}
		}
		683 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2362
			{
				yy_val.v = NonparenthesizedValueExpressionPrimary(yy_dollar[1].v as NextValueExpression)
			}
		}
		684 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2369
			{
				yy_val.v = ValueSpecification(yy_dollar[1].v as Value)
			}
		}
		685 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2370
			{
				yy_val.v = ValueSpecification(yy_dollar[1].v as GeneralValueSpecification)
			}
		}
		686 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2375
			{
				yy_val.v = ValueSpecification(yy_dollar[1].v as Value)
			}
		}
		687 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2376
			{
				yy_val.v = ValueSpecification(yy_dollar[1].v as GeneralValueSpecification)
			}
		}
		688 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2381
			{
				yy_val.v = yy_dollar[1].v as GeneralValueSpecification
			}
		}
		689 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2382
			{
				yy_val.v = GeneralValueSpecification(CurrentCatalog{})
			}
		}
		690 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2383
			{
				yy_val.v = GeneralValueSpecification(CurrentSchema{})
			}
		}
		691 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2386
			{
				yy_val.v = ValueSpecification(yy_dollar[1].v as Value)
			}
		}
		692 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2387
			{
				yy_val.v = ValueSpecification(yy_dollar[1].v as GeneralValueSpecification)
			}
		}
		693 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2392
			{
				yy_val.v = yy_dollar[1].v as GeneralValueSpecification
			}
		}
		694 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2397
			{
				yy_val.v = yy_dollar[1].v as NullSpecification
			}
		}
		695 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2400
			{
				yy_val.v = yy_dollar[1].v as NullSpecification
			}
		}
		696 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2403
			{
				yy_val.v = NullSpecification{}
			}
		}
		697 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2408
			{
				yy_val.v = yy_dollar[1].v as IdentifierChain
			}
		}
		698 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:2409
			{
				yy_val.v = IdentifierChain{(yy_dollar[1].v as IdentifierChain).identifier + '.' +
					(yy_dollar[3].v as IdentifierChain).identifier}
			}
		}
		699 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2416
			{
				yy_val.v = yy_dollar[1].v as IdentifierChain
			}
		}
		700 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2421
			{
				yy_val.v = new_column_identifier((yy_dollar[1].v as IdentifierChain).identifier)!
			}
		}
		701 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2432
			{
				yy_val.v = yy_dollar[1].v as AggregateFunction
			}
		}
		702 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2437
			{
				yy_val.v = yy_dollar[1].v as QualifiedJoin
			}
		}
		703 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2440
			{
				yy_val.v = yy_dollar[1].v as BooleanValueExpression
			}
		}
		704 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:2443
			{
				yy_val.v = yy_dollar[2].v
			}
		}
		706 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2447
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		707 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:2448
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		708 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2451
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		709 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2452
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		710 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:2462
			{
				yy_val.v = yy_dollar[2].v as BooleanValueExpression
			}
		}
		711 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:2467
			{
				yy_val.v = yy_dollar[3].v
			}
		}
		712 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2470
			{
				yy_val.v = [yy_dollar[1].v as Identifier]
			}
		}
		713 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:2471
			{
				yy_val.v = append_list(yy_dollar[1].v as []Identifier, yy_dollar[3].v as Identifier)
			}
		}
		714 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2476
			{
				yy_val.v = yy_dollar[1].v as Identifier
			}
		}
		715 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2479
			{
				yy_val.v = yy_dollar[1].v as Identifier
			}
		}
		716 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2482
			{
				yy_val.v = yy_dollar[1].v as Identifier
			}
		}
		717 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:2487
			{
				yy_val.v = QuerySpecification{
					exprs:            yy_dollar[2].v as SelectList
					table_expression: yy_dollar[3].v as TableExpression
				}
			}
		}
		718 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2495
			{
				yy_val.v = SelectList(AsteriskExpr(true))
			}
		}
		719 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2496
			{
				yy_val.v = yy_dollar[1].v as SelectList
			}
		}
		720 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:2497
			{
				mut new_select_list := ((yy_dollar[1].v as SelectList) as []DerivedColumn).clone()
				new_select_list << ((yy_dollar[3].v as SelectList) as []DerivedColumn)[0]
				yy_val.v = SelectList(new_select_list)
			}
		}
		721 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2504
			{
				yy_val.v = SelectList([yy_dollar[1].v as DerivedColumn])
			}
		}
		722 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2505
			{
				yy_val.v = SelectList(yy_dollar[1].v as QualifiedAsteriskExpr)
			}
		}
		723 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:2509
			{
				yy_val.v = QualifiedAsteriskExpr{new_column_identifier((yy_dollar[1].v as IdentifierChain).identifier)!}
			}
		}
		724 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2516
			{
				yy_val.v = yy_dollar[1].v as IdentifierChain
			}
		}
		725 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2519
			{
				yy_val.v = yy_dollar[1].v as IdentifierChain
			}
		}
		726 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2522
			{
				yy_val.v = DerivedColumn{yy_dollar[1].v as ValueExpression, Identifier{}}
			}
		}
		727 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:2525
			{
				yy_val.v = DerivedColumn{yy_dollar[1].v as ValueExpression, yy_dollar[2].v as Identifier}
			}
		}
		728 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:2530
			{
				yy_val.v = yy_dollar[2].v as Identifier
			}
		}
		729 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2531
			{
				yy_val.v = yy_dollar[1].v as Identifier
			}
		}
		730 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2536
			{
				yy_val.v = QueryExpression{
					body: yy_dollar[1].v as SimpleTable
				}
			}
		}
		731 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:2537
			{
				yy_val.v = QueryExpression{
					body:  yy_dollar[1].v as SimpleTable
					order: yy_dollar[2].v as []SortSpecification
				}
			}
		}
		732 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:2543
			{
				yy_val.v = QueryExpression{
					body:   yy_dollar[1].v as SimpleTable
					offset: yy_dollar[2].v as ValueSpecification
				}
			}
		}
		733 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:2549
			{
				yy_val.v = QueryExpression{
					body:   yy_dollar[1].v as SimpleTable
					offset: yy_dollar[3].v as ValueSpecification
					order:  yy_dollar[2].v as []SortSpecification
				}
			}
		}
		734 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:2556
			{
				yy_val.v = QueryExpression{
					body:  yy_dollar[1].v as SimpleTable
					fetch: yy_dollar[2].v as ValueSpecification
				}
			}
		}
		735 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:2562
			{
				yy_val.v = QueryExpression{
					body:  yy_dollar[1].v as SimpleTable
					fetch: yy_dollar[3].v as ValueSpecification
					order: yy_dollar[2].v as []SortSpecification
				}
			}
		}
		736 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:2570
			{
				yy_val.v = QueryExpression{
					body:   yy_dollar[1].v as SimpleTable
					offset: yy_dollar[3].v as ValueSpecification
					fetch:  yy_dollar[4].v as ValueSpecification
					order:  yy_dollar[2].v as []SortSpecification
				}
			}
		}
		737 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:2578
			{
				yy_val.v = QueryExpression{
					body:   yy_dollar[1].v as SimpleTable
					offset: yy_dollar[2].v as ValueSpecification
					fetch:  yy_dollar[3].v as ValueSpecification
				}
			}
		}
		738 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2587
			{
				yy_val.v = yy_dollar[1].v as SimpleTable
			}
		}
		739 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2590
			{
				yy_val.v = yy_dollar[1].v as SimpleTable
			}
		}
		740 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2593
			{
				yy_val.v = yy_dollar[1].v as SimpleTable
			}
		}
		741 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2596
			{
				yy_val.v = SimpleTable(yy_dollar[1].v as QuerySpecification)
			}
		}
		742 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2597
			{
				yy_val.v = yy_dollar[1].v as SimpleTable
			}
		}
		743 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:2600
			{
				yy_val.v = yy_dollar[3].v
			}
		}
		744 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:2603
			{
				yy_val.v = yy_dollar[2].v
			}
		}
		745 {
			yy_dollar = yy_s[yypt - 5..yypt + 1].clone()
			// line vsql/y.y:2606
			{
				yy_val.v = yy_dollar[3].v
			}
		}
		746 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2609
			{
				yy_val.v = yy_dollar[1].v as ValueSpecification
			}
		}
		747 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2612
			{
				yy_val.v = yy_dollar[1].v as ValueSpecification
			}
		}
		748 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2615
			{
				yy_val.v = yy_dollar[1].v as ValueSpecification
			}
		}
		751 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2624
			{
				yy_val.v = yy_dollar[1].v as QueryExpression
			}
		}
		752 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2627
			{
				yy_val.v = yy_dollar[1].v as TablePrimary
			}
		}
		753 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:2630
			{
				yy_val.v = TablePrimary{
					body: yy_dollar[2].v as QueryExpression
				}
			}
		}
		754 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2639
			{
				yy_val.v = RowValueConstructor(yy_dollar[1].v as CommonValueExpression)
			}
		}
		755 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2642
			{
				yy_val.v = RowValueConstructor(yy_dollar[1].v as BooleanValueExpression)
			}
		}
		756 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2645
			{
				yy_val.v = RowValueConstructor(yy_dollar[1].v as ExplicitRowValueConstructor)
			}
		}
		757 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:2650
			{
				yy_val.v = ExplicitRowValueConstructor(ExplicitRowValueConstructorRow{yy_dollar[3].v as []ValueExpression})
			}
		}
		758 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2653
			{
				yy_val.v = ExplicitRowValueConstructor(yy_dollar[1].v as QueryExpression)
			}
		}
		759 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2656
			{
				yy_val.v = [yy_dollar[1].v as ValueExpression]
			}
		}
		760 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:2657
			{
				yy_val.v = append_list(yy_dollar[1].v as []ValueExpression, yy_dollar[3].v as ValueExpression)
			}
		}
		761 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2662
			{
				yy_val.v = yy_dollar[1].v as ValueExpression
			}
		}
		762 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2665
			{
				yy_val.v = ContextuallyTypedRowValueConstructor(yy_dollar[1].v as CommonValueExpression)
			}
		}
		763 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2668
			{
				yy_val.v = ContextuallyTypedRowValueConstructor(yy_dollar[1].v as BooleanValueExpression)
			}
		}
		764 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2671
			{
				yy_val.v = ContextuallyTypedRowValueConstructor(yy_dollar[1].v as NullSpecification)
			}
		}
		765 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:2674
			{
				yy_val.v = ContextuallyTypedRowValueConstructor(yy_dollar[2].v as NullSpecification)
			}
		}
		766 {
			yy_dollar = yy_s[yypt - 5..yypt + 1].clone()
			// line vsql/y.y:2678
			{
				yy_val.v = ContextuallyTypedRowValueConstructor(push_list(yy_dollar[2].v as ContextuallyTypedRowValueConstructorElement,
					yy_dollar[4].v as []ContextuallyTypedRowValueConstructorElement))
			}
		}
		767 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2685
			{
				yy_val.v = [yy_dollar[1].v as ContextuallyTypedRowValueConstructorElement]
			}
		}
		768 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:2689
			{
				yy_val.v = append_list(yy_dollar[1].v as []ContextuallyTypedRowValueConstructorElement,
					yy_dollar[3].v as ContextuallyTypedRowValueConstructorElement)
			}
		}
		769 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2695
			{
				yy_val.v = ContextuallyTypedRowValueConstructorElement(yy_dollar[1].v as ValueExpression)
			}
		}
		770 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2698
			{
				yy_val.v = ContextuallyTypedRowValueConstructorElement(yy_dollar[1].v as NullSpecification)
			}
		}
		771 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2703
			{
				yy_val.v = RowValueConstructorPredicand(yy_dollar[1].v as CommonValueExpression)
			}
		}
		772 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2706
			{
				yy_val.v = RowValueConstructorPredicand(yy_dollar[1].v as BooleanPredicand)
			}
		}
		773 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2713
			{
				yy_val.v = yy_dollar[1].v as RowValueConstructor
			}
		}
		774 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2716
			{
				yy_val.v = yy_dollar[1].v as ContextuallyTypedRowValueConstructor
			}
		}
		775 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2721
			{
				yy_val.v = yy_dollar[1].v as RowValueConstructorPredicand
			}
		}
		776 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:2728
			{
				yy_val.v = SimpleTable(yy_dollar[2].v as []RowValueConstructor)
			}
		}
		777 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2733
			{
				yy_val.v = [yy_dollar[1].v as RowValueConstructor]
			}
		}
		778 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:2734
			{
				yy_val.v = append_list(yy_dollar[1].v as []RowValueConstructor, yy_dollar[3].v as RowValueConstructor)
			}
		}
		779 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:2740
			{
				yy_val.v = yy_dollar[2].v as []ContextuallyTypedRowValueConstructor
			}
		}
		780 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2745
			{
				yy_val.v = [yy_dollar[1].v as ContextuallyTypedRowValueConstructor]
			}
		}
		781 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:2749
			{
				yy_val.v = append_list(yy_dollar[1].v as []ContextuallyTypedRowValueConstructor,
					yy_dollar[3].v as ContextuallyTypedRowValueConstructor)
			}
		}
		782 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2757
			{
				yy_val.v = TableExpression{yy_dollar[1].v as TableReference, none, []Identifier{}}
			}
		}
		783 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:2760
			{
				yy_val.v = TableExpression{yy_dollar[1].v as TableReference, yy_dollar[2].v as BooleanValueExpression, []Identifier{}}
			}
		}
		784 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:2767
			{
				yy_val.v = TableExpression{yy_dollar[1].v as TableReference, none, yy_dollar[2].v as []Identifier}
			}
		}
		785 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:2770
			{
				yy_val.v = TableExpression{yy_dollar[1].v as TableReference, yy_dollar[2].v as BooleanValueExpression, yy_dollar[3].v as []Identifier}
			}
		}
		786 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:2781
			{
				yy_val.v = yy_dollar[2].v as TableReference
			}
		}
		787 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2784
			{
				yy_val.v = yy_dollar[1].v as TableReference
			}
		}
		788 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2789
			{
				yy_val.v = TableReference(yy_dollar[1].v as TablePrimary)
			}
		}
		789 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2790
			{
				yy_val.v = TableReference(yy_dollar[1].v as QualifiedJoin)
			}
		}
		790 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:2793
			{
				yy_val.v = QualifiedJoin{yy_dollar[1].v as TableReference, 'INNER', yy_dollar[3].v as TableReference, yy_dollar[4].v as BooleanValueExpression}
			}
		}
		791 {
			yy_dollar = yy_s[yypt - 5..yypt + 1].clone()
			// line vsql/y.y:2801
			{
				yy_val.v = QualifiedJoin{yy_dollar[1].v as TableReference, yy_dollar[2].v as string, yy_dollar[4].v as TableReference, yy_dollar[5].v as BooleanValueExpression}
			}
		}
		792 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2811
			{
				yy_val.v = yy_dollar[1].v as TablePrimary
			}
		}
		793 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2814
			{
				yy_val.v = TablePrimary{
					body: yy_dollar[1].v as Identifier
				}
			}
		}
		794 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2819
			{
				yy_val.v = yy_dollar[1].v as TablePrimary
			}
		}
		795 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:2820
			{
				yy_val.v = TablePrimary{
					body:        (yy_dollar[1].v as TablePrimary).body
					correlation: yy_dollar[2].v as Correlation
				}
			}
		}
		796 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2828
			{
				yy_val.v = Correlation{
					name: yy_dollar[1].v as Identifier
				}
			}
		}
		797 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:2833
			{
				yy_val.v = Correlation{
					name: yy_dollar[2].v as Identifier
				}
			}
		}
		798 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:2838
			{
				yy_val.v = Correlation{
					name:    yy_dollar[1].v as Identifier
					columns: yy_dollar[2].v as []Identifier
				}
			}
		}
		799 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:2844
			{
				yy_val.v = Correlation{
					name:    yy_dollar[2].v as Identifier
					columns: yy_dollar[3].v as []Identifier
				}
			}
		}
		800 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2852
			{
				yy_val.v = yy_dollar[1].v as TablePrimary
			}
		}
		801 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2855
			{
				yy_val.v = yy_dollar[1].v as Identifier
			}
		}
		802 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2858
			{
				yy_val.v = yy_dollar[1].v as []Identifier
			}
		}
		803 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2861
			{
				yy_val.v = [yy_dollar[1].v as Identifier]
			}
		}
		804 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:2862
			{
				yy_val.v = append_list(yy_dollar[1].v as []Identifier, yy_dollar[3].v as Identifier)
			}
		}
		805 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:2867
			{
				yy_val.v = yy_dollar[2].v
			}
		}
		806 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2872
			{
				yy_val.v = Predicate(yy_dollar[1].v as ComparisonPredicate)
			}
		}
		807 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2873
			{
				yy_val.v = Predicate(yy_dollar[1].v as BetweenPredicate)
			}
		}
		808 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2874
			{
				yy_val.v = Predicate(yy_dollar[1].v as CharacterLikePredicate)
			}
		}
		809 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2875
			{
				yy_val.v = Predicate(yy_dollar[1].v as SimilarPredicate)
			}
		}
		810 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2876
			{
				yy_val.v = Predicate(yy_dollar[1].v as NullPredicate)
			}
		}
		811 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2881
			{
				yy_val.v = yy_dollar[1].v as BooleanValueExpression
			}
		}
		812 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:2886
			{
				comp := yy_dollar[2].v as ComparisonPredicatePart2
				yy_val.v = ComparisonPredicate{yy_dollar[1].v as RowValueConstructorPredicand, comp.op, comp.expr}
			}
		}
		813 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:2896
			{
				yy_val.v = ComparisonPredicatePart2{yy_dollar[1].v as string, yy_dollar[2].v as RowValueConstructorPredicand}
			}
		}
		814 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2904
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		815 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2905
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		816 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2906
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		817 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2907
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		818 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2908
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		819 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2909
			{
				yy_val.v = yy_dollar[1].v as string
			}
		}
		820 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:2914
			{
				between := yy_dollar[2].v as BetweenPredicate
				yy_val.v = BetweenPredicate{
					not:       between.not
					symmetric: between.symmetric
					expr:      yy_dollar[1].v as RowValueConstructorPredicand
					left:      between.left
					right:     between.right
				}
			}
		}
		821 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:2926
			{
				yy_val.v = BetweenPredicate{
					not:       !(yy_dollar[1].v as bool)
					symmetric: false
					left:      yy_dollar[2].v as RowValueConstructorPredicand
					right:     yy_dollar[4].v as RowValueConstructorPredicand
				}
			}
		}
		822 {
			yy_dollar = yy_s[yypt - 5..yypt + 1].clone()
			// line vsql/y.y:2935
			{
				yy_val.v = BetweenPredicate{
					not:       !(yy_dollar[1].v as bool)
					symmetric: yy_dollar[2].v as bool
					left:      yy_dollar[3].v as RowValueConstructorPredicand
					right:     yy_dollar[5].v as RowValueConstructorPredicand
				}
			}
		}
		823 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2945
			{
				yy_val.v = true
			}
		}
		824 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:2946
			{
				yy_val.v = false
			}
		}
		825 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2949
			{
				yy_val.v = true
			}
		}
		826 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2950
			{
				yy_val.v = false
			}
		}
		827 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2955
			{
				yy_val.v = yy_dollar[1].v as CharacterLikePredicate
			}
		}
		828 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:2958
			{
				like := yy_dollar[2].v as CharacterLikePredicate
				yy_val.v = CharacterLikePredicate{yy_dollar[1].v as RowValueConstructorPredicand, like.right, like.not}
			}
		}
		829 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:2968
			{
				yy_val.v = CharacterLikePredicate{none, yy_dollar[2].v as CharacterValueExpression, false}
			}
		}
		830 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:2971
			{
				yy_val.v = CharacterLikePredicate{none, yy_dollar[3].v as CharacterValueExpression, true}
			}
		}
		831 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2976
			{
				yy_val.v = yy_dollar[1].v as CharacterValueExpression
			}
		}
		832 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:2981
			{
				like := yy_dollar[2].v as SimilarPredicate
				yy_val.v = SimilarPredicate{yy_dollar[1].v as RowValueConstructorPredicand, like.right, like.not}
			}
		}
		833 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:2987
			{
				yy_val.v = SimilarPredicate{none, yy_dollar[3].v as CharacterValueExpression, false}
			}
		}
		834 {
			yy_dollar = yy_s[yypt - 4..yypt + 1].clone()
			// line vsql/y.y:2990
			{
				yy_val.v = SimilarPredicate{none, yy_dollar[4].v as CharacterValueExpression, true}
			}
		}
		835 {
			yy_dollar = yy_s[yypt - 1..yypt + 1].clone()
			// line vsql/y.y:2995
			{
				yy_val.v = yy_dollar[1].v as CharacterValueExpression
			}
		}
		836 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:3000
			{
				yy_val.v = NullPredicate{yy_dollar[1].v as RowValueConstructorPredicand, !(yy_dollar[2].v as bool)}
			}
		}
		837 {
			yy_dollar = yy_s[yypt - 2..yypt + 1].clone()
			// line vsql/y.y:3005
			{
				yy_val.v = true
			}
		}
		838 {
			yy_dollar = yy_s[yypt - 3..yypt + 1].clone()
			// line vsql/y.y:3006
			{
				yy_val.v = false
			}
		}
		else {}
	}
	unsafe {
		goto yystack
		// stack new state and value
	}
}

fn gocopy[T](mut dst []T, src []T) int {
	mut min := dst.len
	if src.len < min {
		min = src.len
	}
	for i := 0; i < min; i++ {
		dst[i] = src[i]
	}
	return src.len
}
